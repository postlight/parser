{"version":3,"file":"mercury.js","sources":["../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/page-num-from-url.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/resource/utils/constants.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/utils/dom/constants.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/utils/dom/clean-tags.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/clean.js","../src/resource/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/utils/merge-supported-domains.js","../src/extractors/add-extractor.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.cinemablend.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.howtogeek.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/fusion.net/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.nj.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/custom/www.ladbible.com/index.js","../src/extractors/custom/timesofindia.indiatimes.com/index.js","../src/extractors/custom/ma.ttias.be/index.js","../src/extractors/custom/pastebin.com/index.js","../src/extractors/custom/www.abendblatt.de/index.js","../src/extractors/custom/www.gruene.de/index.js","../src/extractors/custom/www.engadget.com/index.js","../src/extractors/custom/arstechnica.com/index.js","../src/extractors/custom/www.ndtv.com/index.js","../src/extractors/custom/www.spektrum.de/index.js","../src/extractors/all.js","../src/cleaners/constants.js","../src/cleaners/author.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/cleaners/index.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/content/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/generic/index.js","../src/extractors/detect-by-html.js","../src/extractors/get-extractor.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/mercury.js"],"sourcesContent":["const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp(\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\n  'i'\n);\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\nexport const DEFAULT_ENCODING = 'utf-8';\n","import { PAGE_IN_HREF_RE } from './constants';\n\nexport default function pageNumFromUrl(url) {\n  const matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  const pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n","export default function removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path\n    .split('/')\n    .reverse()\n    .reduce((acc, rawSegment, index) => {\n      let segment = rawSegment;\n\n      // Split off and save anything that looks like a file type.\n      if (segment.includes('.')) {\n        const [possibleSegment, fileExt] = segment.split('.');\n        if (IS_ALPHA_RE.test(fileExt)) {\n          segment = possibleSegment;\n        }\n      }\n\n      // If our first or second segment has anything looking like a page\n      // number, remove it.\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\n      }\n\n      // If we're on the first segment, check to see if we have any\n      // characters in it. The first segment is actually the last bit of\n      // the URL, and this will be helpful to determine if we're on a URL\n      // segment that looks like \"/2/\" for example.\n      if (index === 0) {\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n      }\n\n      // If it's not marked for deletion, push it to cleaned_segments.\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n        acc.push(segment);\n      }\n\n      return acc;\n    }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","export default function excerptContent(content, words = 10) {\n  return content\n    .trim()\n    .split(/\\s+/)\n    .slice(0, words)\n    .join(' ');\n}\n","import iconv from 'iconv-lite';\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nexport default function getEncoding(str) {\n  let encoding = DEFAULT_ENCODING;\n  const matches = ENCODING_RE.exec(str);\n  if (matches !== null) {\n    [, str] = matches;\n  }\n  if (iconv.encodingExists(str)) {\n    encoding = str;\n  }\n  return encoding;\n}\n","import cheerio from 'cheerio';\n\n// Browser does not like us setting user agent\nexport const REQUEST_HEADERS = cheerio.browser\n  ? {}\n  : {\n      'User-Agent':\n        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n    };\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nexport const FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nconst BAD_CONTENT_TYPES = [\n  'audio/mpeg',\n  'image/gif',\n  'image/jpeg',\n  'image/jpg',\n];\n\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\n  'i'\n);\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nexport const MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\nexport const PROXY_DOMAINS = false;\nexport const REQUESTS_PROXIES = {\n  http: 'http://38.98.105.139:33333',\n  https: 'http://38.98.105.139:33333',\n};\n\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\n","import URL from 'url';\nimport request from 'postman-request';\n\nimport {\n  REQUEST_HEADERS,\n  FETCH_TIMEOUT,\n  BAD_CONTENT_TYPES_RE,\n  MAX_CONTENT_LENGTH,\n} from './constants';\n\nfunction get(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, response, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body, response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 or not.\n// Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nexport function validateResponse(response, parseNon200 = false) {\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (\n    (response.statusMessage && response.statusMessage !== 'OK') ||\n    response.statusCode !== 200\n  ) {\n    if (!response.statusCode) {\n      throw new Error(\n        `Unable to fetch content. Original exception was ${response.error}`\n      );\n    } else if (!parseNon200) {\n      throw new Error(\n        `Resource returned a response status code of ${\n          response.statusCode\n        } and resource was instructed to reject non-200 status codes.`\n      );\n    }\n  }\n\n  const {\n    'content-type': contentType,\n    'content-length': contentLength,\n  } = response.headers;\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error(\n      `Content-type for this resource was ${contentType} and is not allowed.`\n    );\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error(\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\n    );\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\nexport function baseDomain({ host }) {\n  return host\n    .split('.')\n    .slice(-2)\n    .join('.');\n}\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n  const options = {\n    url: parsedUrl.href,\n    headers: { ...REQUEST_HEADERS, ...headers },\n    timeout: FETCH_TIMEOUT,\n    // Accept cookies\n    jar: true,\n    // Set to null so the response returns as binary and body as buffer\n    // https://github.com/request/request#requestoptions-callback\n    encoding: null,\n    // Accept and decode gzip\n    gzip: true,\n    // Follow any non-GET redirects\n    followAllRedirects: true,\n    ...(typeof window !== 'undefined'\n      ? {}\n      : {\n          // Follow GET redirects; this option is for Node only\n          followRedirect: true,\n        }),\n  };\n\n  const { response, body } = await get(options);\n\n  try {\n    validateResponse(response);\n    return {\n      body,\n      response,\n    };\n  } catch (e) {\n    return {\n      error: true,\n      message: e.message,\n    };\n  }\n}\n","function convertMetaProp($, from, to) {\n  $(`meta[${from}]`).each((_, node) => {\n    const $node = $(node);\n\n    const value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nexport default function normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n","// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n  'iframe[src^=\"https://www.redditmedia.com\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\n  selector => `[${selector}]`\n);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = [\n  'src',\n  'srcset',\n  'sizes',\n  'type',\n  'href',\n  'class',\n  'id',\n  'alt',\n  'xlink:href',\n  'width',\n  'height',\n];\n\nexport const WHITELIST_ATTRS_RE = new RegExp(\n  `^(${WHITELIST_ATTRS.join('|')})$`,\n  'i'\n);\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\n  tag => `${tag}:empty`\n).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = [\n  'ul',\n  'ol',\n  'table',\n  'div',\n  'button',\n  'form',\n].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\n\nexport default function stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*')\n    .not('a')\n    .each((index, node) => {\n      const $node = $(node);\n      const classes = $node.attr('class');\n      const id = $node.attr('id');\n      if (!id && !classes) return;\n\n      const classAndId = `${classes || ''} ${id || ''}`;\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\n        return;\n      }\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\n        $node.remove();\n      }\n    });\n\n  return $;\n}\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (\n      sibling &&\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\n    ) {\n      const { nextSibling } = sibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertible = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertible) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertible = $span.parents('p, div, li, figcaption').length === 0;\n    if (convertible) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n\n  const attribString = Reflect.ownKeys(attrs)\n    .map(key => `${key}=${attrs[key]}`)\n    .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html =\n      node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\n\nexport default function markToKeep(article, $, url, tags = []) {\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    const { protocol, hostname } = URL.parse(url);\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article)\n    .not(`.${KEEP_CLASS}`)\n    .remove();\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nexport default function cleanHOnes(article, $) {\n  const $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each((index, node) => $(node).remove());\n  } else {\n    $hOnes.each((index, node) => {\n      convertNodeTo($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n","import { getAttrs, setAttrs } from 'utils/dom';\n\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\n\nfunction removeAllButWhitelist($article, $) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(\n      node,\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\n        if (WHITELIST_ATTRS_RE.test(attr)) {\n          return { ...acc, [attr]: attrs[attr] };\n        }\n\n        return acc;\n      }, {})\n    );\n  });\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\n\n  return $article;\n}\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article, $) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ? $article.parent() : $article,\n    $\n  );\n}\n","export default function removeEmpty($article, $) {\n  $article.find('p').each((index, p) => {\n    const $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\n      $p.remove();\n  });\n\n  return $;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import { scoreCommas, scoreLength } from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import { getOrInitScore, setScore } from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  }\n  if (tagName.toLowerCase() === 'div') {\n    return 5;\n  }\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  }\n  if (BAD_TAGS.test(tagName)) {\n    return -3;\n  }\n  if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre')\n    .not('[score]')\n    .each((index, node) => {\n      // The raw score for this paragraph, before we add any parent/child\n      // scores.\n      let $node = $(node);\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n      const $parent = $node.parent();\n      const rawScore = scoreNode($node);\n\n      addScoreTo($parent, $, rawScore, weightNodes);\n      if ($parent) {\n        // Add half of the individual content score to the\n        // grandparent\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n      }\n    });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","import { textLength, linkDensity } from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate\n    .parent()\n    .children()\n    .each((index, sibling) => {\n      const $sibling = $(sibling);\n      // Ignore tags like BR, HR, etc\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n        return null;\n      }\n\n      const siblingScore = getScore($sibling);\n      if (siblingScore) {\n        if ($sibling.get(0) === $candidate.get(0)) {\n          wrappingDiv.append($sibling);\n        } else {\n          let contentBonus = 0;\n          const density = linkDensity($sibling);\n\n          // If sibling has a very low link density,\n          // give it a small bonus\n          if (density < 0.05) {\n            contentBonus += 20;\n          }\n\n          // If sibling has a high link density,\n          // give it a penalty\n          if (density >= 0.5) {\n            contentBonus -= 20;\n          }\n\n          // If sibling node has the same class as\n          // candidate, give it a bonus\n          if ($sibling.attr('class') === $candidate.attr('class')) {\n            contentBonus += topScore * 0.2;\n          }\n\n          const newScore = siblingScore + contentBonus;\n\n          if (newScore >= siblingScoreThreshold) {\n            return wrappingDiv.append($sibling);\n          }\n          if (sibling.tagName === 'p') {\n            const siblingContent = $sibling.text();\n            const siblingContentLength = textLength(siblingContent);\n\n            if (siblingContentLength > 80 && density < 0.25) {\n              return wrappingDiv.append($sibling);\n            }\n            if (\n              siblingContentLength <= 80 &&\n              density === 0 &&\n              hasSentenceEnd(siblingContent)\n            ) {\n              return wrappingDiv.append($sibling);\n            }\n          }\n        }\n      }\n\n      return null;\n    });\n\n  if (\n    wrappingDiv.children().length === 1 &&\n    wrappingDiv\n      .children()\n      .first()\n      .get(0) === $candidate.get(0)\n  ) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\nimport mergeSiblings from './merge-siblings';\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nexport default function findTopCandidate($) {\n  let $candidate;\n  let topScore = 0;\n\n  $('[score]').each((index, node) => {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\n      return;\n    }\n\n    const $node = $(node);\n    const score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (\n          previousNode &&\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\n        ) {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    // If marked to keep, skip it\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\n      return;\n\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","import { getWeight } from 'extractors/generic/content/scoring';\n\nimport { HEADER_TAG_LIST } from './constants';\nimport { normalizeSpaces } from '../text';\n\nexport default function cleanHeaders($article, $, title = '') {\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\n    const $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nexport default function rewriteTopLevel(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo($('html'), $, 'div');\n  $ = convertNodeTo($('body'), $, 'div');\n\n  return $;\n}\n","import URL from 'url';\n\nimport { getAttrs, setAttr } from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr) {\n  const baseUrl = $('base').attr('href');\n\n  $(`[${attr}]`).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n    if (!url) return;\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\n\n    setAttr(node, attr, absoluteUrl);\n  });\n}\n\nfunction absolutizeSet($, rootUrl, $content) {\n  $('[srcset]', $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const urlSet = attrs.srcset;\n\n    if (urlSet) {\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\n      // space characters inside the URL should be encoded (%20 or +)\n      const candidates = urlSet.match(\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\n      );\n      if (!candidates) return;\n      const absoluteCandidates = candidates.map(candidate => {\n        // a candidate URL cannot start or end with a comma\n        // descriptors are separated from the URLs by unescaped whitespace\n        const parts = candidate\n          .trim()\n          .replace(/,$/, '')\n          .split(/\\s+/);\n        parts[0] = URL.resolve(rootUrl, parts[0]);\n        return parts.join(' ');\n      });\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\n      setAttr(node, 'srcset', absoluteUrlSet);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\n  absolutizeSet($, url, $content);\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  }\n  if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { stripTags } from 'utils/dom';\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nexport default function extractFromMeta(\n  $,\n  metaNames,\n  cachedNames,\n  cleanTags = true\n) {\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of foundNames) {\n    const type = 'name';\n    const value = 'value';\n\n    const nodes = $(`meta[${type}=\"${name}\"]`);\n\n    // Get the unique value of every matching node, in case there\n    // are two meta tags with the same name and value.\n    // Remove empty values.\n    const values = nodes\n      .map((index, node) => $(node).attr(value))\n      .toArray()\n      .filter(text => text !== '');\n\n    // If we have more than one value for the same name, we have a\n    // conflict and can't trust any of them. Skip this name. If we have\n    // zero, that means our meta tags had no values. Skip this name\n    // also.\n    if (values.length === 1) {\n      let metaValue;\n      // Meta values that contain HTML should be stripped, as they\n      // weren't subject to cleaning previously.\n      if (cleanTags) {\n        metaValue = stripTags(values[0], $);\n      } else {\n        [metaValue] = values;\n      }\n\n      return metaValue;\n    }\n  }\n\n  // If nothing is found, return null\n  return null;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find(parent => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","import { IS_WP_SELECTOR } from './constants';\n\nexport default function isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","export default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    Reflect.ownKeys(attrs).forEach(key => {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n","export const IS_LINK = new RegExp('https?://', 'i');\nconst IMAGE_RE = '.(png|gif|jpe?g)';\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\nexport const IS_SRCSET = new RegExp(\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\n  'i'\n);\n\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n","import { getAttrs } from 'utils/dom';\n\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nexport default function convertLazyLoadedImages($) {\n  $('img').each((_, img) => {\n    const attrs = getAttrs(img);\n\n    Reflect.ownKeys(attrs).forEach(attr => {\n      const value = attrs[attr];\n\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\n        $(img).attr('srcset', value);\n      } else if (\n        attr !== 'src' &&\n        attr !== 'srcset' &&\n        IS_LINK.test(value) &&\n        IS_IMAGE.test(value)\n      ) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n","import { TAGS_TO_REMOVE } from './constants';\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root()\n    .find('*')\n    .contents()\n    .filter(isComment)\n    .remove();\n\n  return $;\n}\n\nexport default function clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n","import cheerio from 'cheerio';\nimport iconv from 'iconv-lite';\n\nimport { getEncoding } from 'utils/text';\nimport { fetchResource } from './utils';\nimport { normalizeMetaTags, convertLazyLoadedImages, clean } from './utils/dom';\n\nconst Resource = {\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  // :param headers: Custom headers to be included in the request\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\n    let result;\n\n    if (preparedResponse) {\n      const validResponse = {\n        statusMessage: 'OK',\n        statusCode: 200,\n        headers: {\n          'content-type': 'text/html',\n          'content-length': 500,\n        },\n      };\n\n      result = {\n        body: preparedResponse,\n        response: validResponse,\n        alreadyDecoded: true,\n      };\n    } else {\n      result = await fetchResource(url, parsedUrl, headers);\n    }\n\n    if (result.error) {\n      result.failed = true;\n      return result;\n    }\n\n    return this.generateDoc(result);\n  },\n\n  generateDoc({ body: content, response, alreadyDecoded = false }) {\n    const { 'content-type': contentType = '' } = response.headers;\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    let $ = this.encodeDoc({ content, contentType, alreadyDecoded });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  },\n\n  encodeDoc({ content, contentType, alreadyDecoded = false }) {\n    if (alreadyDecoded) {\n      return cheerio.load(content);\n    }\n\n    const encoding = getEncoding(contentType);\n    let decodedContent = iconv.decode(content, encoding);\n    let $ = cheerio.load(decodedContent);\n    // after first cheerio.load, check to see if encoding matches\n    const contentTypeSelector = cheerio.browser\n      ? 'meta[http-equiv=content-type]'\n      : 'meta[http-equiv=content-type i]';\n    const metaContentType =\n      $(contentTypeSelector).attr('content') ||\n      $('meta[charset]').attr('charset');\n    const properEncoding = getEncoding(metaContentType);\n\n    // if encodings in the header/body dont match, use the one in the body\n    if (metaContentType && properEncoding !== encoding) {\n      decodedContent = iconv.decode(content, properEncoding);\n      $ = cheerio.load(decodedContent);\n    }\n\n    return $;\n  },\n};\n\nexport default Resource;\n","export default function* range(start = 1, end = 1) {\n  while (start <= end) {\n    yield (start += 1);\n  }\n}\n","// extremely simple url validation as a first step\nexport default function validateUrl({ hostname }) {\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n","const merge = (extractor, domains) =>\n  domains.reduce((acc, domain) => {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n\nexport default function mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\n    : merge(extractor, [extractor.domain]);\n}\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\n\nexport const apiExtractors = {};\n\nexport default function addExtractor(extractor) {\n  if (!extractor || !extractor.domain) {\n    return {\n      error: true,\n      message: 'Unable to add custom extractor. Invalid parameters.',\n    };\n  }\n\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\n\n  return apiExtractors;\n}\n","export const BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div',\n    },\n  },\n\n  author: {\n    selectors: ['.post-author-name'],\n  },\n\n  title: {\n    selectors: ['.post h2.title'],\n  },\n\n  date_published: {\n    selectors: ['span.publishdate'],\n  },\n};\n","export const NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: ($node, $) => {\n        const $children = $.browser ? $($node.text()) : $node.children();\n        if (\n          $children.length === 1 &&\n          $children.get(0) !== undefined &&\n          $children.get(0).tagName.toLowerCase() === 'img'\n        ) {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author'],\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.article-timestamp[datetime]', 'datetime'],\n      'time.article-timestamp',\n    ],\n  },\n};\n","export const WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': $node => {\n        const $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure',\n    },\n\n    // Selectors to remove from the extracted content\n    clean: [\n      '.mw-editsection',\n      'figure tr, figure td, figure tbody',\n      '#toc',\n      '.navbox',\n    ],\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title'],\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod'],\n  },\n};\n","export const TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': ($node, $) => {\n        const tweets = $node.find('.tweet');\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span',\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username'],\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\n  },\n};\n","export const NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: [\n      'h1.g-headline',\n      'h1[itemprop=\"headline\"]',\n      'h1.headline',\n      'h1 .balancedHeadline',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.g-byline',\n      '.byline',\n      ['meta[name=\"byl\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': $node => {\n        let src = $node.attr('src');\n        const width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      },\n    },\n\n    clean: [\n      '.ad',\n      'header#story-header',\n      '.story-body-1 .lede.video',\n      '.visually-hidden',\n      '#newsletter-promo',\n      '.promo',\n      '.comments-button',\n      '.hidden',\n      '.comments',\n      '.supplemental',\n      '.nocontent',\n      '.story-footer-links',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\nexport const TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1', '.c-article-header__hed'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\n  },\n\n  content: {\n    selectors: ['article', '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.partner-box',\n      '.callout',\n      '.c-article-writer__image',\n      '.c-article-writer__content',\n      '.c-letters-cta__text',\n      '.c-footer__logo',\n      '.c-recirculation-link',\n      '.twitter-tweet',\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['img[itemprop=\"url\"]', 'src']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: [\n      'h1[class^=\"content-header\"]',\n      'h1[class^=\"ArticleHeader__hed\"]',\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\n      'article header div[class*=\"Byline__multipleContributors\"]',\n    ],\n  },\n\n  content: {\n    selectors: [\n      'article.article.main-content',\n      'main[class^=\"Layout__content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['footer[class^=\"ArticleFooter__footer\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      'time.content-header__publish-date',\n      ['meta[name=\"pubdate\"]', 'value'],\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['div.content-header__dek', 'h2[class^=\"ArticleHeader__dek\"]'],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: [\n      'h1.content-header__hed',\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      'a[rel=\"author\"]',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'article.article.main-content',\n      'article.content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden', 'figcaption img.photo'],\n  },\n\n  date_published: {\n    selectors: [\n      'time.content-header__publish-date',\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: [\n      'h1',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.authorname-txt',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'div.richtext',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption'],\n  },\n\n  date_published: {\n    selectors: ['span.time'],\n  },\n\n  lead_image_url: {\n    selectors: [],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: [\n      'header.canvas-header',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.provider-name',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.content-canvas',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption'],\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: [\n      'h1[id=\"post-title\"]',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-action=\"user/username\"]',\n      'byline__author',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      ['.longform_custom_header_media', '#buzz_sub_buzz'],\n      '#buzz_sub_buzz',\n    ],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': $node => {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source':\n        'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.instapaper_ignore',\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\n      '.share-box',\n      '.print',\n    ],\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: [\n      'h1.entry-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      '.author vcard',\n      '.fn',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.grid-content',\n      '.entry-content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: [\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.mainContentIntro',\n      '.content-wrapper',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n      // enter title selectors\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard'],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.story-main-content',\n      '.content-group',\n      '.story-core',\n      '.story-text',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption'],\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [\n      // enter lead_image_url selectors\n      ['meta[name=\"og:image\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","export const DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: [\n    'jezebel.com',\n    'lifehacker.com',\n    'kotaku.com',\n    'gizmodo.com',\n    'jalopnik.com',\n    'kinja.com',\n    'avclub.com',\n    'clickhole.com',\n    'splinternews.com',\n    'theonion.com',\n    'theroot.com',\n    'thetakeout.com',\n    'theinventory.com',\n  ],\n\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  content: {\n    selectors: ['.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\n        const youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox'],\n  },\n\n  date_published: {\n    selectors: [['time.updated[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1.article-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]'],\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.PostByline__name'],\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\n        const data = JSON.parse($node.attr('data-props'));\n        const { src } = data.sources[0];\n        const $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const MediumExtractor = {\n  domain: 'medium.com',\n\n  title: {\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Re-write lazy-loaded youtube videos\n      iframe: $node => {\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\n        const $parent = $node.parents('figure');\n\n        if (ytRe.test(thumb)) {\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n          const $caption = $parent.find('figcaption');\n          $parent.empty().append([$node, $caption]);\n          return;\n        }\n\n        // If we can't draw the YouTube preview, remove the figure.\n        $parent.remove();\n      },\n\n      // rewrite figures to pull out image and caption, remove rest\n      figure: $node => {\n        // ignore if figure has an iframe\n        if ($node.find('iframe').length > 0) return;\n\n        const $img = $node.find('img').slice(-1)[0];\n        const $caption = $node.find('figcaption');\n\n        $node.empty().append([$img, $caption]);\n      },\n\n      // Remove any smaller images that did not get caught by the generic image\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\n      img: $node => {\n        const width = parseInt($node.attr('width'), 10);\n        if (width < 100) $node.remove();\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span', 'svg'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article-posted-date'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link'],\n  },\n};\n","export const WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper'],\n  },\n\n  author: {\n    selectors: ['.pb-author-name'],\n  },\n\n  date_published: {\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': $node => {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\n  },\n};\n","export const WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title'],\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:modified_time\"]', 'value'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.pull-quote',\n      '.tag-cloud',\n      '.embed-asset',\n      '.below-entry',\n      '.entry-corrections',\n      '#suggested-story',\n    ],\n  },\n};\n","export const NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline', '.minutes-primary h1.minute-title'],\n  },\n\n  author: {\n    selectors: ['div.author-list', '.minutes-primary h3.minute-byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.article-cover', 'div.content-body'],\n      ['.minute-image', '.minutes-primary div.content-body'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside'],\n  },\n};\n","export const MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title'],\n  },\n\n  author: {\n    selectors: ['.byline a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: ['#storytext h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading'],\n  },\n};\n","export const WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  supportedDomains: ['www.polygon.com'],\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // feature template multi-match\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n      // regular post multi-match\n      ['.e-image--hero', '.c-entry-content'],\n      // feature template fallback\n      '.l-wrapper .l-feature',\n      // regular post fallback\n      'div.c-entry-content',\n    ],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.aside',\n      'img.c-dynamic-image', // images come from noscript transform\n    ],\n  },\n};\n","export const WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1'],\n  },\n\n  author: {\n    selectors: ['.metadata__byline__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // a more specific selector to grab the lead image and the body\n      ['.media__video--thumbnail', '.zn-body-text'],\n      // a fallback for the above\n      '.zn-body-text',\n      'div[itemprop=\"articleBody\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\n        const $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': $node => {\n        if ($node.has('a')) {\n          if (\n            $node.text().trim() ===\n            $node\n              .find('a')\n              .text()\n              .trim()\n          ) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwYoutubeComExtractor = {\n  domain: 'www.youtube.com',\n\n  title: {\n    selectors: ['.watch-title', 'h1.watch-title-container'],\n  },\n\n  author: {\n    selectors: ['.yt-user-info'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: [['#player-api', '#eow-description']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#player-api': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        $node.html(`\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTheguardianComExtractor = {\n  domain: 'www.theguardian.com',\n\n  title: {\n    selectors: ['.content__headline'],\n  },\n\n  author: {\n    selectors: ['p.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.content__standfirst'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.content__article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.hide-on-mobile', '.inline-icon'],\n  },\n};\n","export const WwwSbnationComExtractor = {\n  domain: 'www.sbnation.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwBloombergComExtractor = {\n  domain: 'www.bloomberg.com',\n\n  title: {\n    selectors: [\n      // normal articles\n      '.lede-headline',\n\n      // /graphics/ template\n      'h1.article-title',\n\n      // /news/ template\n      'h1.lede-text-only__hed',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"parsely-author\"]', 'value'],\n      '.byline-details__link',\n\n      // /graphics/ template\n      '.bydek',\n\n      // /news/ template\n      '.author',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.published-at', 'datetime'],\n      ['time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.article-body__content',\n\n      // /graphics/ template\n      ['section.copy-block'],\n\n      // /news/ template\n      '.body-copy',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inline-newsletter', '.page-ad'],\n  },\n};\n","export const WwwBustleComExtractor = {\n  domain: 'www.bustle.com',\n\n  title: {\n    selectors: ['h1.post-page__title'],\n  },\n\n  author: {\n    selectors: ['div.content-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['time.content-meta__published-date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-page__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNprOrgExtractor = {\n  domain: 'www.npr.org',\n\n  title: {\n    selectors: ['h1', '.storytitle'],\n  },\n\n  author: {\n    selectors: ['p.byline__name.byline__name--block'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.dateblock time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"twitter:image:src\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['.storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.bucketwrap.image': 'figure',\n      '.bucketwrap.image .credit-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['div.enlarge_measure'],\n  },\n};\n","export const WwwRecodeNetExtractor = {\n  domain: 'www.recode.net',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const QzComExtractor = {\n  domain: 'qz.com',\n\n  title: {\n    selectors: ['article header h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n    ],\n  },\n\n  content: {\n    selectors: ['#article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwDmagazineComExtractor = {\n  domain: 'www.dmagazine.com',\n\n  title: {\n    selectors: ['h1.story__title'],\n  },\n\n  author: {\n    selectors: ['.story__info .story__info__item:first-child'],\n  },\n\n  date_published: {\n    selectors: [\n      // enter selectors\n      '.story__info',\n    ],\n\n    timezone: 'America/Chicago',\n    format: 'MMMM D, YYYY h:mm a',\n  },\n\n  dek: {\n    selectors: ['.story__subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['article figure a:first-child', 'href']],\n  },\n\n  content: {\n    selectors: ['.story__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwReutersComExtractor = {\n  domain: 'www.reuters.com',\n\n  title: {\n    selectors: ['h1.article-headline'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.article-subtitle': 'h4',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#article-byline .author'],\n  },\n};\n","export const MashableComExtractor = {\n  domain: 'mashable.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['span.author_name a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.article-content.blueprint'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.image-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwChicagotribuneComExtractor = {\n  domain: 'www.chicagotribune.com',\n\n  title: {\n    selectors: ['h1.trb_ar_hl_t'],\n  },\n\n  author: {\n    selectors: ['span.trb_ar_by_nm_au'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.trb_ar_page'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwVoxComExtractor = {\n  domain: 'www.vox.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure .e-image__image noscript': $node => {\n        const imgHtml = $node.html();\n        $node\n          .parents('.e-image__image')\n          .find('.c-dynamic-image')\n          .replaceWith(imgHtml);\n      },\n\n      'figure .e-image__meta': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const NewsNationalgeographicComExtractor = {\n  domain: 'news.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\n    timezone: 'EST',\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imgSrc = $node\n          .find('.image.parbase.section')\n          .find('.picturefill')\n          .first()\n          .data('platform-src');\n        if ($imgSrc) {\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--large'],\n  },\n};\n","export const WwwNationalgeographicComExtractor = {\n  domain: 'www.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imageParent = $node.children().first();\n        if ($imageParent.hasClass('imageGroup')) {\n          const $dataAttrContainer = $imageParent\n            .find('.media--medium__container')\n            .children()\n            .first();\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\n          if (imgPath2 && imgPath1) {\n            $node.prepend(\n              $(`<div class=\"__image-lead__\">\n                <img src=\"${imgPath1}\"/>\n                <img src=\"${imgPath2}\"/>\n              </div>`)\n            );\n          }\n        } else {\n          const $imgSrc = $node\n            .find('.image.parbase.section')\n            .find('.picturefill')\n            .first()\n            .data('platform-src');\n          if ($imgSrc) {\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--small'],\n  },\n};\n","export const WwwLatimesComExtractor = {\n  domain: 'www.latimes.com',\n\n  title: {\n    selectors: ['.trb_ar_hl'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.trb_ar_main'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.trb_ar_la': $node => {\n        const $figure = $node.find('figure');\n        $node.replaceWith($figure);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\n  },\n};\n","export const PagesixComExtractor = {\n  domain: 'pagesix.com',\n\n  supportedDomains: ['nypost.com'],\n\n  title: {\n    selectors: ['h1 a'],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['#featured-image-wrapper', '.entry-content'],\n      '.entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#featured-image-wrapper': 'figure',\n      '.wp-caption-text': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.modal-trigger'],\n  },\n};\n","export const ThefederalistpapersOrgExtractor = {\n  domain: 'thefederalistpapers.org',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['main span.entry-author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [['p[style]']],\n  },\n};\n","export const WwwCbssportsComExtractor = {\n  domain: 'www.cbssports.com',\n\n  title: {\n    selectors: ['.article-headline'],\n  },\n\n  author: {\n    selectors: ['.author-name'],\n  },\n\n  date_published: {\n    selectors: [['.date-original-reading-time time', 'datetime']],\n    timezone: 'UTC',\n  },\n\n  dek: {\n    selectors: ['.article-subline'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMsnbcComExtractor = {\n  domain: 'www.msnbc.com',\n\n  title: {\n    selectors: ['h1', 'h1.is-title-pane'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.pane-node-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.pane-node-body': ($node, $) => {\n        const [\n          selector,\n          attr,\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\n        const src = $(selector).attr(attr);\n        if (src) {\n          $node.prepend(`<img src=\"${src}\" />`);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepoliticalinsiderComExtractor = {\n  domain: 'www.thepoliticalinsider.com',\n\n  title: {\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: ['div#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMentalflossComExtractor = {\n  domain: 'www.mentalfloss.com',\n\n  title: {\n    selectors: ['h1.title', '.title-group', '.inner'],\n  },\n\n  author: {\n    selectors: ['.field-name-field-enhanced-authors'],\n  },\n\n  date_published: {\n    selectors: ['.date-display-single'],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.field.field-name-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const AbcnewsGoComExtractor = {\n  domain: 'abcnews.go.com',\n\n  title: {\n    selectors: ['.article-header h1'],\n  },\n\n  author: {\n    selectors: ['.authors'],\n    clean: ['.author-overlay', '.by-text'],\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNydailynewsComExtractor = {\n  domain: 'www.nydailynews.com',\n\n  title: {\n    selectors: ['h1#ra-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article#ra-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\n  },\n};\n","export const WwwCnbcComExtractor = {\n  domain: 'www.cnbc.com',\n\n  title: {\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div#article_body.content',\n      'div.story',\n      'div.ArticleBody-articleBody',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwPopsugarComExtractor = {\n  domain: 'www.popsugar.com',\n\n  title: {\n    selectors: ['h2.post-title', 'title-text'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\n  },\n};\n","export const ObserverComExtractor = {\n  domain: 'observer.com',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author', '.vcard'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PeopleComExtractor = {\n  domain: 'people.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.author.url.fn'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwUsmagazineComExtractor = {\n  domain: 'www.usmagazine.com',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: {\n    selectors: ['a.article-byline.tracked-offpage'],\n  },\n\n  date_published: {\n    timezone: 'America/New_York',\n\n    selectors: ['time.article-published-date'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body-inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const WwwRollingstoneComExtractor = {\n  domain: 'www.rollingstone.com',\n\n  title: {\n    selectors: ['h1.content-title'],\n  },\n\n  author: {\n    selectors: ['a.content-author.tracked-offpage'],\n  },\n\n  date_published: {\n    selectors: ['time.content-published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.content-description'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.lead-container', '.article-content'], '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const twofortysevensportsComExtractor = {\n  domain: '247sports.com',\n\n  title: {\n    selectors: ['title', 'article header h1'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['time[data-published]', 'data-published']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.body.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const UproxxComExtractor = {\n  domain: 'uproxx.com',\n\n  title: {\n    selectors: ['div.post-top h1'],\n  },\n\n  author: {\n    selectors: ['.post-top .authorname'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image': 'figure',\n      'div.image .wp-media-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwEonlineComExtractor = {\n  domain: 'www.eonline.com',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.entry-meta__author a'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-content section, .post-content div.post-content__image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.post-content__image': 'figure',\n      'div.post-content__image .image__credits': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMiamiheraldComExtractor = {\n  domain: 'www.miamiherald.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  date_published: {\n    selectors: ['p.published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.dateline-storybody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRefinery29ComExtractor = {\n  domain: 'www.refinery29.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['.contributor'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.full-width-opener', '.article-content'],\n      '.article-content',\n      '.body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.loading noscript': $node => {\n        const imgHtml = $node.html();\n        $node.parents('.loading').replaceWith(imgHtml);\n      },\n\n      '.section-image': 'figure',\n\n      '.section-image .content-caption': 'figcaption',\n\n      '.section-text': 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.story-share'],\n  },\n};\n","export const WwwMacrumorsComExtractor = {\n  domain: 'www.macrumors.com',\n\n  title: {\n    selectors: ['h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: ['.author-url'],\n  },\n\n  date_published: {\n    selectors: ['.article .byline'],\n\n    // Wednesday January 18, 2017 11:44 am PST\n    format: 'dddd MMMM D, YYYY h:mm A zz',\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAndroidcentralComExtractor = {\n  domain: 'www.androidcentral.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.meta-by'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['.image-large', 'src']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.intro', 'blockquote'],\n  },\n};\n","export const WwwSiComExtractor = {\n  domain: 'www.si.com',\n\n  title: {\n    selectors: ['h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.quick-hit ul'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['p', '.marquee_large_2x', '.component.image']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\n    ],\n  },\n};\n","export const WwwRawstoryComExtractor = {\n  domain: 'www.rawstory.com',\n\n  title: {\n    selectors: ['.blog-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author a:first-of-type'],\n  },\n\n  date_published: {\n    selectors: ['.blog-author a:last-of-type'],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.blog-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCnetComExtractor = {\n  domain: 'www.cnet.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.author'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: ['.article-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['img.__image-lead__', '.article-main-body'],\n      '.article-main-body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure.image': $node => {\n        const $img = $node.find('img');\n        $img.attr('width', '100%');\n        $img.attr('height', '100%');\n        $img.addClass('__image-lead__');\n        $node.remove('.imgContainer').prepend($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCinemablendComExtractor = {\n  domain: 'www.cinemablend.com',\n\n  title: {\n    selectors: ['.story_title'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div#wrap_left_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTodayComExtractor = {\n  domain: 'www.today.com',\n\n  title: {\n    selectors: ['h1.entry-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-container'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.label-comment'],\n  },\n};\n","export const WwwHowtogeekComExtractor = {\n  domain: 'www.howtogeek.com',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['#authorinfobox a'],\n  },\n\n  date_published: {\n    selectors: ['#authorinfobox + div li'],\n    timezone: 'GMT',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.thecontent'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAlComExtractor = {\n  domain: 'www.al.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepennyhoarderComExtractor = {\n  domain: 'www.thepennyhoarder.com',\n\n  title: {\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['link[rel=\"author\"]', 'title']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.post-img', '.post-text'], '.post-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwWesternjournalismComExtractor = {\n  domain: 'www.westernjournalism.com',\n\n  title: {\n    selectors: ['title', 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-sharing.top + div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.ad-notice-small'],\n  },\n};\n","export const FusionNetExtractor = {\n  domain: 'fusion.net',\n\n  title: {\n    selectors: ['.post-title', '.single-title', '.headline'],\n  },\n\n  author: {\n    selectors: ['.show-for-medium .byline'],\n  },\n\n  date_published: {\n    selectors: [['time.local-time', 'datetime']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-featured-media', '.article-content'],\n      '.article-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.fusion-youtube-oembed': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAmericanowComExtractor = {\n  domain: 'www.americanow.com',\n\n  title: {\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.article-content', '.image', '.body'], '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\n  },\n};\n","export const ScienceflyComExtractor = {\n  domain: 'sciencefly.com',\n\n  title: {\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\n  },\n\n  author: {\n    selectors: ['div.cb-author', 'div.cb-author-title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\n  },\n\n  content: {\n    selectors: ['div.theiaPostSlider_slides'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const HellogigglesComExtractor = {\n  domain: 'hellogiggles.com',\n\n  title: {\n    selectors: ['.title'],\n  },\n\n  author: {\n    selectors: ['.author-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ThoughtcatalogComExtractor = {\n  domain: 'thoughtcatalog.com',\n\n  title: {\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\n      'h1.writer-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.tc_mark'],\n  },\n};\n","export const WwwNjComExtractor = {\n  domain: 'www.nj.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwInquisitrComExtractor = {\n  domain: 'www.inquisitr.com',\n\n  title: {\n    selectors: ['h1.entry-title.story--header--title'],\n  },\n\n  author: {\n    selectors: ['div.story--header--author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.story', '.entry-content.'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.post-category',\n      '.story--header--socials',\n      '.story--header--content',\n    ],\n  },\n};\n","export const WwwNbcnewsComExtractor = {\n  domain: 'www.nbcnews.com',\n\n  title: {\n    selectors: ['div.article-hed h1'],\n  },\n\n  author: {\n    selectors: ['span.byline_author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\n      '.flag_article-wrapper time',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const FortuneComExtractor = {\n  domain: 'fortune.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.MblGHNMJ'],\n\n    timezone: 'UTC',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['picture', 'article.row'], 'article.row'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwLinkedinComExtractor = {\n  domain: 'www.linkedin.com',\n\n  title: {\n    selectors: ['.article-title', 'h1'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      '.entity-name a[rel=author]',\n    ],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['header figure', '.prose'], '.prose'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.entity-image'],\n  },\n};\n","export const ObamawhitehouseArchivesGovExtractor = {\n  domain: 'obamawhitehouse.archives.gov',\n\n  supportedDomains: ['whitehouse.gov'],\n\n  title: {\n    selectors: ['h1', '.pane-node-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author-link', '.node-person-name-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.field-name-field-forall-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\n  },\n};\n","export const WwwOpposingviewsComExtractor = {\n  domain: 'www.opposingviews.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['div.date span span a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.show-for-small-only'],\n  },\n};\n","export const WwwProspectmagazineCoUkExtractor = {\n  domain: 'www.prospectmagazine.co.uk',\n\n  title: {\n    selectors: ['.page-title'],\n  },\n\n  author: {\n    selectors: ['.aside_author .title'],\n  },\n\n  date_published: {\n    selectors: ['.post-info'],\n\n    timezone: 'Europe/London',\n  },\n\n  dek: {\n    selectors: ['.page-subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article .post_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ForwardComExtractor = {\n  domain: 'forward.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.author-name', ['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.post-item-media-wrap', '.post-item p']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.donate-box', '.message', '.subtitle'],\n  },\n};\n","export const WwwQdailyComExtractor = {\n  domain: 'www.qdaily.com',\n\n  title: {\n    selectors: ['h2', 'h2.title'],\n  },\n\n  author: {\n    selectors: ['.name'],\n  },\n\n  date_published: {\n    selectors: [['.date.smart-date', 'data-origindate']],\n  },\n\n  dek: {\n    selectors: ['.excerpt'],\n  },\n\n  lead_image_url: {\n    selectors: [['.article-detail-hd img', 'src']],\n  },\n\n  content: {\n    selectors: ['.detail'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\n  },\n};\n","export const GothamistComExtractor = {\n  domain: 'gothamist.com',\n\n  supportedDomains: [\n    'chicagoist.com',\n    'laist.com',\n    'sfist.com',\n    'shanghaiist.com',\n    'dcist.com',\n  ],\n\n  title: {\n    selectors: ['h1', '.entry-header h1'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: ['abbr', 'abbr.published'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [null],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image-none': 'figure',\n      '.image-none i': 'figcaption',\n      'div.image-left': 'figure',\n      '.image-left i': 'figcaption',\n      'div.image-right': 'figure',\n      '.image-right i': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.image-none br',\n      '.image-left br',\n      '.image-right br',\n      '.galleryEase',\n    ],\n  },\n};\n","export const WwwFoolComExtractor = {\n  domain: 'www.fool.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.author-inline .author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption img': $node => {\n        const src = $node.attr('src');\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\n      },\n      '.caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#pitch'],\n  },\n};\n","export const WwwSlateComExtractor = {\n  domain: 'www.slate.com',\n\n  title: {\n    selectors: ['.hed', 'h1'],\n  },\n\n  author: {\n    selectors: ['a[rel=author]'],\n  },\n\n  date_published: {\n    selectors: ['.pub-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.about-the-author',\n      '.pullquote',\n      '.newsletter-signup-component',\n      '.top-comment',\n    ],\n  },\n};\n","export const IciRadioCanadaCaExtractor = {\n  domain: 'ici.radio-canada.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\n    format: 'YYYY-MM-DD|HH[h]mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.bunker-component.lead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.main-multimedia-item', '.news-story-content']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwFortinetComExtractor = {\n  domain: 'www.fortinet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.b15-blog-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\n    ],\n\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n        return null;\n      },\n    },\n  },\n};\n","export const WwwFastcompanyComExtractor = {\n  domain: 'www.fastcompany.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.post__by'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.post__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post__article'],\n  },\n};\n","export const BlisterreviewComExtractor = {\n  domain: 'blisterreview.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span.author-name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.entry-date', 'datetime'],\n      ['meta[itemprop=\"datePublished\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[itemprop=\"image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n      ['img.attachment-large', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        '.elementor-section-wrap',\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      figcaption: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.comments-area'],\n  },\n};\n","export const NewsMynaviJpExtractor = {\n  domain: 'news.mynavi.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['main div.article-author a.article-author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main article div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      img: $node => {\n        const src = $node.attr('data-original');\n        if (src !== '') {\n          $node.attr('src', src);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ClinicaltrialsGovExtractor = {\n  domain: 'clinicaltrials.gov',\n\n  title: {\n    selectors: ['h1.tr-solo_record'],\n  },\n\n  author: {\n    selectors: ['div#sponsor.tr-info-text'],\n  },\n\n  date_published: {\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\n  },\n\n  content: {\n    selectors: ['div#tab-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.usa-alert> img'],\n  },\n};\n","export const GithubComExtractor = {\n  domain: 'github.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      // enter author selectors\n    ],\n  },\n\n  date_published: {\n    selectors: [['span[itemprop=\"dateModified\"] relative-time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['span[itemprop=\"about\"]'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['#readme article']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRedditComExtractor = {\n  domain: 'www.reddit.com',\n\n  title: {\n    selectors: ['div[data-test-id=\"post-content\"] h2'],\n  },\n\n  author: {\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['div[data-test-id=\"post-content\"] p'], // text post\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\n      ], // external link with media preview (YouTube, imgur album, etc...)\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])',\n      ], // external link\n      'div[data-test-id=\"post-content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[role=\"img\"]': $node => {\n        // External link image preview\n        const $img = $node.find('img');\n        const bgImg = $node.css('background-image');\n        if ($img.length === 1 && bgImg) {\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\n          return $img;\n        }\n        return $node;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.icon'],\n  },\n};\n","export const OtrsComExtractor = {\n  domain: 'otrs.com',\n\n  title: {\n    selectors: ['#main article h1'],\n  },\n\n  author: {\n    selectors: ['div.dateplusauthor a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main article'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'div.dateplusauthor',\n      'div.gr-12.push-6.footershare',\n      '#atftbx',\n      'div.category-modul',\n    ],\n  },\n};\n","export const WwwOssnewsJpExtractor = {\n  domain: 'www.ossnews.jp',\n\n  title: {\n    selectors: ['#alpha-block h1.hxnewstitle'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.fs12'],\n    format: 'YYYY年MM月DD日 HH:mm',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BuzzapJpExtractor = {\n  domain: 'buzzap.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ctiframe'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwAsahiComExtractor = {\n  domain: 'www.asahi.com',\n\n  title: {\n    selectors: ['.ArticleTitle h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#MainInner div.ArticleBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['div.AdMod', 'div.LoginSelectArea'],\n  },\n};\n","export const WwwSanwaCoJpExtractor = {\n  domain: 'www.sanwa.co.jp',\n\n  title: {\n    selectors: ['#newsContent h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.date'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#newsContent'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\n  },\n};\n","export const WwwElecomCoJpExtractor = {\n  domain: 'www.elecom.co.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.section-last'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['td.TableMain2'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      table: $node => {\n        $node.attr('width', 'auto');\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const ScanNetsecurityNeJpExtractor = {\n  domain: 'scan.netsecurity.ne.jp',\n\n  title: {\n    selectors: ['header.arti-header h1.head'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header.arti-header p.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.arti-content.arti-content--thumbnail'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['aside.arti-giga'],\n  },\n};\n","export const JvndbJvnJpExtractor = {\n  domain: 'jvndb.jvn.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['div.modifytxt:nth-child(2)'],\n    format: 'YYYY/MM/DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#news-list'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const GeniusComExtractor = {\n  domain: 'genius.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['h2 a'],\n  },\n\n  date_published: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.release_date;\n        },\n      ],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.album.cover_art_url;\n        },\n      ],\n    ],\n  },\n\n  content: {\n    selectors: ['.lyrics'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwJnsaOrgExtractor = {\n  domain: 'www.jnsa.org',\n\n  title: {\n    selectors: ['#wgtitle h2'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main_area'],\n\n    transforms: {},\n\n    clean: ['#pankuzu', '#side'],\n  },\n};\n","export const PhpspotOrgExtractor = {\n  domain: 'phpspot.org',\n\n  title: {\n    selectors: ['h3.hl'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['h4.hl'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.entrybody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwInfoqComExtractor = {\n  domain: 'www.infoq.com',\n\n  title: {\n    selectors: ['h1.heading'],\n  },\n\n  author: {\n    selectors: ['div.widget.article__authors'],\n  },\n\n  date_published: {\n    selectors: ['.article__readTime.date'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__data'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwMoongiftJpExtractor = {\n  domain: 'www.moongift.jp',\n\n  title: {\n    selectors: ['h1.title a'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['ul.meta li:not(.social):first-of-type'],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main'],\n\n    transforms: {},\n\n    clean: ['ul.mg_service.cf'],\n  },\n};\n","export const WwwItmediaCoJpExtractor = {\n  domain: 'www.itmedia.co.jp',\n\n  supportedDomains: [\n    'www.atmarkit.co.jp',\n    'techtarget.itmedia.co.jp',\n    'nlab.itmedia.co.jp',\n  ],\n\n  title: {\n    selectors: ['#cmsTitle h1'],\n  },\n\n  author: {\n    selectors: ['#byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['#cmsAbstract h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#cmsBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#snsSharebox'],\n  },\n};\n","export const WwwPublickey1JpExtractor = {\n  domain: 'www.publickey1.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['#subcol p:has(img)'],\n  },\n\n  date_published: {\n    selectors: ['div.pubdate'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincol'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\n  },\n};\n","export const TakagihiromitsuJpExtractor = {\n  domain: 'takagi-hiromitsu.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.body'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BookwalkerJpExtractor = {\n  domain: 'bookwalker.jp',\n\n  title: {\n    selectors: ['h1.main-heading'],\n  },\n\n  author: {\n    selectors: ['div.authors'],\n  },\n\n  date_published: {\n    selectors: [\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['div.main-info', 'div.main-cover-inner']],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'span.label.label--trial',\n      'dt.info-head.info-head--coin',\n      'dd.info-contents.info-contents--coin',\n      'div.info-notice.fn-toggleClass',\n    ],\n  },\n};\n","export const WwwYomiuriCoJpExtractor = {\n  domain: 'www.yomiuri.co.jp',\n\n  title: {\n    selectors: ['h1.title-article.c-article-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.p-main-contents'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const JapanCnetComExtractor = {\n  domain: 'japan.cnet.com',\n\n  title: {\n    selectors: ['.leaf-headline-ttl'],\n  },\n\n  author: {\n    selectors: ['.writer'],\n  },\n\n  date_published: {\n    selectors: ['.date'],\n    format: 'YYYY年MM月DD日 HH時mm分',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const DeadlineComExtractor = {\n  domain: 'deadline.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['section.author h3'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\n\n    transforms: {\n      '.embed-twitter': $node => {\n        const innerHtml = $node.html();\n        $node.replaceWith(innerHtml);\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const WwwGizmodoJpExtractor = {\n  domain: 'www.gizmodo.jp',\n\n  title: {\n    selectors: ['h1.p-post-title'],\n  },\n\n  author: {\n    selectors: ['li.p-post-AssistAuthor'],\n  },\n\n  date_published: {\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.p-post'],\n\n    transforms: {\n      'img.p-post-thumbnailImage': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\n  },\n};\n","export const GetnewsJpExtractor = {\n  domain: 'getnews.jp',\n\n  title: {\n    selectors: ['article h1'],\n  },\n\n  author: {\n    selectors: ['span.prof'],\n  },\n\n  date_published: {\n    selectors: [['ul.cattag-top time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.post-bodycopy'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwLifehackerJpExtractor = {\n  domain: 'www.lifehacker.jp',\n\n  title: {\n    selectors: ['h1.lh-summary-title'],\n  },\n\n  author: {\n    selectors: ['p.lh-entryDetailInner--credit'],\n  },\n\n  date_published: {\n    selectors: [['div.lh-entryDetail-header time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.lh-entryDetail-body'],\n\n    transforms: {\n      'img.lazyload': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['p.lh-entryDetailInner--credit'],\n  },\n};\n","export const SectIijAdJpExtractor = {\n  domain: 'sect.iij.ad.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: ['dl.entrydate dd'],\n  },\n\n  date_published: {\n    selectors: ['dl.entrydate dd'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article'],\n\n    transforms: {},\n\n    clean: ['dl.entrydate'],\n  },\n};\n","export const WwwOreillyCoJpExtractor = {\n  domain: 'www.oreilly.co.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: ['li[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.social-tools'],\n  },\n};\n","export const WwwIpaGoJpExtractor = {\n  domain: 'www.ipa.go.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.ipar_text_right'],\n    format: 'YYYY年M月D日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#ipar_main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['p.ipar_text_right'],\n  },\n};\n","export const WeeklyAsciiJpExtractor = {\n  domain: 'weekly.ascii.jp',\n\n  title: {\n    selectors: ['h1[itemprop=\"headline\"]'],\n  },\n\n  author: {\n    selectors: ['p.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"odate\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const TechlogIijAdJpExtractor = {\n  domain: 'techlog.iij.ad.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","import URL from 'url';\n\nexport const WiredJpExtractor = {\n  domain: 'wired.jp',\n\n  title: {\n    selectors: ['h1.post-title'],\n  },\n\n  author: {\n    selectors: ['p[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.post-intro'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.article-detail'],\n\n    transforms: {\n      'img[data-original]': $node => {\n        const dataOriginal = $node.attr('data-original');\n        const src = $node.attr('src');\n        const url = URL.resolve(src, dataOriginal);\n        $node.attr('src', url);\n      },\n    },\n\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\n  },\n};\n","export const JapanZdnetComExtractor = {\n  domain: 'japan.zdnet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwRbbtodayComExtractor = {\n  domain: 'www.rbbtoday.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.writer.writer-name'],\n  },\n\n  date_published: {\n    selectors: [['header time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.arti-content'],\n\n    transforms: {},\n\n    clean: ['.arti-giga'],\n  },\n};\n","export const WwwLemondeFrExtractor = {\n  domain: 'www.lemonde.fr',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__desc'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__content'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwPhoronixComExtractor = {\n  domain: 'www.phoronix.com',\n\n  title: {\n    selectors: ['article header'],\n  },\n\n  author: {\n    selectors: ['.author a:first-child'],\n  },\n\n  date_published: {\n    selectors: ['.author'],\n    // 1 June 2019 at 08:34 PM EDT\n    format: 'D MMMM YYYY at hh:mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PitchforkComExtractor = {\n  domain: 'pitchfork.com',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['.authors-detail__display-name'],\n  },\n\n  date_published: {\n    selectors: [['.pub-date', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.review-detail__abstract'],\n  },\n\n  lead_image_url: {\n    selectors: [['.single-album-tombstone__art img', 'src']],\n  },\n\n  content: {\n    selectors: ['.review-detail__text'],\n  },\n\n  extend: {\n    score: {\n      selectors: ['.score'],\n    },\n  },\n};\n","export const BiorxivOrgExtractor = {\n  domain: 'biorxiv.org',\n\n  title: {\n    selectors: ['h1#page-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\n    ],\n  },\n\n  content: {\n    selectors: ['div#abstract-1'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const EpaperZeitDeExtractor = {\n  domain: 'epaper.zeit.de',\n\n  title: {\n    selectors: ['p.title'],\n  },\n\n  author: {\n    selectors: ['.article__author'],\n  },\n\n  date_published: null,\n\n  excerpt: {\n    selectors: ['subtitle'],\n  },\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'p.title': 'h1',\n      '.article__author': 'p',\n      byline: 'p',\n      linkbox: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['image-credits', 'box[type=citation]'],\n  },\n};\n","export const WwwLadbibleComExtractor = {\n  domain: 'www.ladbible.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['[class*=Byline]'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n    timezone: 'Europe/London',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['[class*=ArticleContainer]'],\n    clean: [\n      'time',\n      'source',\n      'a[href^=\"https://www.ladbible.com/\"]',\n      'picture',\n      '[class*=StyledCardBlock]',\n    ],\n  },\n};\n","export const TimesofindiaIndiatimesComExtractor = {\n  domain: 'timesofindia.indiatimes.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  extend: {\n    reporter: {\n      selectors: ['div.byline'],\n      transforms: {},\n    },\n  },\n\n  date_published: {\n    selectors: ['.byline'],\n    format: 'MMM D, YYYY, HH:mm z',\n    timezone: 'Asia/Kolkata',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.contentwrapper:has(section)'],\n    defaultCleaner: false,\n\n    clean: ['section', 'h1', '.byline', '.img_cptn'],\n  },\n};\n","export const MaTtiasBeExtractor = {\n  domain: 'ma.ttias.be',\n\n  title: {\n    selectors: [['meta[name=\"twitter:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.content']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // h1 elements will be demoted to h2, so demote h2 elements to h3.\n        return 'h3';\n      },\n      h1: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // A subsequent h2 will be removed if there is not a paragraph before it, so\n        // add a paragraph here. It will be removed anyway because it is empty.\n        $node.after('<p></p>');\n      },\n      ul: $node => {\n        // Articles contain lists of links which look like, but are not, navigation\n        // elements. Adding this class attribute avoids them being incorrectly removed.\n        $node.attr('class', 'entry-content-asset');\n      },\n    },\n  },\n};\n","export const PastebinComExtractor = {\n  domain: 'pastebin.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.paste_box_line2 .t_us + a'],\n  },\n\n  date_published: {\n    selectors: ['.paste_box_line2 .t_da + span'],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#selectable .text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      ol: 'div',\n      li: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-expressions */\nexport const WwwAbendblattDeExtractor = {\n  domain: 'www.abendblatt.de',\n\n  title: {\n    selectors: ['h2.article__header__headline'],\n  },\n\n  author: {\n    selectors: ['span.author-info__name-text'],\n  },\n\n  date_published: {\n    selectors: [['time.article__header__date', 'datetime']],\n  },\n\n  dek: {\n    selectors: [\"span[itemprop='description']\"],\n  },\n\n  lead_image_url: {\n    selectors: [[\"meta[name='og:image']\", 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      p: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n      div: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwGrueneDeExtractor = {\n  domain: 'www.gruene.de',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[property=\"og:image\"]', 'content']],\n  },\n\n  content: {\n    // selectors: ['section'],\n    selectors: [['section header', 'section h2', 'section p', 'section ol']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption', 'p[class]'],\n  },\n};\n","export const WwwEngadgetComExtractor = {\n  domain: 'www.engadget.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.th-meta[data-ylk*=\"subsec:author\"]'],\n  },\n\n  // Engadget stories have publish dates, but the only representation of them on the page\n  // is in a format like \"2h ago\". There are also these tags with blank values:\n  // <meta class=\"swiftype\" name=\"published_at\" data-type=\"date\" value=\"\">\n  date_published: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  dek: {\n    selectors: ['div[class*=\"o-title_mark\"] div'],\n  },\n\n  // Engadget stories do have lead images specified by an og:image meta tag, but selecting\n  // the value attribute of that tag fails. I believe the \"&#x2111;\" sequence of characters\n  // is triggering this inability to select the attribute value.\n  lead_image_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        // Some figures will be inside div.article-text, but some header figures/images\n        // will not.\n        '#page_body figure:not(div.article-text figure)',\n        'div.article-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ArstechnicaComExtractor = {\n  domain: 'arstechnica.com',\n\n  // Articles from this site are often paginated, but I was unable to write a CSS\n  // selector to find the next page. On the last page, there will be a link with a CSS\n  // selector indicating that the previous page is next. But the parser appears to find\n  // the next page without this extractor finding it, as long as the fallback option is\n  // left at its default value of true.\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['*[rel=\"author\"] *[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['.byline time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['h2[itemprop=\"description\"]'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // Some pages have an element h2 that is significant, and that the parser will\n        // remove if not following a paragraph. Adding this empty paragraph fixes it, and\n        // the empty paragraph will be removed anyway.\n        $node.before('<p></p>');\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result.\n    clean: [\n      // Remove enlarge links and separators inside image captions.\n      'figcaption .enlarge-link',\n      'figcaption .sep',\n\n      // I could not transform the video into usable elements, so I\n      // removed them.\n      'figure.video',\n\n      // Image galleries that do not work.\n      '.gallery',\n\n      'aside',\n      '.sidebar',\n    ],\n  },\n};\n","export const WwwNdtvComExtractor = {\n  domain: 'www.ndtv.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=\"author\"] span[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['span[itemprop=\"dateModified\"]', 'content']],\n  },\n\n  dek: {\n    selectors: ['h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // This site puts a dateline in a 'b' above the first paragraph, and then somehow\n      // blends it into the first paragraph with CSS. This transform moves the dateline\n      // to the first paragraph.\n      '.place_cont': $node => {\n        if (!$node.parents('p').length) {\n          const nextSibling = $node.next('p');\n          if (nextSibling) {\n            $node.remove();\n            nextSibling.prepend($node);\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.highlghts_Wdgt',\n      '.ins_instory_dv_caption',\n      'input',\n      '._world-wrapper .mt20',\n    ],\n  },\n};\n","export const SpektrumExtractor = {\n  domain: 'www.spektrum.de',\n\n  title: {\n    selectors: ['.content__title'],\n  },\n\n  author: {\n    selectors: ['.content__author__info__name'],\n  },\n\n  date_published: {\n    selectors: ['.content__meta__date'],\n    timezone: 'Europe/Berlin',\n  },\n\n  dek: {\n    selectors: ['.content__intro'],\n  },\n\n  lead_image_url: {\n    selectors: [\n      // This is how the meta tag appears in the original source code.\n      ['meta[name=\"og:image\"]', 'value'],\n      // This is how the meta tag appears in the DOM in Chrome.\n      // The selector is included here to make the code work within the browser as well.\n      ['meta[property=\"og:image\"]', 'content'],\n      // This is the image that is shown on the page.\n      // It can be slightly cropped compared to the original in the meta tag.\n      '.image__article__top img',\n    ],\n  },\n\n  content: {\n    selectors: ['article.content'],\n    clean: [\n      '.breadcrumbs',\n      '.hide-for-print',\n      'aside',\n      'header h2',\n      '.image__article__top',\n      '.content__author',\n      '.copyright',\n      '.callout-box',\n    ],\n  },\n};\n","import mergeSupportedDomains from 'utils/merge-supported-domains';\nimport * as CustomExtractors from './custom/index';\n\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\n  const extractor = CustomExtractors[key];\n  return {\n    ...acc,\n    ...mergeSupportedDomains(extractor),\n  };\n}, {});\n","// CLEAN AUTHOR CONSTANTS\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n\n// CLEAN DEK CONSTANTS\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\nexport const DEK_META_TAGS = [];\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\nexport const DEK_SELECTORS = ['.entry-summary'];\n\n// CLEAN DATE PUBLISHED CONSTANTS\nexport const MS_DATE_STRING = /^\\d{13}$/i;\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\nconst timeUnits = [\n  'seconds?',\n  'minutes?',\n  'hours?',\n  'days?',\n  'weeks?',\n  'months?',\n  'years?',\n];\nconst allTimeUnits = timeUnits.join('|');\nexport const TIME_AGO_STRING = new RegExp(\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\n  'i'\n);\nconst months = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec',\n];\nconst allMonths = months.join('|');\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nconst timestamp3 = '-[0-9]{3,4}$';\nexport const SPLIT_DATE_STRING = new RegExp(\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\n  'ig'\n);\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n","import { normalizeSpaces } from 'utils/text';\nimport { CLEAN_AUTHOR_RE } from './constants';\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nexport default function cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n","import validUrl from 'valid-url';\n\nexport default function clean(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n","import { stripTags } from 'utils/dom';\nimport { excerptContent, normalizeSpaces } from 'utils/text';\n\nimport { TEXT_LINK_RE } from './constants';\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nexport default function cleanDek(dek, { $, excerpt }) {\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\n    return null;\n\n  const dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n","import moment from 'moment-timezone';\nimport parseFormat from 'moment-parseformat';\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nimport {\n  MS_DATE_STRING,\n  SEC_DATE_STRING,\n  CLEAN_DATE_STRING_RE,\n  SPLIT_DATE_STRING,\n  TIME_AGO_STRING,\n  TIME_NOW_STRING,\n  TIME_MERIDIAN_SPACE_RE,\n  TIME_MERIDIAN_DOTS_RE,\n  TIME_WITH_OFFSET_RE,\n} from './constants';\n\nexport function cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || [])\n    .join(' ')\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\n    .replace(CLEAN_DATE_STRING_RE, '$1')\n    .trim();\n}\n\nexport function createDate(dateString, timezone, format) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  if (TIME_AGO_STRING.test(dateString)) {\n    const fragments = TIME_AGO_STRING.exec(dateString);\n    return moment().subtract(fragments[1], fragments[2]);\n  }\n\n  if (TIME_NOW_STRING.test(dateString)) {\n    return moment();\n  }\n\n  return timezone\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\n    : moment(dateString, format || parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nexport default function cleanDatePublished(\n  dateString,\n  { timezone, format } = {}\n) {\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n\n  let date = createDate(dateString, timezone, format);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone, format);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n","import {\n  cleanAttributes,\n  cleanHeaders,\n  cleanHOnes,\n  cleanImages,\n  cleanTags,\n  removeEmpty,\n  rewriteTopLevel,\n  markToKeep,\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\n\n// Clean our article content, returning a new, cleaned node.\nexport default function extractCleanNode(\n  article,\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\n) {\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Make links absolute\n  makeLinksAbsolute(article, $, url);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes(article, $);\n\n  return article;\n}\n","import { stripTags } from 'utils/dom';\nimport { normalizeSpaces } from 'utils/text';\n\nimport { TITLE_SPLITTERS_RE } from './constants';\nimport { resolveSplitTitle } from './index';\n\nexport default function cleanTitle(title, { url, $ }) {\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    const h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n","import URL from 'url';\nimport wuzzy from 'wuzzy';\n\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    // Look to see if we can find a breadcrumb splitter that happens\n    // more than once. If we can, we'll be able to better pull out\n    // the title.\n    const termCounts = splitTitle.reduce((acc, titleText) => {\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n      return acc;\n    }, {});\n\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\n      (acc, key) => {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      },\n      [0, 0]\n    );\n\n    // We found a splitter that was used more than once, so it\n    // is probably the breadcrumber. Split our title on that instead.\n    // Note: max_term should be <= 4 characters, so that \" >> \"\n    // will match, but nothing longer than that.\n    if (termCount >= 2 && maxTerm.length <= 4) {\n      splitTitle = text.split(maxTerm);\n    }\n\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n    const longestEnd = splitEnds.reduce(\n      (acc, end) => (acc.length > end.length ? acc : end),\n      ''\n    );\n\n    if (longestEnd.length > 10) {\n      return longestEnd;\n    }\n\n    return text;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  const { host } = URL.parse(url);\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  const endSlug = splitTitle\n    .slice(-1)[0]\n    .toLowerCase()\n    .replace(' ', '');\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nexport default function resolveSplitTitle(title, url = '') {\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n","import cleanAuthor from './author';\nimport cleanImage from './lead-image-url';\nimport cleanDek from './dek';\nimport cleanDatePublished from './date-published';\nimport cleanContent from './content';\nimport cleanTitle from './title';\n\nconst Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: cleanImage,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: cleanContent,\n  title: cleanTitle,\n};\n\nexport default Cleaners;\n\nexport { cleanAuthor };\nexport { cleanImage };\nexport { cleanDek };\nexport { cleanDatePublished };\nexport { cleanContent };\nexport { cleanTitle };\nexport { default as resolveSplitTitle } from './resolve-split-title';\n","import { stripUnlikelyCandidates, convertToParagraphs } from 'utils/dom';\n\nimport { scoreContent, findTopCandidate } from './scoring';\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nexport default function extractBestNode($, opts) {\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs($);\n  $ = scoreContent($, opts.weightNodes);\n  const $topCandidate = findTopCandidate($);\n\n  return $topCandidate;\n}\n","import cheerio from 'cheerio';\n\nimport { nodeIsSufficient } from 'utils/dom';\nimport { cleanContent } from 'cleaners';\nimport { normalizeSpaces } from 'utils/text';\n\nimport extractBestNode from './extract-best-node';\n\nconst GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true,\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract({ $, html, title, url }, opts) {\n    opts = { ...this.defaultOpts, ...opts };\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    let node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\n      opts[key] = false;\n      $ = cheerio.load(html);\n\n      node = this.getContentNode($, title, url, opts);\n\n      if (nodeIsSufficient(node)) {\n        break;\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n  // Get node given current options\n  getContentNode($, title, url, opts) {\n    return cleanContent(extractBestNode($, opts), {\n      $,\n      cleanConditionally: opts.cleanConditionally,\n      title,\n      url,\n    });\n  },\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n  },\n};\n\nexport default GenericContentExtractor;\n","// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nexport const STRONG_TITLE_META_TAGS = [\n  'tweetmeme-title',\n  'dc.title',\n  'rbtitle',\n  'headline',\n  'title',\n];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const STRONG_TITLE_SELECTORS = [\n  '.hentry .entry-title',\n  'h1#articleHeader',\n  'h1.articleHeader',\n  'h1.article',\n  '.instapaper_title',\n  '#meebo-title',\n];\n\nexport const WEAK_TITLE_SELECTORS = [\n  'article h1',\n  '#entry-title',\n  '.entry-title',\n  '#entryTitle',\n  '#entrytitle',\n  '.entryTitle',\n  '.entrytitle',\n  '#articleTitle',\n  '.articleTitle',\n  'post post-title',\n  'h1.title',\n  'h2.article',\n  'h1',\n  'html head title',\n  'title',\n];\n","import { cleanTitle } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  STRONG_TITLE_META_TAGS,\n  WEAK_TITLE_META_TAGS,\n  STRONG_TITLE_SELECTORS,\n  WEAK_TITLE_SELECTORS,\n} from './constants';\n\nconst GenericTitleExtractor = {\n  extract({ $, url, metaCache }) {\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    let title;\n\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // If no matches, return an empty string\n    return '';\n  },\n};\n\nexport default GenericTitleExtractor;\n","// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nexport const AUTHOR_META_TAGS = [\n  'byl',\n  'clmst',\n  'dc.author',\n  'dcsext.author',\n  'dc.creator',\n  'rbauthors',\n  'authors',\n];\n\nexport const AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const AUTHOR_SELECTORS = [\n  '.entry .entry-author',\n  '.author.vcard .fn',\n  '.author .vcard .fn',\n  '.byline.vcard .fn',\n  '.byline .vcard .fn',\n  '.byline .by .author',\n  '.byline .by',\n  '.byline .author',\n  '.post-author.vcard',\n  '.post-author .vcard',\n  'a[rel=author]',\n  '#by_author',\n  '.by_author',\n  '#entryAuthor',\n  '.entryAuthor',\n  '.byline a[href*=author]',\n  '#author .authorname',\n  '.author .authorname',\n  '#author',\n  '.author',\n  '.articleauthor',\n  '.ArticleAuthor',\n  '.byline',\n];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nconst bylineRe = /^[\\n\\s]*By/i;\nexport const BYLINE_SELECTORS_RE = [\n  ['#byline', bylineRe],\n  ['.byline', bylineRe],\n];\n","import { cleanAuthor } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  AUTHOR_META_TAGS,\n  AUTHOR_MAX_LENGTH,\n  AUTHOR_SELECTORS,\n  BYLINE_SELECTORS_RE,\n} from './constants';\n\nconst GenericAuthorExtractor = {\n  extract({ $, metaCache }) {\n    let author;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\n      const node = $(selector);\n      if (node.length === 1) {\n        const text = node.text();\n        if (regex.test(text)) {\n          return cleanAuthor(text);\n        }\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericAuthorExtractor;\n","// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const DATE_PUBLISHED_META_TAGS = [\n  'article:published_time',\n  'displaydate',\n  'dc.date',\n  'dc.date.issued',\n  'rbpubdate',\n  'publish_date',\n  'pub_date',\n  'pagedate',\n  'pubdate',\n  'revision_date',\n  'doc_date',\n  'date_created',\n  'content_create_date',\n  'lastmodified',\n  'created',\n  'date',\n];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nexport const DATE_PUBLISHED_SELECTORS = [\n  '.hentry .dtstamp.published',\n  '.hentry .published',\n  '.hentry .dtstamp.updated',\n  '.hentry .updated',\n  '.single .published',\n  '.meta .published',\n  '.meta .postDate',\n  '.entry-date',\n  '.byline .date',\n  '.postmetadata .date',\n  '.article_datetime',\n  '.date-header',\n  '.story-date',\n  '.dateStamp',\n  '#story .datetime',\n  '.dateline',\n  '.pubdate',\n];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nexport const DATE_PUBLISHED_URL_RES = [\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\n];\n","import { cleanDatePublished } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\nimport { extractFromUrl } from 'utils/text';\n\nimport {\n  DATE_PUBLISHED_META_TAGS,\n  DATE_PUBLISHED_SELECTORS,\n  DATE_PUBLISHED_URL_RES,\n} from './constants';\n\nconst GenericDatePublishedExtractor = {\n  extract({ $, url, metaCache }) {\n    let datePublished;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta(\n      $,\n      DATE_PUBLISHED_META_TAGS,\n      metaCache,\n      false\n    );\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  },\n};\n\nexport default GenericDatePublishedExtractor;\n","// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nconst GenericDekExtractor = {\n  extract() {\n    return null;\n  },\n};\n\nexport default GenericDekExtractor;\n","// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const LEAD_IMAGE_URL_META_TAGS = [\n  'og:image',\n  'twitter:image',\n  'image_src',\n];\n\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\n  'upload',\n  'wp-content',\n  'large',\n  'photo',\n  'wp-image',\n];\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\n  'spacer',\n  'sprite',\n  'blank',\n  'throbber',\n  'gradient',\n  'tile',\n  'bg',\n  'background',\n  'icon',\n  'social',\n  'header',\n  'hdr',\n  'advert',\n  'spinner',\n  'loader',\n  'loading',\n  'default',\n  'rating',\n  'share',\n  'facebook',\n  'twitter',\n  'theme',\n  'promo',\n  'ads',\n  'wp-includes',\n];\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n","import {\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\n  GIF_RE,\n  JPG_RE,\n} from './constants';\n\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\n\nfunction getSig($node) {\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\n}\n\n// Scores image urls based on a variety of heuristics.\nexport function scoreImageUrl(url) {\n  url = url.trim();\n  let score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nexport function scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nexport function scoreByParents($img) {\n  let score = 0;\n  const $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  const $parent = $img.parent();\n  let $gParent;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach($node => {\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nexport function scoreBySibling($img) {\n  let score = 0;\n  const $sibling = $img.next();\n  const sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nexport function scoreByDimensions($img) {\n  let score = 0;\n\n  const width = parseFloat($img.attr('width'));\n  const height = parseFloat($img.attr('height'));\n  const src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    const area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nexport function scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n","import { extractFromMeta } from 'utils/dom';\nimport { cleanImage } from 'cleaners';\n\nimport {\n  LEAD_IMAGE_URL_META_TAGS,\n  LEAD_IMAGE_URL_SELECTORS,\n} from './constants';\n\nimport {\n  scoreImageUrl,\n  scoreAttr,\n  scoreByParents,\n  scoreBySibling,\n  scoreByDimensions,\n  scoreByPosition,\n} from './score-image';\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nconst GenericLeadImageUrlExtractor = {\n  extract({ $, content, metaCache, html }) {\n    let cleanUrl;\n    if (!$.browser && $('head').length === 0) {\n      $('*')\n        .first()\n        .prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    const imageUrl = extractFromMeta(\n      $,\n      LEAD_IMAGE_URL_META_TAGS,\n      metaCache,\n      false\n    );\n\n    if (imageUrl) {\n      cleanUrl = cleanImage(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    const $content = $(content);\n    const imgs = $('img', $content).toArray();\n    const imgScores = {};\n\n    imgs.forEach((img, index) => {\n      const $img = $(img);\n      const src = $img.attr('src');\n\n      if (!src) return;\n\n      let score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\n      [null, 0]\n    );\n\n    if (topScore > 0) {\n      cleanUrl = cleanImage(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\n      const $node = $(selector).first();\n      const src = $node.attr('src');\n      if (src) {\n        cleanUrl = cleanImage(src);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const href = $node.attr('href');\n      if (href) {\n        cleanUrl = cleanImage(href);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const value = $node.attr('value');\n      if (value) {\n        cleanUrl = cleanImage(value);\n        if (cleanUrl) return cleanUrl;\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericLeadImageUrlExtractor;\n","import difflib from 'difflib';\n\nexport default function scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    const similarity = new difflib.SequenceMatcher(\n      null,\n      articleUrl,\n      href\n    ).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    const diffPercent = 1.0 - similarity;\n    const diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n","import { IS_DIGIT_RE } from 'utils/text/constants';\n\nexport default function scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  let score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    const linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n","export default function scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n","export const DIGIT_RE = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nexport const NEXT_LINK_TEXT_RE = new RegExp(\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\n  'i'\n);\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { range } from 'utils';\nimport {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PAGE_RE,\n} from 'utils/dom/constants';\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nfunction makeSig($link) {\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\n}\n\nexport default function scoreByParents($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  let $parent = $link.parent();\n  let positiveMatch = false;\n  let negativeMatch = false;\n  let score = 0;\n\n  Array.from(range(0, 4)).forEach(() => {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    const parentData = makeSig($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (\n      !negativeMatch &&\n      NEGATIVE_SCORE_RE.test(parentData) &&\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\n    ) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n","import { PREV_LINK_TEXT_RE } from '../constants';\n\nexport default function scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function shouldScore(\n  href,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  linkText,\n  previousUrls\n) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(url => href === url) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  const { hostname } = parsedUrl;\n  const { hostname: linkHost } = URL.parse(href);\n\n  // Domain mismatch.\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  const fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n","export default function scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { getAttrs, isWordpress } from 'utils/dom';\nimport { removeAnchor, pageNumFromUrl } from 'utils/text';\n\nimport {\n  scoreSimilarity,\n  scoreLinkText,\n  scorePageInLink,\n  scoreExtraneousLinks,\n  scoreByParents,\n  scorePrevLink,\n  shouldScore,\n  scoreBaseUrl,\n  scoreCapLinks,\n  scoreNextLinkText,\n} from './utils';\n\nexport function makeBaseRegex(baseUrl) {\n  return new RegExp(`^${baseUrl}`, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\n    'id'\n  ) || ''}`;\n}\n\nexport default function scoreLinks({\n  links,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  $,\n  previousUrls = [],\n}) {\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  const baseRegex = makeBaseRegex(baseUrl);\n  const isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  const scoredPages = links.reduce((possiblePages, link) => {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    const attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    const href = removeAnchor(attrs.href);\n    const $link = $(link);\n    const linkText = $link.text();\n\n    if (\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\n    ) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText,\n        href,\n      };\n    } else {\n      possiblePages[href].linkText = `${\n        possiblePages[href].linkText\n      }|${linkText}`;\n    }\n\n    const possiblePage = possiblePages[href];\n    const linkData = makeSig($link, linkText);\n    const pageNum = pageNumFromUrl(href);\n\n    let score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n","import URL from 'url';\n\nimport { articleBaseUrl, removeAnchor } from 'utils/text';\nimport scoreLinks from './scoring/score-links';\n\n// Looks for and returns next page url\n// for multi-page articles\nconst GenericNextPageUrlExtractor = {\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    const articleUrl = removeAnchor(url);\n    const baseUrl = articleBaseUrl(url, parsedUrl);\n\n    const links = $('a[href]').toArray();\n\n    const scoredLinks = scoreLinks({\n      links,\n      articleUrl,\n      baseUrl,\n      parsedUrl,\n      $,\n      previousUrls,\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\n      (acc, link) => {\n        const scoredLink = scoredLinks[link];\n        return scoredLink.score > acc.score ? scoredLink : acc;\n      },\n      { score: -100 }\n    );\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  },\n};\n\nexport default GenericNextPageUrlExtractor;\n","export const CANONICAL_META_SELECTORS = ['og:url'];\n","import URL from 'url';\nimport { extractFromMeta } from 'utils/dom';\n\nimport { CANONICAL_META_SELECTORS } from './constants';\n\nfunction parseDomain(url) {\n  const parsedUrl = URL.parse(url);\n  const { hostname } = parsedUrl;\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url,\n    domain: parseDomain(url),\n  };\n}\n\nconst GenericUrlExtractor = {\n  extract({ $, url, metaCache }) {\n    const $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      const href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  },\n};\n\nexport default GenericUrlExtractor;\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n","import ellipsize from 'ellipsize';\n\nimport { extractFromMeta, stripTags } from 'utils/dom';\n\nimport { EXCERPT_META_SELECTORS } from './constants';\n\nexport function clean(content, $, maxLength = 200) {\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nconst GenericExcerptExtractor = {\n  extract({ $, content, metaCache }) {\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    const maxLength = 200;\n    const shortContent = content.slice(0, maxLength * 5);\n    return clean($(shortContent).text(), $, maxLength);\n  },\n};\n\nexport default GenericExcerptExtractor;\n","import cheerio from 'cheerio';\n\nimport { normalizeSpaces } from 'utils/text';\n\nconst GenericWordCountExtractor = {\n  extract({ content }) {\n    const $ = cheerio.load(content);\n    const $content = $('div').first();\n\n    const text = normalizeSpaces($content.text());\n    return text.split(/\\s/).length;\n  },\n};\n\nexport default GenericWordCountExtractor;\n","import cheerio from 'cheerio';\nimport stringDirection from 'string-direction';\n\nimport GenericContentExtractor from './content/extractor';\nimport GenericTitleExtractor from './title/extractor';\nimport GenericAuthorExtractor from './author/extractor';\nimport GenericDatePublishedExtractor from './date-published/extractor';\nimport GenericDekExtractor from './dek/extractor';\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\nimport GenericUrlExtractor from './url/extractor';\nimport GenericExcerptExtractor from './excerpt/extractor';\nimport GenericWordCountExtractor from './word-count/extractor';\n\nconst GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: ({ title }) => stringDirection.getDirection(title),\n\n  extract(options) {\n    const { html, $ } = options;\n\n    if (html && !$) {\n      const loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    const title = this.title(options);\n    const date_published = this.date_published(options);\n    const author = this.author(options);\n    const content = this.content({ ...options, title });\n    const lead_image_url = this.lead_image_url({ ...options, content });\n    const dek = this.dek({ ...options, content });\n    const next_page_url = this.next_page_url(options);\n    const excerpt = this.excerpt({ ...options, content });\n    const word_count = this.word_count({ ...options, content });\n    const direction = this.direction({ title });\n    const { url, domain } = this.url_and_domain(options);\n\n    return {\n      title,\n      author,\n      date_published: date_published || null,\n      dek,\n      lead_image_url,\n      content,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n    };\n  },\n};\n\nexport default GenericExtractor;\n","import { MediumExtractor, BloggerExtractor } from './custom';\n\nconst Detectors = {\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor,\n};\n\nexport default function detectByHtml($) {\n  const selector = Reflect.ownKeys(Detectors).find(s => $(s).length > 0);\n\n  return Detectors[selector];\n}\n","import URL from 'url';\n\nimport Extractors from './all';\nimport GenericExtractor from './generic';\nimport detectByHtml from './detect-by-html';\nimport { apiExtractors } from './add-extractor';\n\nexport default function getExtractor(url, parsedUrl, $) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  const { hostname } = parsedUrl;\n  const baseDomain = hostname\n    .split('.')\n    .slice(-2)\n    .join('.');\n\n  return (\n    apiExtractors[hostname] ||\n    apiExtractors[baseDomain] ||\n    Extractors[hostname] ||\n    Extractors[baseDomain] ||\n    detectByHtml($) ||\n    GenericExtractor\n  );\n}\n","import Cleaners from 'cleaners';\nimport { convertNodeTo, makeLinksAbsolute } from 'utils/dom';\nimport GenericExtractor from './generic';\n\n// Remove elements by an array of selectors\nexport function cleanBySelectors($content, $, { clean }) {\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nexport function transformElements($content, $, { transforms }) {\n  if (!transforms) return $content;\n\n  Reflect.ownKeys(transforms).forEach(key => {\n    const $matches = $(key, $content);\n    const value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each((index, node) => {\n        convertNodeTo($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each((index, node) => {\n        const result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\n  return selectors.find(selector => {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\n      }\n\n      const [s, attr] = selector;\n      return (\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\n        $(s).attr(attr) &&\n        $(s)\n          .attr(attr)\n          .trim() !== ''\n      );\n    }\n\n    return (\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\n      $(selector)\n        .text()\n        .trim() !== ''\n    );\n  });\n}\n\nexport function select(opts) {\n  const { $, type, extractionOpts, extractHtml = false } = opts;\n  // Skip if there's not extraction for this type\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\n\n  const matchingSelector = findMatchingSelector(\n    $,\n    selectors,\n    extractHtml,\n    allowMultiple\n  );\n\n  if (!matchingSelector) return null;\n\n  function transformAndClean($node) {\n    makeLinksAbsolute($node, $, opts.url || '');\n    cleanBySelectors($node, $, extractionOpts);\n    transformElements($node, $, extractionOpts);\n    return $node;\n  }\n\n  function selectHtml() {\n    // If the selector type requests html as its return type\n    // transform and clean the element with provided selectors\n    let $content;\n\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      $content = $(matchingSelector.join(','));\n      const $wrapper = $('<div></div>');\n      $content.each((_, element) => {\n        $wrapper.append(element);\n      });\n\n      $content = $wrapper;\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n    $content = transformAndClean($content);\n    if (Cleaners[type]) {\n      Cleaners[type]($content, { ...opts, defaultCleaner });\n    }\n\n    if (allowMultiple) {\n      return $content\n        .children()\n        .toArray()\n        .map(el => $.html($(el)));\n    }\n\n    return $.html($content);\n  }\n\n  if (extractHtml) {\n    return selectHtml(matchingSelector);\n  }\n\n  let $match;\n  let result;\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    const [selector, attr, transform] = matchingSelector;\n    $match = $(selector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) => {\n      const item = $(el)\n        .attr(attr)\n        .trim();\n      return transform ? transform(item) : item;\n    });\n  } else {\n    $match = $(matchingSelector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) =>\n      $(el)\n        .text()\n        .trim()\n    );\n  }\n\n  result =\n    Array.isArray(result.toArray()) && allowMultiple\n      ? result.toArray()\n      : result[0];\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner && Cleaners[type]) {\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\n  }\n\n  return result;\n}\n\nexport function selectExtendedTypes(extend, opts) {\n  const results = {};\n  Reflect.ownKeys(extend).forEach(t => {\n    if (!results[t]) {\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\n    }\n  });\n  return results;\n}\n\nfunction extractResult(opts) {\n  const { type, extractor, fallback = true } = opts;\n\n  const result = select({ ...opts, extractionOpts: extractor[type] });\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nconst RootExtractor = {\n  extract(extractor = GenericExtractor, opts) {\n    const { contentOnly, extractedTitle } = opts;\n    // This is the generic extractor. Run its extract method\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = {\n      ...opts,\n      extractor,\n    };\n\n    if (contentOnly) {\n      const content = extractResult({\n        ...opts,\n        type: 'content',\n        extractHtml: true,\n        title: extractedTitle,\n      });\n      return {\n        content,\n      };\n    }\n    const title = extractResult({ ...opts, type: 'title' });\n    const date_published = extractResult({ ...opts, type: 'date_published' });\n    const author = extractResult({ ...opts, type: 'author' });\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\n    const content = extractResult({\n      ...opts,\n      type: 'content',\n      extractHtml: true,\n      title,\n    });\n    const lead_image_url = extractResult({\n      ...opts,\n      type: 'lead_image_url',\n      content,\n    });\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\n    const direction = extractResult({ ...opts, type: 'direction', title });\n    const { url, domain } = extractResult({\n      ...opts,\n      type: 'url_and_domain',\n    }) || { url: null, domain: null };\n\n    let extendedResults = {};\n    if (extractor.extend) {\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\n    }\n\n    return {\n      title,\n      content,\n      author,\n      date_published,\n      lead_image_url,\n      dek,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n      ...extendedResults,\n    };\n  },\n};\n\nexport default RootExtractor;\n","import { removeAnchor } from 'utils/text';\nimport RootExtractor from 'extractors/root-extractor';\nimport GenericExtractor from 'extractors/generic';\nimport Resource from 'resource';\n\nexport default async function collectAllPages({\n  next_page_url,\n  html,\n  $,\n  metaCache,\n  result,\n  Extractor,\n  title,\n  url,\n}) {\n  // At this point, we've fetched just the first page\n  let pages = 1;\n  const previousUrls = [removeAnchor(url)];\n\n  // If we've gone over 26 pages, something has\n  // likely gone wrong.\n  while (next_page_url && pages < 26) {\n    pages += 1;\n    // eslint-disable-next-line no-await-in-loop\n    $ = await Resource.create(next_page_url);\n    html = $.html();\n\n    const extractorOpts = {\n      url: next_page_url,\n      html,\n      $,\n      metaCache,\n      extractedTitle: title,\n      previousUrls,\n    };\n\n    const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n    previousUrls.push(next_page_url);\n    result = {\n      ...result,\n      content: `${result.content}<hr><h4>Page ${pages}</h4>${\n        nextPageResult.content\n      }`,\n    };\n\n    // eslint-disable-next-line prefer-destructuring\n    next_page_url = nextPageResult.next_page_url;\n  }\n\n  const word_count = GenericExtractor.word_count({\n    content: `<div>${result.content}</div>`,\n  });\n  return {\n    ...result,\n    total_pages: pages,\n    pages_rendered: pages,\n    word_count,\n  };\n}\n","import URL from 'url';\nimport cheerio from 'cheerio';\nimport TurndownService from 'turndown';\n\nimport Resource from 'resource';\nimport { validateUrl } from 'utils';\nimport addCustomExtractor from 'extractors/add-extractor';\nimport getExtractor from 'extractors/get-extractor';\nimport RootExtractor, { selectExtendedTypes } from 'extractors/root-extractor';\nimport collectAllPages from 'extractors/collect-all-pages';\n\nconst Mercury = {\n  async parse(url, { html, ...opts } = {}) {\n    const {\n      fetchAllPages = true,\n      fallback = true,\n      contentType = 'html',\n      headers = {},\n      extend,\n      customExtractor,\n    } = opts;\n\n    // if no url was passed and this is the browser version,\n    // set url to window.location.href and load the html\n    // from the current page\n    if (!url && cheerio.browser) {\n      url = window.location.href; // eslint-disable-line no-undef\n      html = html || cheerio.html();\n    }\n\n    const parsedUrl = URL.parse(url);\n\n    if (!validateUrl(parsedUrl)) {\n      return {\n        error: true,\n        message:\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\n      };\n    }\n\n    const $ = await Resource.create(url, html, parsedUrl, headers);\n\n    // If we found an error creating the resource, return that error\n    if ($.failed) {\n      return $;\n    }\n\n    // Add custom extractor via cli.\n    if (customExtractor) {\n      addCustomExtractor(customExtractor);\n    }\n\n    const Extractor = getExtractor(url, parsedUrl, $);\n    // console.log(`Using extractor for ${Extractor.domain}`);\n\n    // if html still has not been set (i.e., url passed to Mercury.parse),\n    // set html from the response of Resource.create\n    if (!html) {\n      html = $.html();\n    }\n\n    // Cached value of every meta name in our document.\n    // Used when extracting title/author/date_published/dek\n    const metaCache = $('meta')\n      .map((_, node) => $(node).attr('name'))\n      .toArray();\n\n    let extendedTypes = {};\n    if (extend) {\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\n    }\n\n    let result = RootExtractor.extract(Extractor, {\n      url,\n      html,\n      $,\n      metaCache,\n      parsedUrl,\n      fallback,\n      contentType,\n    });\n\n    const { title, next_page_url } = result;\n\n    // Fetch more pages if next_page_url found\n    if (fetchAllPages && next_page_url) {\n      result = await collectAllPages({\n        Extractor,\n        next_page_url,\n        html,\n        $,\n        metaCache,\n        result,\n        title,\n        url,\n      });\n    } else {\n      result = {\n        ...result,\n        total_pages: 1,\n        rendered_pages: 1,\n      };\n    }\n\n    if (contentType === 'markdown') {\n      const turndownService = new TurndownService();\n      result.content = turndownService.turndown(result.content);\n    } else if (contentType === 'text') {\n      result.content = $.text($(result.content));\n    }\n\n    return { ...result, ...extendedTypes };\n  },\n\n  browser: !!cheerio.browser,\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource(url) {\n    return Resource.create(url);\n  },\n\n  addExtractor(extractor) {\n    return addCustomExtractor(extractor);\n  },\n};\n\nexport default Mercury;\n"],"names":["NORMALIZE_RE","normalizeSpaces","text","_trimInstanceProperty","replace","extractFromUrl","url","regexList","matchRe","_findInstanceProperty","re","test","exec","PAGE_IN_HREF_RE","RegExp","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","DEFAULT_ENCODING","pageNumFromUrl","matches","match","pageNum","_parseInt","removeAnchor","split","isGoodSegment","segment","index","firstSegmentHasLetters","goodSegment","length","toLowerCase","articleBaseUrl","parsed","parsedUrl","URL","parse","protocol","host","path","cleanedSegments","_reduceInstanceProperty","acc","rawSegment","_includesInstanceProperty","possibleSegment","fileExt","push","_reverseInstanceProperty","join","SENTENCE_END_RE","hasSentenceEnd","excerptContent","content","words","_sliceInstanceProperty","getEncoding","str","encoding","iconv","encodingExists","REQUEST_HEADERS","cheerio","browser","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","get","options","resolve","reject","request","err","response","body","validateResponse","parseNon200","statusMessage","statusCode","Error","error","headers","contentType","contentLength","fetchResource","encodeURI","href","timeout","jar","gzip","followAllRedirects","window","followRedirect","message","convertMetaProp","$","from","to","each","_","node","$node","value","attr","removeAttr","normalizeMetaTags","SPACER_RE","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","REMOVE_ATTRS","REMOVE_ATTR_SELECTORS","_mapInstanceProperty","selector","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","REMOVE_EMPTY_TAGS","REMOVE_EMPTY_SELECTORS","tag","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","IS_WP_SELECTOR","PAGE_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","UNLIKELY_RE","stripUnlikelyCandidates","not","classes","id","classAndId","remove","brsToPs","collapsing","element","$element","nextElement","next","tagName","paragraphize","br","sibling","nextSibling","p","appendTo","replaceWith","convertDivs","div","$div","convertible","children","convertNodeTo","convertSpans","span","$span","parents","convertToParagraphs","attrs","getAttrs","attribString","key","html","contents","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","article","tags","hostname","addClass","stripJunkTags","cleanHOnes","$hOnes","removeAllButWhitelist","setAttrs","removeClass","cleanAttributes","parent","removeEmpty","$p","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","READABILITY_ASSET","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","getWeight","score","getScore","_parseFloat","scoreCommas","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","setScore","addScore","amount","getOrInitScore","e","addToParent","weightNodes","scoreNode","addScoreTo","scorePs","$parent","rawScore","scoreContent","parentSelector","childSelector","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","findTopCandidate","removeUnlessContent","weight","hasClass","pCount","inputCount","imgCount","nodeIsList","previousNode","prev","scriptCount","cleanTags","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel","absolutize","rootUrl","baseUrl","absoluteUrl","setAttr","absolutizeSet","$content","urlSet","srcset","candidates","absoluteCandidates","candidate","parts","absoluteUrlSet","_toConsumableArray","makeLinksAbsolute","totalTextLength","linkText","linkLength","extractFromMeta","metaNames","cachedNames","foundNames","_filterInstanceProperty","name","_indexOfInstanceProperty","type","nodes","values","toArray","metaValue","stripTags","isGoodNode","maxChildren","withinComment","extractFromSelectors","selectors","textOnly","cleanText","commentParent","nodeClass","undefined","nodeIsSufficient","isWordpress","attribs","attributes","val","setAttribute","removeAttribute","IS_LINK","IMAGE_RE","IS_IMAGE","IS_SRCSET","TAGS_TO_REMOVE","convertLazyLoadedImages","isComment","cleanComments","root","clean","Resource","create","preparedResponse","validResponse","result","alreadyDecoded","failed","generateDoc","encodeDoc","load","decodedContent","decode","contentTypeSelector","metaContentType","properEncoding","range","start","end","validateUrl","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","apiExtractors","addExtractor","BloggerExtractor","transforms","noscript","author","date_published","NYMagExtractor","h1","$children","dek","WikipediaExtractor","defaultCleaner","prepend","TwitterExtractor","tweets","$tweetContainer","s","NYTimesExtractor","src","lead_image_url","next_page_url","excerpt","TheAtlanticExtractor","NewYorkerExtractor","timezone","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","h2","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","data","JSON","sources","MediumExtractor","iframe","ytRe","thumb","decodeURIComponent","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","$text","WwwAolComExtractor","WwwYoutubeComExtractor","videoId","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","format","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","imgHtml","NewsNationalgeographicComExtractor","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","WwwCinemablendComExtractor","WwwTodayComExtractor","WwwHowtogeekComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","FusionNetExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwNjComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","WwwProspectmagazineCoUkExtractor","ForwardComExtractor","WwwQdailyComExtractor","GothamistComExtractor","WwwFoolComExtractor","WwwSlateComExtractor","IciRadioCanadaCaExtractor","WwwFortinetComExtractor","WwwFastcompanyComExtractor","BlisterreviewComExtractor","figcaption","NewsMynaviJpExtractor","ClinicaltrialsGovExtractor","GithubComExtractor","WwwRedditComExtractor","bgImg","css","OtrsComExtractor","WwwOssnewsJpExtractor","BuzzapJpExtractor","WwwAsahiComExtractor","WwwSanwaCoJpExtractor","WwwElecomCoJpExtractor","table","ScanNetsecurityNeJpExtractor","JvndbJvnJpExtractor","GeniusComExtractor","res","json","song","release_date","album","cover_art_url","WwwJnsaOrgExtractor","PhpspotOrgExtractor","WwwInfoqComExtractor","WwwMoongiftJpExtractor","WwwItmediaCoJpExtractor","WwwPublickey1JpExtractor","TakagihiromitsuJpExtractor","BookwalkerJpExtractor","WwwYomiuriCoJpExtractor","JapanCnetComExtractor","DeadlineComExtractor","innerHtml","WwwGizmodoJpExtractor","GetnewsJpExtractor","WwwLifehackerJpExtractor","SectIijAdJpExtractor","WwwOreillyCoJpExtractor","WwwIpaGoJpExtractor","WeeklyAsciiJpExtractor","TechlogIijAdJpExtractor","WiredJpExtractor","dataOriginal","JapanZdnetComExtractor","WwwRbbtodayComExtractor","WwwLemondeFrExtractor","WwwPhoronixComExtractor","PitchforkComExtractor","extend","BiorxivOrgExtractor","EpaperZeitDeExtractor","byline","linkbox","WwwLadbibleComExtractor","TimesofindiaIndiatimesComExtractor","reporter","MaTtiasBeExtractor","after","ul","PastebinComExtractor","ol","li","WwwAbendblattDeExtractor","o","n","i","r","charCodeAt","String","fromCharCode","WwwGrueneDeExtractor","WwwEngadgetComExtractor","ArstechnicaComExtractor","before","WwwNdtvComExtractor","SpektrumExtractor","CustomExtractors","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","TIME_NOW_STRING","timeUnits","allTimeUnits","TIME_AGO_STRING","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","leadImageUrl","validUrl","isWebUri","cleanDek","dekText","cleanDateString","dateString","createDate","moment","Date","fragments","subtract","tz","parseFormat","cleanDatePublished","toISOString","date","isValid","extractCleanNode","cleanConditionally","cleanTitle","resolveSplitTitle","extractBreadcrumbTitle","splitTitle","termCounts","titleText","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","wuzzy","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","cleanImage","cleanContent","extractBestNode","opts","$topCandidate","GenericContentExtractor","defaultOpts","extract","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","difflib","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","NEXT_LINK_TEXT_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","scoreExtraneousLinks","makeSig","$link","positiveMatch","negativeMatch","parentData","scorePrevLink","linkData","shouldScore","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","scoreLinks","links","scoredPages","possiblePages","link","possiblePage","_Reflect$ownKeys","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","maxLength","ellipsize","ellipse","GenericExcerptExtractor","shortContent","GenericWordCountExtractor","GenericExtractor","_bindInstanceProperty","url_and_domain","word_count","direction","stringDirection","getDirection","loaded","Detectors","detectByHtml","getExtractor","baseDomain","Extractors","cleanBySelectors","transformElements","$matches","findMatchingSelector","extractHtml","allowMultiple","_Array$isArray","select","extractionOpts","matchingSelector","transformAndClean","selectHtml","$wrapper","wrap","el","$match","transform","item","selectExtendedTypes","results","t","extractResult","fallback","RootExtractor","contentOnly","extractedTitle","extendedResults","collectAllPages","Extractor","pages","extractorOpts","nextPageResult","total_pages","pages_rendered","Mercury","fetchAllPages","customExtractor","location","addCustomExtractor","extendedTypes","rendered_pages","turndownService","TurndownService","turndown"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG,0CAArB;AAEe,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAAA;;AAC5C,SAAOC,qDAAAD,IAAI,CAACE,OAAL,CAAaJ,YAAb,EAA2B,GAA3B,iBAAP;AACD;;ACJD;AACA;AACA;AACA;AACA;AACe,SAASK,cAAT,CAAwBC,GAAxB,EAA6BC,SAA7B,EAAwC;AACrD,MAAMC,OAAO,GAAGC,0CAAAF,SAAS,MAAT,CAAAA,SAAS,EAAM,UAAAG,EAAE;AAAA,WAAIA,EAAE,CAACC,IAAH,CAAQL,GAAR,CAAJ;AAAA,GAAR,CAAzB;;AACA,MAAIE,OAAJ,EAAa;AACX,WAAOA,OAAO,CAACI,IAAR,CAAaN,GAAb,EAAkB,CAAlB,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;ACZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMO,eAAe,GAAG,IAAIC,MAAJ,CAC7B,0EAD6B,EAE7B,GAF6B,CAAxB;AAKA,IAAMC,YAAY,GAAG,QAArB;AAEA,IAAMC,WAAW,GAAG,WAApB;AACA,IAAMC,WAAW,GAAG,WAApB;AAEA,IAAMC,WAAW,GAAG,oBAApB;AACA,IAAMC,gBAAgB,GAAG,OAAzB;;ACzBQ,SAASC,cAAT,CAAwBd,GAAxB,EAA6B;AAC1C,MAAMe,OAAO,GAAGf,GAAG,CAACgB,KAAJ,CAAUT,eAAV,CAAhB;AACA,MAAI,CAACQ,OAAL,EAAc,OAAO,IAAP;;AAEd,MAAME,OAAO,GAAGC,8BAASH,OAAO,CAAC,CAAD,CAAhB,EAAqB,EAArB,CAAhB,CAJ0C;AAO1C;;;AACA,SAAOE,OAAO,GAAG,GAAV,GAAgBA,OAAhB,GAA0B,IAAjC;AACD;;ACXc,SAASE,YAAT,CAAsBnB,GAAtB,EAA2B;AACxC,SAAOA,GAAG,CAACoB,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBtB,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAP;AACD;;ACOD,SAASuB,aAAT,CAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,sBAAvC,EAA+D;AAC7D,MAAIC,WAAW,GAAG,IAAlB,CAD6D;AAI7D;;AACA,MAAIF,KAAK,GAAG,CAAR,IAAaZ,WAAW,CAACN,IAAZ,CAAiBiB,OAAjB,CAAb,IAA0CA,OAAO,CAACI,MAAR,GAAiB,CAA/D,EAAkE;AAChED,IAAAA,WAAW,GAAG,IAAd;AACD,GAP4D;AAU7D;;;AACA,MAAIF,KAAK,KAAK,CAAV,IAAeD,OAAO,CAACK,WAAR,OAA0B,OAA7C,EAAsD;AACpDF,IAAAA,WAAW,GAAG,KAAd;AACD,GAb4D;AAgB7D;;;AACA,MAAIF,KAAK,GAAG,CAAR,IAAaD,OAAO,CAACI,MAAR,GAAiB,CAA9B,IAAmC,CAACF,sBAAxC,EAAgE;AAC9DC,IAAAA,WAAW,GAAG,KAAd;AACD;;AAED,SAAOA,WAAP;AACD;AAGD;AACA;;;AACe,SAASG,cAAT,CAAwB5B,GAAxB,EAA6B6B,MAA7B,EAAqC;AAAA;;AAClD,MAAMC,SAAS,GAAGD,MAAM,IAAIE,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAA5B;AADkD,MAE1CiC,QAF0C,GAEjBH,SAFiB,CAE1CG,QAF0C;AAAA,MAEhCC,IAFgC,GAEjBJ,SAFiB,CAEhCI,IAFgC;AAAA,MAE1BC,IAF0B,GAEjBL,SAFiB,CAE1BK,IAF0B;AAIlD,MAAIX,sBAAsB,GAAG,KAA7B;;AACA,MAAMY,eAAe,GAAGC,gHAAAF,IAAI,CACzBf,KADqB,CACf,GADe,mCAGd,UAACkB,GAAD,EAAMC,UAAN,EAAkBhB,KAAlB,EAA4B;AAClC,QAAID,OAAO,GAAGiB,UAAd,CADkC;;AAIlC,QAAIC,8CAAAlB,OAAO,MAAP,CAAAA,OAAO,EAAU,GAAV,CAAX,EAA2B;AAAA,2BACUA,OAAO,CAACF,KAAR,CAAc,GAAd,CADV;AAAA;AAAA,UAClBqB,eADkB;AAAA,UACDC,OADC;;AAEzB,UAAIhC,WAAW,CAACL,IAAZ,CAAiBqC,OAAjB,CAAJ,EAA+B;AAC7BpB,QAAAA,OAAO,GAAGmB,eAAV;AACD;AACF,KATiC;AAYlC;;;AACA,QAAIlC,eAAe,CAACF,IAAhB,CAAqBiB,OAArB,KAAiCC,KAAK,GAAG,CAA7C,EAAgD;AAC9CD,MAAAA,OAAO,GAAGA,OAAO,CAACxB,OAAR,CAAgBS,eAAhB,EAAiC,EAAjC,CAAV;AACD,KAfiC;AAkBlC;AACA;AACA;;;AACA,QAAIgB,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,sBAAsB,GAAGf,YAAY,CAACJ,IAAb,CAAkBiB,OAAlB,CAAzB;AACD,KAvBiC;;;AA0BlC,QAAID,aAAa,CAACC,OAAD,EAAUC,KAAV,EAAiBC,sBAAjB,CAAjB,EAA2D;AACzDc,MAAAA,GAAG,CAACK,IAAJ,CAASrB,OAAT;AACD;;AAED,WAAOgB,GAAP;AACD,GAlCqB,EAkCnB,EAlCmB,CAAxB;;AAoCA,mIAAUL,QAAV,yBAAuBC,IAAvB,mBAA8BU,6CAAAR,eAAe,MAAf,CAAAA,eAAe,EAAWS,IAA1B,CAA+B,GAA/B,CAA9B;AACD;;AC9ED;AACA;AACA,IAAMC,eAAe,GAAG,IAAItC,MAAJ,CAAW,QAAX,CAAxB;AACe,SAASuC,cAAT,CAAwBnD,IAAxB,EAA8B;AAC3C,SAAOkD,eAAe,CAACzC,IAAhB,CAAqBT,IAArB,CAAP;AACD;;ACLc,SAASoD,cAAT,CAAwBC,OAAxB,EAA6C;AAAA;;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AAC1D,SAAOC,gGAAAF,OAAO,MAAP,CAAAA,OAAO,EAEX7B,KAFI,CAEE,KAFF,kBAGE,CAHF,EAGK8B,KAHL,EAIJL,IAJI,CAIC,GAJD,CAAP;AAKD;;ACFD;AACA;;AACe,SAASO,WAAT,CAAqBC,GAArB,EAA0B;AACvC,MAAIC,QAAQ,GAAGzC,gBAAf;AACA,MAAME,OAAO,GAAGH,WAAW,CAACN,IAAZ,CAAiB+C,GAAjB,CAAhB;;AACA,MAAItC,OAAO,KAAK,IAAhB,EAAsB;AAAA,sDACVA,OADU;;AACjBsC,IAAAA,GADiB;AAErB;;AACD,MAAIE,yBAAK,CAACC,cAAN,CAAqBH,GAArB,CAAJ,EAA+B;AAC7BC,IAAAA,QAAQ,GAAGD,GAAX;AACD;;AACD,SAAOC,QAAP;AACD;;ACbM,IAAMG,eAAe,GAAGC,2BAAO,CAACC,OAAR,GAC3B,EAD2B,GAE3B;AACE,gBACE;AAFJ,CAFG;;AAQA,IAAMC,aAAa,GAAG,KAAtB;;AAGP,IAAMC,iBAAiB,GAAG,CACxB,YADwB,EAExB,WAFwB,EAGxB,YAHwB,EAIxB,WAJwB,CAA1B;AAOO,IAAMC,oBAAoB,GAAG,IAAItD,MAAJ,aAC7BqD,iBAAiB,CAAChB,IAAlB,CAAuB,GAAvB,CAD6B,SAElC,GAFkC,CAA7B;AAMP;;AACO,IAAMkB,kBAAkB,GAAG,OAA3B;;;;;;AClBP,SAASC,GAAT,CAAaC,OAAb,EAAsB;AACpB,SAAO,iCAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,2BAAO,CAACH,OAAD,EAAU,UAACI,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACxC,UAAIF,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAAC;AAAEK,UAAAA,IAAI,EAAJA,IAAF;AAAQD,UAAAA,QAAQ,EAARA;AAAR,SAAD,CAAP;AACD;AACF,KANM,CAAP;AAOD,GARM,CAAP;AASD;AAGD;AACA;AACA;;;AAEO,SAASE,gBAAT,CAA0BF,QAA1B,EAAyD;AAAA,MAArBG,WAAqB,uEAAP,KAAO;;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,MACGH,QAAQ,CAACI,aAAT,IAA0BJ,QAAQ,CAACI,aAAT,KAA2B,IAAtD,IACAJ,QAAQ,CAACK,UAAT,KAAwB,GAF1B,EAGE;AACA,QAAI,CAACL,QAAQ,CAACK,UAAd,EAA0B;AACxB,YAAM,IAAIC,KAAJ,2DAC+CN,QAAQ,CAACO,KADxD,EAAN;AAGD,KAJD,MAIO,IAAI,CAACJ,WAAL,EAAkB;AACvB,YAAM,IAAIG,KAAJ,uDAEFN,QAAQ,CAACK,UAFP,kEAAN;AAKD;AACF;;AAtB6D,0BA2B1DL,QAAQ,CAACQ,OA3BiD;AAAA,MAyB5CC,WAzB4C,qBAyB5D,cAzB4D;AAAA,MA0B1CC,aA1B0C,qBA0B5D,gBA1B4D;;AA8B9D,MAAIlB,oBAAoB,CAACzD,IAArB,CAA0B0E,WAA1B,CAAJ,EAA4C;AAC1C,UAAM,IAAIH,KAAJ,8CACkCG,WADlC,0BAAN;AAGD,GAlC6D;;;AAqC9D,MAAIC,aAAa,GAAGjB,kBAApB,EAAwC;AACtC,UAAM,IAAIa,KAAJ,8EACkEb,kBADlE,OAAN;AAGD;;AAED,SAAO,IAAP;AACD;AAYD;AACA;AACA;AACA;;SAE8BkB,aAA9B;AAAA;AAAA;;;oHAAe,iBAA6BjF,GAA7B,EAAkC8B,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA6CgD,YAAAA,OAA7C,2DAAuD,EAAvD;AACbhD,YAAAA,SAAS,GAAGA,SAAS,IAAIC,uBAAG,CAACC,KAAJ,CAAUkD,SAAS,CAAClF,GAAD,CAAnB,CAAzB;AACMiE,YAAAA,OAFO;AAGXjE,cAAAA,GAAG,EAAE8B,SAAS,CAACqD,IAHJ;AAIXL,cAAAA,OAAO,kCAAOrB,eAAP,GAA2BqB,OAA3B,CAJI;AAKXM,cAAAA,OAAO,EAAExB,aALE;AAMX;AACAyB,cAAAA,GAAG,EAAE,IAPM;AAQX;AACA;AACA/B,cAAAA,QAAQ,EAAE,IAVC;AAWX;AACAgC,cAAAA,IAAI,EAAE,IAZK;AAaX;AACAC,cAAAA,kBAAkB,EAAE;AAdT,eAeP,OAAOC,MAAP,KAAkB,WAAlB,GACA,EADA,GAEA;AACE;AACAC,cAAAA,cAAc,EAAE;AAFlB,aAjBO;AAAA;AAAA,mBAuBoBzB,GAAG,CAACC,OAAD,CAvBvB;;AAAA;AAAA;AAuBLK,YAAAA,QAvBK,cAuBLA,QAvBK;AAuBKC,YAAAA,IAvBL,cAuBKA,IAvBL;AAAA;AA0BXC,YAAAA,gBAAgB,CAACF,QAAD,CAAhB;AA1BW,8CA2BJ;AACLC,cAAAA,IAAI,EAAJA,IADK;AAELD,cAAAA,QAAQ,EAARA;AAFK,aA3BI;;AAAA;AAAA;AAAA;AAAA,8CAgCJ;AACLO,cAAAA,KAAK,EAAE,IADF;AAELa,cAAAA,OAAO,EAAE,aAAEA;AAFN,aAhCI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACxFf,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,IAA5B,EAAkCC,EAAlC,EAAsC;AACpCF,EAAAA,CAAC,gBAASC,IAAT,OAAD,CAAmBE,IAAnB,CAAwB,UAACC,CAAD,EAAIC,IAAJ,EAAa;AACnC,QAAMC,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAf;AAEA,QAAME,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWP,IAAX,CAAd;AACAK,IAAAA,KAAK,CAACE,IAAN,CAAWN,EAAX,EAAeK,KAAf;AACAD,IAAAA,KAAK,CAACG,UAAN,CAAiBR,IAAjB;AACD,GAND;AAQA,SAAOD,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AAEe,SAASU,iBAAT,CAA2BV,CAA3B,EAA8B;AAC3CA,EAAAA,CAAC,GAAGD,eAAe,CAACC,CAAD,EAAI,SAAJ,EAAe,OAAf,CAAnB;AACAA,EAAAA,CAAC,GAAGD,eAAe,CAACC,CAAD,EAAI,UAAJ,EAAgB,MAAhB,CAAnB;AACA,SAAOA,CAAP;AACD;;;;ACvBD;AACO,IAAMW,SAAS,GAAG,IAAI/F,MAAJ,CAAW,0BAAX,EAAuC,GAAvC,CAAlB;AAGP;;AACO,IAAMgG,UAAU,GAAG,qBAAnB;AAEA,IAAMC,cAAc,GAAG,CAC5B,wCAD4B,EAE5B,iDAF4B,EAG5B,uCAH4B,EAI5B,qCAJ4B,EAK5B,oCAL4B,EAM5B,4CAN4B,CAAvB;;AAUA,IAAMC,iBAAiB,GAAG,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,UAH+B,EAI/B,MAJ+B,EAK/B,OAL+B,EAM/B,IAN+B,EAO/B,OAP+B,EAQ/B,QAR+B,EAS/B,QAT+B,CAA1B;;AAaA,IAAMC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAArB;AACA,IAAMC,qBAAqB,GAAGC,yCAAAF,YAAY,MAAZ,CAAAA,YAAY,EAC/C,UAAAG,QAAQ;AAAA,oBAAQA,QAAR;AAAA,CADuC,CAA1C;AAIA,IAAMC,eAAe,GAAG,CAC7B,KAD6B,EAE7B,QAF6B,EAG7B,OAH6B,EAI7B,MAJ6B,EAK7B,MAL6B,EAM7B,OAN6B,EAO7B,IAP6B,EAQ7B,KAR6B,EAS7B,YAT6B,EAU7B,OAV6B,EAW7B,QAX6B,CAAxB;AAcA,IAAMC,kBAAkB,GAAG,IAAIxG,MAAJ,aAC3BuG,eAAe,CAAClE,IAAhB,CAAqB,GAArB,CAD2B,SAEhC,GAFgC,CAA3B;;AAMA,IAAMoE,iBAAiB,GAAG,CAAC,GAAD,CAA1B;AACA,IAAMC,sBAAsB,GAAGL,yCAAAI,iBAAiB,MAAjB,CAAAA,iBAAiB,EACrD,UAAAE,GAAG;AAAA,mBAAOA,GAAP;AAAA,CADkD,CAAjB,CAEpCtE,IAFoC,CAE/B,GAF+B,CAA/B;;AAKA,IAAMuE,wBAAwB,GAAG,CACtC,IADsC,EAEtC,IAFsC,EAGtC,OAHsC,EAItC,KAJsC,EAKtC,QALsC,EAMtC,MANsC,EAOtCvE,IAPsC,CAOjC,GAPiC,CAAjC;;AAUP,IAAMwE,WAAW,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAApB;AACO,IAAMC,eAAe,GAAGD,WAAW,CAACxE,IAAZ,CAAiB,GAAjB,CAAxB;AAIP;AACA;AACA;AACA;;AACO,IAAM0E,6BAA6B,GAAG,CAC3C,UAD2C,EAE3C,OAF2C,EAG3C,QAH2C,EAI3C,SAJ2C,EAK3C,SAL2C,EAM3C,KAN2C,EAO3C,gBAP2C,EAQ3C,OAR2C,EAS3C,SAT2C,EAU3C,cAV2C,EAW3C,QAX2C,EAY3C,iBAZ2C,EAa3C,OAb2C,EAc3C,MAd2C;AAgB3C,QAhB2C,EAiB3C,QAjB2C,EAkB3C,QAlB2C,EAmB3C,OAnB2C;AAoB3C,MApB2C,EAqB3C,MArB2C,EAsB3C,KAtB2C,EAuB3C,UAvB2C,EAwB3C,OAxB2C,EAyB3C,YAzB2C,EA0B3C,UA1B2C;AA2B3C,2BA3B2C;AA4B3C,OA5B2C,EA6B3C,eA7B2C,EA8B3C,SA9B2C,EA+B3C,QA/B2C,EAgC3C,QAhC2C,EAiC3C,KAjC2C,EAkC3C,OAlC2C,EAmC3C,UAnC2C,EAoC3C,SApC2C,EAqC3C,UArC2C,EAsC3C,SAtC2C,EAuC3C,SAvC2C,EAwC3C,OAxC2C,CAAtC;AA4CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,6BAA6B,GAAG,CAC3C,KAD2C,EAE3C,SAF2C,EAG3C,MAH2C,EAI3C,WAJ2C,EAK3C,QAL2C,EAM3C,SAN2C,EAO3C,qBAP2C,EAQ3C,QAR2C;AAS3C,OAT2C,EAU3C,QAV2C,EAW3C,OAX2C,EAY3C,MAZ2C,EAa3C,MAb2C,EAc3C,OAd2C,EAe3C,QAf2C,CAAtC;AAmBP;AACA;;AACO,IAAMC,mBAAmB,GAAG,CACjC,GADiC,EAEjC,YAFiC,EAGjC,IAHiC,EAIjC,KAJiC,EAKjC,KALiC,EAMjC,GANiC,EAOjC,KAPiC,EAQjC,OARiC,EASjC5E,IATiC,CAS5B,GAT4B,CAA5B;AAiDP;AACA;AACA;;AACO,IAAM6E,oBAAoB,GAAG,CAClC,SADkC,EAElC,gBAFkC,EAGlC,iBAHkC,EAIlC,MAJkC,EAKlC,MALkC,EAMlC,SANkC,EAOlC,qBAPkC,EAQlC,OARkC,EASlC,QATkC,EAUlC,MAVkC,EAWlC,QAXkC,EAYlC,MAZkC,EAalC,YAbkC,EAclC,WAdkC,EAelC,MAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,UAlBkC;AAmBlC,SAnBkC,CAA7B;;AAuBA,IAAMC,iBAAiB,GAAG,IAAInH,MAAJ,CAC/BkH,oBAAoB,CAAC7E,IAArB,CAA0B,GAA1B,CAD+B,EAE/B,GAF+B,CAA1B;AASP;AACA;AACA;;AACO,IAAM+E,oBAAoB,GAAG,CAClC,OADkC,EAElC,QAFkC,EAGlC,QAHkC,EAIlC,KAJkC,EAKlC,UALkC,EAMlC,QANkC,EAOlC,QAPkC,EAQlC,OARkC,EASlC,MATkC,EAUlC,OAVkC,EAWlC,SAXkC,EAYlC,YAZkC,EAalC,SAbkC,EAclC,MAdkC,EAelC,QAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,MAlBkC,EAmBlC,SAnBkC,EAoBlC,UApBkC;AAqBlC,MArBkC,EAsBlC,QAtBkC,EAuBlC,UAvBkC,EAwBlC,MAxBkC,EAyBlC,MAzBkC,EA0BlC,MA1BkC,EA2BlC,UA3BkC;AA4BlC,mBA5BkC,EA6BlC,MA7BkC,EA8BlC,WA9BkC,EA+BlC,MA/BkC,EAgClC,UAhCkC,EAiClC,OAjCkC,EAkClC,MAlCkC,EAmClC,OAnCkC,EAoClC,UApCkC;AAqClC,OArCkC,EAsClC,KAtCkC;AAuClC,SAvCkC,EAwClC,SAxCkC,EAyClC,cAzCkC;AA0ClC,QA1CkC,EA2ClC,WA3CkC,EA4ClC,OA5CkC,EA6ClC,UA7CkC,EA8ClC,UA9CkC,EA+ClC,MA/CkC,EAgDlC,SAhDkC,EAiDlC,SAjDkC,EAkDlC,OAlDkC,EAmDlC,KAnDkC,EAoDlC,SApDkC,EAqDlC,MArDkC,EAsDlC,OAtDkC,EAuDlC,QAvDkC,CAA7B;;AA0DA,IAAMC,iBAAiB,GAAG,IAAIrH,MAAJ,CAC/BoH,oBAAoB,CAAC/E,IAArB,CAA0B,GAA1B,CAD+B,EAE/B,GAF+B,CAA1B;;AAMA,IAAMiF,cAAc,GAAG,wCAAvB;;AA6BA,IAAMC,OAAO,GAAG,IAAIvH,MAAJ,CAAW,iBAAX,EAA8B,GAA9B,CAAhB;AAuBP;;AACO,IAAMwH,gBAAgB,GAAG,CAC9B,SAD8B,EAE9B,OAF8B,EAG9B,YAH8B,EAI9B,MAJ8B,EAK9B,IAL8B,EAM9B,QAN8B,EAO9B,QAP8B,EAQ9B,SAR8B,EAS9B,KAT8B,EAU9B,UAV8B,EAW9B,IAX8B,EAY9B,KAZ8B,EAa9B,IAb8B,EAc9B,IAd8B,EAe9B,OAf8B,EAgB9B,UAhB8B,EAiB9B,YAjB8B,EAkB9B,QAlB8B,EAmB9B,QAnB8B,EAoB9B,MApB8B,EAqB9B,IArB8B,EAsB9B,IAtB8B,EAuB9B,IAvB8B,EAwB9B,IAxB8B,EAyB9B,IAzB8B,EA0B9B,IA1B8B,EA2B9B,QA3B8B,EA4B9B,QA5B8B,EA6B9B,IA7B8B,EA8B9B,IA9B8B,EA+B9B,KA/B8B,EAgC9B,QAhC8B,EAiC9B,IAjC8B,EAkC9B,QAlC8B,EAmC9B,GAnC8B,EAoC9B,KApC8B,EAqC9B,UArC8B,EAsC9B,SAtC8B,EAuC9B,OAvC8B,EAwC9B,OAxC8B,EAyC9B,UAzC8B,EA0C9B,OA1C8B,EA2C9B,IA3C8B,EA4C9B,OA5C8B,EA6C9B,IA7C8B,EA8C9B,IA9C8B,EA+C9B,OA/C8B,CAAzB;AAiDA,IAAMC,mBAAmB,GAAG,IAAIzH,MAAJ,aAC5BwH,gBAAgB,CAACnF,IAAjB,CAAsB,GAAtB,CAD4B,SAEjC,GAFiC,CAA5B;AAMP;AACA;AACA;;AACA,IAAMqF,mBAAmB,GAAGX,6BAA6B,CAAC1E,IAA9B,CAAmC,GAAnC,CAA5B;AACO,IAAMsF,oBAAoB,GAAG,IAAI3H,MAAJ,CAAW0H,mBAAX,EAAgC,GAAhC,CAA7B;AAEP,IAAME,mBAAmB,GAAGZ,6BAA6B,CAAC3E,IAA9B,CAAmC,GAAnC,CAA5B;AACO,IAAMwF,oBAAoB,GAAG,IAAI7H,MAAJ,CAAW4H,mBAAX,EAAgC,GAAhC,CAA7B;AAEA,IAAME,WAAW,GAAG,IAAI9H,MAAJ,oEACpB4H,mBADoB,yBACKF,mBADL,QAEzB,GAFyB,CAApB;;ACraQ,SAASK,uBAAT,CAAiC3C,CAAjC,EAAoC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAAA,CAAC,CAAC,GAAD,CAAD,CACG4C,GADH,CACO,GADP,EAEGzC,IAFH,CAEQ,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAAA;;AACrB,QAAMC,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAf;AACA,QAAMwC,OAAO,GAAGvC,KAAK,CAACE,IAAN,CAAW,OAAX,CAAhB;AACA,QAAMsC,EAAE,GAAGxC,KAAK,CAACE,IAAN,CAAW,IAAX,CAAX;AACA,QAAI,CAACsC,EAAD,IAAO,CAACD,OAAZ,EAAqB;;AAErB,QAAME,UAAU,oEAAMF,OAAO,IAAI,EAAjB,uBAAuBC,EAAE,IAAI,EAA7B,CAAhB;;AACA,QAAIL,oBAAoB,CAAChI,IAArB,CAA0BsI,UAA1B,CAAJ,EAA2C;AACzC;AACD;;AACD,QAAIR,oBAAoB,CAAC9H,IAArB,CAA0BsI,UAA1B,CAAJ,EAA2C;AACzCzC,MAAAA,KAAK,CAAC0C,MAAN;AACD;AACF,GAfH;AAiBA,SAAOhD,CAAP;AACD;;AC3BD;AACA;AAEA;AACA;AACA;AACA;;AAEe,SAASiD,OAAT,CAAiBjD,CAAjB,EAAoB;AACjC,MAAIkD,UAAU,GAAG,KAAjB;AACAlD,EAAAA,CAAC,CAAC,IAAD,CAAD,CAAQG,IAAR,CAAa,UAACxE,KAAD,EAAQwH,OAAR,EAAoB;AAC/B,QAAMC,QAAQ,GAAGpD,CAAC,CAACmD,OAAD,CAAlB;AACA,QAAME,WAAW,GAAGD,QAAQ,CAACE,IAAT,GAAgBlF,GAAhB,CAAoB,CAApB,CAApB;;AAEA,QAAIiF,WAAW,IAAIA,WAAW,CAACE,OAAZ,CAAoBxH,WAApB,OAAsC,IAAzD,EAA+D;AAC7DmH,MAAAA,UAAU,GAAG,IAAb;AACAE,MAAAA,QAAQ,CAACJ,MAAT;AACD,KAHD,MAGO,IAAIE,UAAJ,EAAgB;AACrBA,MAAAA,UAAU,GAAG,KAAb;AACAM,MAAAA,YAAY,CAACL,OAAD,EAAUnD,CAAV,EAAa,IAAb,CAAZ;AACD;AACF,GAXD;AAaA,SAAOA,CAAP;AACD;;ACxBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASwD,YAAT,CAAsBnD,IAAtB,EAA4BL,CAA5B,EAA2C;AAAA,MAAZyD,EAAY,uEAAP,KAAO;AACxD,MAAMnD,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAf;;AAEA,MAAIoD,EAAJ,EAAQ;AACN,QAAIC,OAAO,GAAGrD,IAAI,CAACsD,WAAnB;AACA,QAAMC,CAAC,GAAG5D,CAAC,CAAC,SAAD,CAAX,CAFM;AAKN;;AACA,WACE0D,OAAO,IACP,EAAEA,OAAO,CAACH,OAAR,IAAmBlB,mBAAmB,CAAC5H,IAApB,CAAyBiJ,OAAO,CAACH,OAAjC,CAArB,CAFF,EAGE;AAAA,qBACwBG,OADxB;AAAA,UACQC,WADR,YACQA,WADR;AAEA3D,MAAAA,CAAC,CAAC0D,OAAD,CAAD,CAAWG,QAAX,CAAoBD,CAApB;AACAF,MAAAA,OAAO,GAAGC,WAAV;AACD;;AAEDrD,IAAAA,KAAK,CAACwD,WAAN,CAAkBF,CAAlB;AACAtD,IAAAA,KAAK,CAAC0C,MAAN;AACA,WAAOhD,CAAP;AACD;;AAED,SAAOA,CAAP;AACD;;ACjCD,SAAS+D,WAAT,CAAqB/D,CAArB,EAAwB;AACtBA,EAAAA,CAAC,CAAC,KAAD,CAAD,CAASG,IAAT,CAAc,UAACxE,KAAD,EAAQqI,GAAR,EAAgB;AAC5B,QAAMC,IAAI,GAAGjE,CAAC,CAACgE,GAAD,CAAd;AACA,QAAME,WAAW,GAAGD,IAAI,CAACE,QAAL,CAActC,mBAAd,EAAmC/F,MAAnC,KAA8C,CAAlE;;AAEA,QAAIoI,WAAJ,EAAiB;AACfE,MAAAA,aAAa,CAACH,IAAD,EAAOjE,CAAP,EAAU,GAAV,CAAb;AACD;AACF,GAPD;AASA,SAAOA,CAAP;AACD;;AAED,SAASqE,YAAT,CAAsBrE,CAAtB,EAAyB;AACvBA,EAAAA,CAAC,CAAC,MAAD,CAAD,CAAUG,IAAV,CAAe,UAACxE,KAAD,EAAQ2I,IAAR,EAAiB;AAC9B,QAAMC,KAAK,GAAGvE,CAAC,CAACsE,IAAD,CAAf;AACA,QAAMJ,WAAW,GAAGK,KAAK,CAACC,OAAN,CAAc,wBAAd,EAAwC1I,MAAxC,KAAmD,CAAvE;;AACA,QAAIoI,WAAJ,EAAiB;AACfE,MAAAA,aAAa,CAACG,KAAD,EAAQvE,CAAR,EAAW,GAAX,CAAb;AACD;AACF,GAND;AAQA,SAAOA,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASyE,mBAAT,CAA6BzE,CAA7B,EAAgC;AAC7CA,EAAAA,CAAC,GAAGiD,OAAO,CAACjD,CAAD,CAAX;AACAA,EAAAA,CAAC,GAAG+D,WAAW,CAAC/D,CAAD,CAAf;AACAA,EAAAA,CAAC,GAAGqE,YAAY,CAACrE,CAAD,CAAhB;AAEA,SAAOA,CAAP;AACD;;AC7Cc,SAASoE,aAAT,CAAuB9D,KAAvB,EAA8BN,CAA9B,EAA4C;AAAA;;AAAA,MAAXuB,GAAW,uEAAL,GAAK;AACzD,MAAMlB,IAAI,GAAGC,KAAK,CAAClC,GAAN,CAAU,CAAV,CAAb;;AACA,MAAI,CAACiC,IAAL,EAAW;AACT,WAAOL,CAAP;AACD;;AACD,MAAM0E,KAAK,GAAGC,QAAQ,CAACtE,IAAD,CAAR,IAAkB,EAAhC;;AAEA,MAAMuE,YAAY,GAAG3D,yFAAgByD,KAAhB,kBACd,UAAAG,GAAG;AAAA;;AAAA,6EAAOA,GAAP,wBAAcH,KAAK,CAACG,GAAD,CAAnB;AAAA,GADW,EAElB5H,IAFkB,CAEb,GAFa,CAArB;;AAGA,MAAI6H,IAAJ;;AAEA,MAAI9E,CAAC,CAACjC,OAAN,EAAe;AACb;AACA;AACA;AACA+G,IAAAA,IAAI,GACFzE,IAAI,CAACkD,OAAL,CAAaxH,WAAb,OAA+B,UAA/B,GAA4CuE,KAAK,CAACtG,IAAN,EAA5C,GAA2DsG,KAAK,CAACwE,IAAN,EAD7D;AAED,GAND,MAMO;AACLA,IAAAA,IAAI,GAAGxE,KAAK,CAACyE,QAAN,EAAP;AACD;;AACDzE,EAAAA,KAAK,CAACwD,WAAN,oLAAsBvC,GAAtB,wBAA6BqD,YAA7B,wBAA6CE,IAA7C,yBAAsDvD,GAAtD;AACA,SAAOvB,CAAP;AACD;;ACvBD,SAASgF,cAAT,CAAwBC,IAAxB,EAA8BjF,CAA9B,EAAiC;AAC/B,MAAMkF,MAAM,GAAG5J,8BAAS2J,IAAI,CAACzE,IAAL,CAAU,QAAV,CAAT,EAA8B,EAA9B,CAAf;;AACA,MAAM2E,KAAK,GAAG7J,8BAAS2J,IAAI,CAACzE,IAAL,CAAU,OAAV,CAAT,EAA6B,EAA7B,KAAoC,EAAlD,CAF+B;AAK/B;AACA;;AACA,MAAI,CAAC0E,MAAM,IAAI,EAAX,IAAiB,EAAjB,IAAuBC,KAAK,GAAG,EAAnC,EAAuC;AACrCF,IAAAA,IAAI,CAACjC,MAAL;AACD,GAFD,MAEO,IAAIkC,MAAJ,EAAY;AACjB;AACA;AACA;AACAD,IAAAA,IAAI,CAACxE,UAAL,CAAgB,QAAhB;AACD;;AAED,SAAOT,CAAP;AACD;AAGD;;;AACA,SAASoF,aAAT,CAAuBH,IAAvB,EAA6BjF,CAA7B,EAAgC;AAC9B,MAAIW,SAAS,CAAClG,IAAV,CAAewK,IAAI,CAACzE,IAAL,CAAU,KAAV,CAAf,CAAJ,EAAsC;AACpCyE,IAAAA,IAAI,CAACjC,MAAL;AACD;;AAED,SAAOhD,CAAP;AACD;;AAEc,SAASqF,WAAT,CAAqBC,QAArB,EAA+BtF,CAA/B,EAAkC;AAC/C,4CAAAsF,QAAQ,MAAR,CAAAA,QAAQ,EAAM,KAAN,CAAR,CAAqBnF,IAArB,CAA0B,UAACxE,KAAD,EAAQ4J,GAAR,EAAgB;AACxC,QAAMN,IAAI,GAAGjF,CAAC,CAACuF,GAAD,CAAd;AAEAP,IAAAA,cAAc,CAACC,IAAD,EAAOjF,CAAP,CAAd;AACAoF,IAAAA,aAAa,CAACH,IAAD,EAAOjF,CAAP,CAAb;AACD,GALD;;AAOA,SAAOA,CAAP;AACD;;ACpCc,SAASwF,UAAT,CAAoBC,OAApB,EAA6BzF,CAA7B,EAAgC5F,GAAhC,EAAgD;AAAA,MAAXsL,IAAW,uEAAJ,EAAI;;AAC7D,MAAIA,IAAI,CAAC5J,MAAL,KAAgB,CAApB,EAAuB;AACrB4J,IAAAA,IAAI,GAAG7E,cAAP;AACD;;AAED,MAAIzG,GAAJ,EAAS;AAAA;;AAAA,qBACwB+B,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CADxB;AAAA,QACCiC,QADD,cACCA,QADD;AAAA,QACWsJ,QADX,cACWA,QADX;;AAEPD,IAAAA,IAAI,oHAAOA,IAAP,oFAA6BrJ,QAA7B,yBAA0CsJ,QAA1C,UAAJ;AACD;;AAED3F,EAAAA,CAAC,CAAC0F,IAAI,CAACzI,IAAL,CAAU,GAAV,CAAD,EAAiBwI,OAAjB,CAAD,CAA2BG,QAA3B,CAAoChF,UAApC;AAEA,SAAOZ,CAAP;AACD;;ACfc,SAAS6F,aAAT,CAAuBJ,OAAvB,EAAgCzF,CAAhC,EAA8C;AAAA,MAAX0F,IAAW,uEAAJ,EAAI;;AAC3D,MAAIA,IAAI,CAAC5J,MAAL,KAAgB,CAApB,EAAuB;AACrB4J,IAAAA,IAAI,GAAG5E,iBAAP;AACD,GAH0D;AAM3D;;;AACAd,EAAAA,CAAC,CAAC0F,IAAI,CAACzI,IAAL,CAAU,GAAV,CAAD,EAAiBwI,OAAjB,CAAD,CACG7C,GADH,YACWhC,UADX,GAEGoC,MAFH;AAIA,SAAOhD,CAAP;AACD;;ACXD;AACA;;AACe,SAAS8F,UAAT,CAAoBL,OAApB,EAA6BzF,CAA7B,EAAgC;AAC7C,MAAM+F,MAAM,GAAG/F,CAAC,CAAC,IAAD,EAAOyF,OAAP,CAAhB;;AAEA,MAAIM,MAAM,CAACjK,MAAP,GAAgB,CAApB,EAAuB;AACrBiK,IAAAA,MAAM,CAAC5F,IAAP,CAAY,UAACxE,KAAD,EAAQ0E,IAAR;AAAA,aAAiBL,CAAC,CAACK,IAAD,CAAD,CAAQ2C,MAAR,EAAjB;AAAA,KAAZ;AACD,GAFD,MAEO;AACL+C,IAAAA,MAAM,CAAC5F,IAAP,CAAY,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAC3B+D,MAAAA,aAAa,CAACpE,CAAC,CAACK,IAAD,CAAF,EAAUL,CAAV,EAAa,IAAb,CAAb;AACD,KAFD;AAGD;;AAED,SAAOA,CAAP;AACD;;;;;;ACbD,SAASgG,qBAAT,CAA+BV,QAA/B,EAAyCtF,CAAzC,EAA4C;AAC1C,4CAAAsF,QAAQ,MAAR,CAAAA,QAAQ,EAAM,GAAN,CAAR,CAAmBnF,IAAnB,CAAwB,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAAA;;AACvC,QAAMqE,KAAK,GAAGC,QAAQ,CAACtE,IAAD,CAAtB;AAEA4F,IAAAA,QAAQ,CACN5F,IADM,EAEN5D,4FAAgBiI,KAAhB,kBAA8B,UAAChI,GAAD,EAAM8D,IAAN,EAAe;AAC3C,UAAIY,kBAAkB,CAAC3G,IAAnB,CAAwB+F,IAAxB,CAAJ,EAAmC;AACjC,mDAAY9D,GAAZ,+CAAkB8D,IAAlB,EAAyBkE,KAAK,CAAClE,IAAD,CAA9B;AACD;;AAED,aAAO9D,GAAP;AACD,KAND,EAMG,EANH,CAFM,CAAR;AAUD,GAbD,EAD0C;;;AAiB1CsD,EAAAA,CAAC,YAAKY,UAAL,GAAmB0E,QAAnB,CAAD,CAA8BY,WAA9B,CAA0CtF,UAA1C;AAEA,SAAO0E,QAAP;AACD;;;AAGc,SAASa,eAAT,CAAyBb,QAAzB,EAAmCtF,CAAnC,EAAsC;AACnD;AACA;AACA;AACA,SAAOgG,qBAAqB,CAC1BV,QAAQ,CAACc,MAAT,GAAkBtK,MAAlB,GAA2BwJ,QAAQ,CAACc,MAAT,EAA3B,GAA+Cd,QADrB,EAE1BtF,CAF0B,CAA5B;AAID;;ACnCc,SAASqG,WAAT,CAAqBf,QAArB,EAA+BtF,CAA/B,EAAkC;AAC/C,4CAAAsF,QAAQ,MAAR,CAAAA,QAAQ,EAAM,GAAN,CAAR,CAAmBnF,IAAnB,CAAwB,UAACxE,KAAD,EAAQiI,CAAR,EAAc;AAAA;;AACpC,QAAM0C,EAAE,GAAGtG,CAAC,CAAC4D,CAAD,CAAZ;AACA,QAAIrJ,0CAAA+L,EAAE,MAAF,CAAAA,EAAE,EAAM,aAAN,CAAF,CAAuBxK,MAAvB,KAAkC,CAAlC,IAAuC7B,qDAAAqM,EAAE,CAACtM,IAAH,uBAAqB,EAAhE,EACEsM,EAAE,CAACtD,MAAH;AACH,GAJD;;AAMA,SAAOhD,CAAP;AACD;;;;ACRD;AAEA;AACA;AACA;AACA;AACO,IAAM2B,+BAA6B,GAAG,CAC3C,UAD2C,EAE3C,OAF2C,EAG3C,QAH2C,EAI3C,SAJ2C,EAK3C,SAL2C,EAM3C,KAN2C,EAO3C,gBAP2C,EAQ3C,OAR2C,EAS3C,SAT2C,EAU3C,cAV2C,EAW3C,QAX2C,EAY3C,iBAZ2C,EAa3C,OAb2C,EAc3C,MAd2C,EAe3C,MAf2C,EAgB3C,QAhB2C,EAiB3C,QAjB2C,EAkB3C,QAlB2C,EAmB3C,OAnB2C;AAoB3C,MApB2C,EAqB3C,MArB2C,EAsB3C,KAtB2C,EAuB3C,OAvB2C,EAwB3C,YAxB2C,EAyB3C,UAzB2C;AA0B3C,2BA1B2C;AA2B3C,OA3B2C,EA4B3C,eA5B2C,EA6B3C,SA7B2C,EA8B3C,QA9B2C,EA+B3C,QA/B2C,EAgC3C,KAhC2C,EAiC3C,OAjC2C,EAkC3C,UAlC2C,EAmC3C,SAnC2C,EAoC3C,UApC2C,EAqC3C,SArC2C,EAsC3C,OAtC2C,CAAtC;AA0CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,+BAA6B,GAAG,CAC3C,KAD2C,EAE3C,SAF2C,EAG3C,MAH2C,EAI3C,WAJ2C,EAK3C,QAL2C,EAM3C,SAN2C,EAO3C,qBAP2C,EAQ3C,QAR2C;AAS3C,OAT2C,EAU3C,QAV2C,EAW3C,OAX2C,EAY3C,MAZ2C,EAa3C,MAb2C,EAc3C,OAd2C,EAe3C,QAf2C,CAAtC;AAiCP;;AACO,IAAM2E,sBAAsB,GAAG,CACpC,IADoC,EAEpC,GAFoC,EAGpC,GAHoC,EAIpC,OAJoC,EAKpC,IALoC,EAMpC,MANoC,EAOpC,MAPoC,EAQpC,UARoC,EASpC,OAToC,EAUpC,KAVoC,EAWpC,MAXoC,EAYpC,MAZoC,CAA/B;AAeA,IAAMC,yBAAyB,GAAG,IAAI5L,MAAJ,aAClC2L,sBAAsB,CAACtJ,IAAvB,CAA4B,GAA5B,CADkC,SAEvC,GAFuC,CAAlC;AAMP;AACA;;AACO,IAAMwJ,uBAAuB,GAAG,CACrC,CAAC,SAAD,EAAY,gBAAZ,CADqC,EAErC,CAAC,OAAD,EAAU,gBAAV,CAFqC,EAGrC,CAAC,QAAD,EAAW,gBAAX,CAHqC,EAIrC,CAAC,OAAD,EAAU,WAAV,CAJqC,EAKrC,CAAC,OAAD,EAAU,YAAV,CALqC,EAMrC,CAAC,OAAD,EAAU,YAAV,CANqC,CAAhC;AASA,IAAMC,WAAW,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,SAA7B,CAApB;AACA,IAAMC,cAAc,GAAG,IAAI/L,MAAJ,CAAW8L,WAAW,CAACzJ,IAAZ,CAAiB,GAAjB,CAAX,EAAkC,GAAlC,CAAvB;AAGP;AACA;AACA;;AACO,IAAM6E,sBAAoB,GAAG,CAClC,SADkC,EAElC,gBAFkC,EAGlC,iBAHkC,EAIlC,MAJkC,EAKlC,MALkC,EAMlC,SANkC,EAOlC,qBAPkC,EAQlC,OARkC,EASlC,QATkC,EAUlC,MAVkC,EAWlC,QAXkC,EAYlC,MAZkC,EAalC,YAbkC,EAclC,WAdkC,EAelC,MAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,UAlBkC;AAmBlC,SAnBkC,CAA7B;;AAuBA,IAAMC,mBAAiB,GAAG,IAAInH,MAAJ,CAC/BkH,sBAAoB,CAAC7E,IAArB,CAA0B,GAA1B,CAD+B,EAE/B,GAF+B,CAA1B;;AAMA,IAAM2J,iBAAiB,GAAG,IAAIhM,MAAJ,CAAW,qBAAX,EAAkC,GAAlC,CAA1B;AAGP;AACA;AACA;;AACO,IAAMoH,sBAAoB,GAAG,CAClC,OADkC,EAElC,QAFkC,EAGlC,QAHkC,EAIlC,KAJkC,EAKlC,UALkC,EAMlC,QANkC,EAOlC,QAPkC,EAQlC,OARkC,EASlC,MATkC,EAUlC,OAVkC,EAWlC,SAXkC,EAYlC,YAZkC,EAalC,SAbkC,EAclC,MAdkC,EAelC,QAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,MAlBkC,EAmBlC,SAnBkC,EAoBlC,UApBkC;AAqBlC,MArBkC,EAsBlC,QAtBkC,EAuBlC,UAvBkC,EAwBlC,MAxBkC,EAyBlC,MAzBkC,EA0BlC,MA1BkC,EA2BlC,UA3BkC;AA4BlC,mBA5BkC,EA6BlC,MA7BkC,EA8BlC,WA9BkC,EA+BlC,MA/BkC,EAgClC,UAhCkC,EAiClC,OAjCkC,EAkClC,MAlCkC,EAmClC,OAnCkC,EAoClC,UApCkC;AAqClC,OArCkC,EAsClC,KAtCkC;AAuClC,SAvCkC,EAwClC,SAxCkC,EAyClC,cAzCkC;AA0ClC,QA1CkC,EA2ClC,WA3CkC,EA4ClC,OA5CkC,EA6ClC,UA7CkC,EA8ClC,UA9CkC,EA+ClC,MA/CkC,EAgDlC,SAhDkC,EAiDlC,SAjDkC,EAkDlC,OAlDkC,EAmDlC,KAnDkC,EAoDlC,SApDkC,EAqDlC,MArDkC,EAsDlC,OAtDkC,EAuDlC,QAvDkC,CAA7B;;AA0DA,IAAMC,mBAAiB,GAAG,IAAIrH,MAAJ,CAC/BoH,sBAAoB,CAAC/E,IAArB,CAA0B,GAA1B,CAD+B,EAE/B,GAF+B,CAA1B;AAuEP;AACA;AACA;;AACA,IAAMqF,qBAAmB,GAAGX,+BAA6B,CAAC1E,IAA9B,CAAmC,GAAnC,CAA5B;AAGA,IAAMuF,qBAAmB,GAAGZ,+BAA6B,CAAC3E,IAA9B,CAAmC,GAAnC,CAA5B;AAGO,IAAMyF,aAAW,GAAG,IAAI9H,MAAJ,sEACpB4H,qBADoB,2BACKF,qBADL,QAEzB,GAFyB,CAApB;AAKA,IAAMuE,oBAAoB,GAAG,IAAIjM,MAAJ,CAAW,mBAAX,EAAgC,GAAhC,CAA7B;AACA,IAAMkM,kBAAkB,GAAG,IAAIlM,MAAJ,CAAW,4BAAX,EAAyC,GAAzC,CAA3B;AACA,IAAMmM,QAAQ,GAAG,IAAInM,MAAJ,CAAW,kBAAX,EAA+B,GAA/B,CAAjB;;AC/SQ,SAASoM,SAAT,CAAmB3G,IAAnB,EAAyB;AACtC,MAAMwC,OAAO,GAAGxC,IAAI,CAACG,IAAL,CAAU,OAAV,CAAhB;AACA,MAAMsC,EAAE,GAAGzC,IAAI,CAACG,IAAL,CAAU,IAAV,CAAX;AACA,MAAIyG,KAAK,GAAG,CAAZ;;AAEA,MAAInE,EAAJ,EAAQ;AACN;AACA,QAAIf,mBAAiB,CAACtH,IAAlB,CAAuBqI,EAAvB,CAAJ,EAAgC;AAC9BmE,MAAAA,KAAK,IAAI,EAAT;AACD;;AACD,QAAIhF,mBAAiB,CAACxH,IAAlB,CAAuBqI,EAAvB,CAAJ,EAAgC;AAC9BmE,MAAAA,KAAK,IAAI,EAAT;AACD;AACF;;AAED,MAAIpE,OAAJ,EAAa;AACX,QAAIoE,KAAK,KAAK,CAAd,EAAiB;AACf;AACA;AACA,UAAIlF,mBAAiB,CAACtH,IAAlB,CAAuBoI,OAAvB,CAAJ,EAAqC;AACnCoE,QAAAA,KAAK,IAAI,EAAT;AACD;;AACD,UAAIhF,mBAAiB,CAACxH,IAAlB,CAAuBoI,OAAvB,CAAJ,EAAqC;AACnCoE,QAAAA,KAAK,IAAI,EAAT;AACD;AACF,KAVU;AAaX;AACA;;;AACA,QAAIN,cAAc,CAAClM,IAAf,CAAoBoI,OAApB,CAAJ,EAAkC;AAChCoE,MAAAA,KAAK,IAAI,EAAT;AACD,KAjBU;AAoBX;AACA;AACA;;;AACA,QAAIL,iBAAiB,CAACnM,IAAlB,CAAuBoI,OAAvB,CAAJ,EAAqC;AACnCoE,MAAAA,KAAK,IAAI,EAAT;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;ACpDD;AACA;AACA;AACe,SAASC,QAAT,CAAkB5G,KAAlB,EAAyB;AACtC,SAAO6G,gCAAW7G,KAAK,CAACE,IAAN,CAAW,OAAX,CAAX,KAAmC,IAA1C;AACD;;ACLD;AACe,SAAS4G,WAAT,CAAqBpN,IAArB,EAA2B;AACxC,SAAO,CAACA,IAAI,CAACoB,KAAL,CAAW,IAAX,KAAoB,EAArB,EAAyBU,MAAhC;AACD;;ACHD,IAAMuL,KAAK,GAAG,IAAIzM,MAAJ,CAAW,WAAX,EAAwB,GAAxB,CAAd;AAEe,SAAS0M,WAAT,CAAqBC,UAArB,EAAgD;AAAA,MAAfhE,OAAe,uEAAL,GAAK;AAC7D,MAAMiE,MAAM,GAAGD,UAAU,GAAG,EAA5B;;AAEA,MAAIC,MAAM,GAAG,CAAb,EAAgB;AACd,QAAIC,WAAJ,CADc;AAId;AACA;AACA;AACA;;AACA,QAAIJ,KAAK,CAAC5M,IAAN,CAAW8I,OAAX,CAAJ,EAAyB;AACvBkE,MAAAA,WAAW,GAAGD,MAAM,GAAG,CAAvB;AACD,KAFD,MAEO;AACLC,MAAAA,WAAW,GAAGD,MAAM,GAAG,IAAvB;AACD;;AAED,WAAOE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,WAAT,EAAsB,CAAtB,CAAT,EAAmC,CAAnC,CAAP;AACD;;AAED,SAAO,CAAP;AACD;;ACpBD;;AACe,SAASI,cAAT,CAAwBxH,IAAxB,EAA8B;AAAA;;AAC3C,MAAI4G,KAAK,GAAG,CAAZ;;AACA,MAAMjN,IAAI,GAAGC,qDAAAoG,IAAI,CAACrG,IAAL,kBAAb;;AACA,MAAMuN,UAAU,GAAGvN,IAAI,CAAC8B,MAAxB,CAH2C;;AAM3C,MAAIyL,UAAU,GAAG,EAAjB,EAAqB;AACnB,WAAO,CAAP;AACD,GAR0C;;;AAW3CN,EAAAA,KAAK,IAAIG,WAAW,CAACpN,IAAD,CAApB,CAX2C;AAc3C;;AACAiN,EAAAA,KAAK,IAAIK,WAAW,CAACC,UAAD,CAApB,CAf2C;AAkB3C;AACA;AACA;;AACA,MAAIhK,2CAAAvD,IAAI,MAAJ,CAAAA,IAAI,EAAO,CAAC,CAAR,CAAJ,KAAmB,GAAvB,EAA4B;AAC1BiN,IAAAA,KAAK,IAAI,CAAT;AACD;;AAED,SAAOA,KAAP;AACD;;AC9Bc,SAASa,QAAT,CAAkBxH,KAAlB,EAAyBN,CAAzB,EAA4BiH,KAA5B,EAAmC;AAChD3G,EAAAA,KAAK,CAACE,IAAN,CAAW,OAAX,EAAoByG,KAApB;AACA,SAAO3G,KAAP;AACD;;ACDc,SAASyH,QAAT,CAAkBzH,KAAlB,EAAyBN,CAAzB,EAA4BgI,MAA5B,EAAoC;AACjD,MAAI;AACF,QAAMf,KAAK,GAAGgB,cAAc,CAAC3H,KAAD,EAAQN,CAAR,CAAd,GAA2BgI,MAAzC;AACAF,IAAAA,QAAQ,CAACxH,KAAD,EAAQN,CAAR,EAAWiH,KAAX,CAAR;AACD,GAHD,CAGE,OAAOiB,CAAP,EAAU;AAEX;;AAED,SAAO5H,KAAP;AACD;;ACRc,SAAS6H,WAAT,CAAqB9H,IAArB,EAA2BL,CAA3B,EAA8BiH,KAA9B,EAAqC;AAClD,MAAMb,MAAM,GAAG/F,IAAI,CAAC+F,MAAL,EAAf;;AACA,MAAIA,MAAJ,EAAY;AACV2B,IAAAA,QAAQ,CAAC3B,MAAD,EAASpG,CAAT,EAAYiH,KAAK,GAAG,IAApB,CAAR;AACD;;AAED,SAAO5G,IAAP;AACD;;ACPD;AACA;;AACe,SAAS4H,cAAT,CAAwB3H,KAAxB,EAA+BN,CAA/B,EAAsD;AAAA,MAApBoI,WAAoB,uEAAN,IAAM;AACnE,MAAInB,KAAK,GAAGC,QAAQ,CAAC5G,KAAD,CAApB;;AAEA,MAAI2G,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AAEDA,EAAAA,KAAK,GAAGoB,SAAS,CAAC/H,KAAD,CAAjB;;AAEA,MAAI8H,WAAJ,EAAiB;AACfnB,IAAAA,KAAK,IAAID,SAAS,CAAC1G,KAAD,CAAlB;AACD;;AAED6H,EAAAA,WAAW,CAAC7H,KAAD,EAAQN,CAAR,EAAWiH,KAAX,CAAX;AAEA,SAAOA,KAAP;AACD;;ACbD;;AACe,SAASoB,SAAT,CAAmB/H,KAAnB,EAA0B;AAAA,mBACnBA,KAAK,CAAClC,GAAN,CAAU,CAAV,CADmB;AAAA,MAC/BmF,OAD+B,cAC/BA,OAD+B;AAIvC;AACA;;;AACA,MAAIsD,oBAAoB,CAACpM,IAArB,CAA0B8I,OAA1B,CAAJ,EAAwC;AACtC,WAAOsE,cAAc,CAACvH,KAAD,CAArB;AACD;;AACD,MAAIiD,OAAO,CAACxH,WAAR,OAA0B,KAA9B,EAAqC;AACnC,WAAO,CAAP;AACD;;AACD,MAAI+K,kBAAkB,CAACrM,IAAnB,CAAwB8I,OAAxB,CAAJ,EAAsC;AACpC,WAAO,CAAP;AACD;;AACD,MAAIwD,QAAQ,CAACtM,IAAT,CAAc8I,OAAd,CAAJ,EAA4B;AAC1B,WAAO,CAAC,CAAR;AACD;;AACD,MAAIA,OAAO,CAACxH,WAAR,OAA0B,IAA9B,EAAoC;AAClC,WAAO,CAAC,CAAR;AACD;;AAED,SAAO,CAAP;AACD;;AC3BD,SAASsI,cAAT,CAAsB/D,KAAtB,EAA6BN,CAA7B,EAAgC;AAC9B,MAAIM,KAAK,CAAClC,GAAN,CAAU,CAAV,CAAJ,EAAkB;AAAA,qBACIkC,KAAK,CAAClC,GAAN,CAAU,CAAV,CADJ;AAAA,QACRmF,OADQ,cACRA,OADQ;;AAGhB,QAAIA,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACAa,MAAAA,aAAa,CAAC9D,KAAD,EAAQN,CAAR,EAAW,KAAX,CAAb;AACD;AACF;AACF;;AAED,SAASsI,UAAT,CAAoBhI,KAApB,EAA2BN,CAA3B,EAA8BiH,KAA9B,EAAqC;AACnC,MAAI3G,KAAJ,EAAW;AACT+D,IAAAA,cAAY,CAAC/D,KAAD,EAAQN,CAAR,CAAZ;AACA+H,IAAAA,QAAQ,CAACzH,KAAD,EAAQN,CAAR,EAAWiH,KAAX,CAAR;AACD;AACF;;AAED,SAASsB,OAAT,CAAiBvI,CAAjB,EAAoBoI,WAApB,EAAiC;AAC/BpI,EAAAA,CAAC,CAAC,QAAD,CAAD,CACG4C,GADH,CACO,SADP,EAEGzC,IAFH,CAEQ,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AACrB;AACA;AACA,QAAIC,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAb;AACAC,IAAAA,KAAK,GAAGwH,QAAQ,CAACxH,KAAD,EAAQN,CAAR,EAAWiI,cAAc,CAAC3H,KAAD,EAAQN,CAAR,EAAWoI,WAAX,CAAzB,CAAhB;AAEA,QAAMI,OAAO,GAAGlI,KAAK,CAAC8F,MAAN,EAAhB;AACA,QAAMqC,QAAQ,GAAGJ,SAAS,CAAC/H,KAAD,CAA1B;AAEAgI,IAAAA,UAAU,CAACE,OAAD,EAAUxI,CAAV,EAAayI,QAAb,CAAV;;AACA,QAAID,OAAJ,EAAa;AACX;AACA;AACAF,MAAAA,UAAU,CAACE,OAAO,CAACpC,MAAR,EAAD,EAAmBpG,CAAnB,EAAsByI,QAAQ,GAAG,CAAjC,CAAV;AACD;AACF,GAjBH;AAmBA,SAAOzI,CAAP;AACD;AAGD;;;AACe,SAAS0I,YAAT,CAAsB1I,CAAtB,EAA6C;AAAA,MAApBoI,WAAoB,uEAAN,IAAM;;AAC1D;AACA;AACA,+CAAA3B,uBAAuB,MAAvB,CAAAA,uBAAuB,EAAS,gBAAqC;AAAA;;AAAA;AAAA,QAAnCkC,cAAmC;AAAA,QAAnBC,aAAmB;;AACnE5I,IAAAA,CAAC,kEAAI2I,cAAJ,uBAAsBC,aAAtB,EAAD,CAAwCzI,IAAxC,CAA6C,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAC5D0H,MAAAA,QAAQ,CAAC/H,CAAC,CAACK,IAAD,CAAD,CAAQ+F,MAAR,CAAeuC,cAAf,CAAD,EAAiC3I,CAAjC,EAAoC,EAApC,CAAR;AACD,KAFD;AAGD,GAJsB,CAAvB,CAH0D;AAU1D;AACA;AACA;AACA;;;AACAuI,EAAAA,OAAO,CAACvI,CAAD,EAAIoI,WAAJ,CAAP;AACAG,EAAAA,OAAO,CAACvI,CAAD,EAAIoI,WAAJ,CAAP;AAEA,SAAOpI,CAAP;AACD;;AC3DD;AACA;AACA;AACA;;AACe,SAAS6I,aAAT,CAAuBC,UAAvB,EAAmCC,QAAnC,EAA6C/I,CAA7C,EAAgD;AAC7D,MAAI,CAAC8I,UAAU,CAAC1C,MAAX,GAAoBtK,MAAzB,EAAiC;AAC/B,WAAOgN,UAAP;AACD;;AAED,MAAME,qBAAqB,GAAGtB,IAAI,CAACE,GAAL,CAAS,EAAT,EAAamB,QAAQ,GAAG,IAAxB,CAA9B;AACA,MAAME,WAAW,GAAGjJ,CAAC,CAAC,aAAD,CAArB;AAEA8I,EAAAA,UAAU,CACP1C,MADH,GAEGjC,QAFH,GAGGhE,IAHH,CAGQ,UAACxE,KAAD,EAAQ+H,OAAR,EAAoB;AACxB,QAAMwF,QAAQ,GAAGlJ,CAAC,CAAC0D,OAAD,CAAlB,CADwB;;AAGxB,QAAI8C,yBAAyB,CAAC/L,IAA1B,CAA+BiJ,OAAO,CAACH,OAAvC,CAAJ,EAAqD;AACnD,aAAO,IAAP;AACD;;AAED,QAAM4F,YAAY,GAAGjC,QAAQ,CAACgC,QAAD,CAA7B;;AACA,QAAIC,YAAJ,EAAkB;AAChB,UAAID,QAAQ,CAAC9K,GAAT,CAAa,CAAb,MAAoB0K,UAAU,CAAC1K,GAAX,CAAe,CAAf,CAAxB,EAA2C;AACzC6K,QAAAA,WAAW,CAACG,MAAZ,CAAmBF,QAAnB;AACD,OAFD,MAEO;AACL,YAAIG,YAAY,GAAG,CAAnB;AACA,YAAMC,OAAO,GAAGC,WAAW,CAACL,QAAD,CAA3B,CAFK;AAKL;;AACA,YAAII,OAAO,GAAG,IAAd,EAAoB;AAClBD,UAAAA,YAAY,IAAI,EAAhB;AACD,SARI;AAWL;;;AACA,YAAIC,OAAO,IAAI,GAAf,EAAoB;AAClBD,UAAAA,YAAY,IAAI,EAAhB;AACD,SAdI;AAiBL;;;AACA,YAAIH,QAAQ,CAAC1I,IAAT,CAAc,OAAd,MAA2BsI,UAAU,CAACtI,IAAX,CAAgB,OAAhB,CAA/B,EAAyD;AACvD6I,UAAAA,YAAY,IAAIN,QAAQ,GAAG,GAA3B;AACD;;AAED,YAAMS,QAAQ,GAAGL,YAAY,GAAGE,YAAhC;;AAEA,YAAIG,QAAQ,IAAIR,qBAAhB,EAAuC;AACrC,iBAAOC,WAAW,CAACG,MAAZ,CAAmBF,QAAnB,CAAP;AACD;;AACD,YAAIxF,OAAO,CAACH,OAAR,KAAoB,GAAxB,EAA6B;AAC3B,cAAMkG,cAAc,GAAGP,QAAQ,CAAClP,IAAT,EAAvB;AACA,cAAM0P,oBAAoB,GAAGnC,UAAU,CAACkC,cAAD,CAAvC;;AAEA,cAAIC,oBAAoB,GAAG,EAAvB,IAA6BJ,OAAO,GAAG,IAA3C,EAAiD;AAC/C,mBAAOL,WAAW,CAACG,MAAZ,CAAmBF,QAAnB,CAAP;AACD;;AACD,cACEQ,oBAAoB,IAAI,EAAxB,IACAJ,OAAO,KAAK,CADZ,IAEAnM,cAAc,CAACsM,cAAD,CAHhB,EAIE;AACA,mBAAOR,WAAW,CAACG,MAAZ,CAAmBF,QAAnB,CAAP;AACD;AACF;AACF;AACF;;AAED,WAAO,IAAP;AACD,GA5DH;;AA8DA,MACED,WAAW,CAAC9E,QAAZ,GAAuBrI,MAAvB,KAAkC,CAAlC,IACAmN,WAAW,CACR9E,QADH,GAEGwF,KAFH,GAGGvL,GAHH,CAGO,CAHP,MAGc0K,UAAU,CAAC1K,GAAX,CAAe,CAAf,CALhB,EAME;AACA,WAAO0K,UAAP;AACD;;AAED,SAAOG,WAAP;AACD;;ACvFD;;AACe,SAASW,gBAAT,CAA0B5J,CAA1B,EAA6B;AAC1C,MAAI8I,UAAJ;AACA,MAAIC,QAAQ,GAAG,CAAf;AAEA/I,EAAAA,CAAC,CAAC,SAAD,CAAD,CAAaG,IAAb,CAAkB,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AACjC;AACA,QAAImG,yBAAyB,CAAC/L,IAA1B,CAA+B4F,IAAI,CAACkD,OAApC,CAAJ,EAAkD;AAChD;AACD;;AAED,QAAMjD,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAf;AACA,QAAM4G,KAAK,GAAGC,QAAQ,CAAC5G,KAAD,CAAtB;;AAEA,QAAI2G,KAAK,GAAG8B,QAAZ,EAAsB;AACpBA,MAAAA,QAAQ,GAAG9B,KAAX;AACA6B,MAAAA,UAAU,GAAGxI,KAAb;AACD;AACF,GAbD,EAJ0C;AAoB1C;;AACA,MAAI,CAACwI,UAAL,EAAiB;AACf,WAAO9I,CAAC,CAAC,MAAD,CAAD,IAAaA,CAAC,CAAC,GAAD,CAAD,CAAO2J,KAAP,EAApB;AACD;;AAEDb,EAAAA,UAAU,GAAGD,aAAa,CAACC,UAAD,EAAaC,QAAb,EAAuB/I,CAAvB,CAA1B;AAEA,SAAO8I,UAAP;AACD;;ACvBD,SAASe,mBAAT,CAA6BvJ,KAA7B,EAAoCN,CAApC,EAAuC8J,MAAvC,EAA+C;AAC7C;AACA;AACA;AACA;AACA,MAAIxJ,KAAK,CAACyJ,QAAN,CAAe,qBAAf,CAAJ,EAA2C;AACzC;AACD;;AAED,MAAM1M,OAAO,GAAGtD,eAAe,CAACuG,KAAK,CAACtG,IAAN,EAAD,CAA/B;;AAEA,MAAIoN,WAAW,CAAC/J,OAAD,CAAX,GAAuB,EAA3B,EAA+B;AAC7B,QAAM2M,MAAM,GAAGhK,CAAC,CAAC,GAAD,EAAMM,KAAN,CAAD,CAAcxE,MAA7B;AACA,QAAMmO,UAAU,GAAGjK,CAAC,CAAC,OAAD,EAAUM,KAAV,CAAD,CAAkBxE,MAArC,CAF6B;;AAK7B,QAAImO,UAAU,GAAGD,MAAM,GAAG,CAA1B,EAA6B;AAC3B1J,MAAAA,KAAK,CAAC0C,MAAN;AACA;AACD;;AAED,QAAM5D,aAAa,GAAG/B,OAAO,CAACvB,MAA9B;AACA,QAAMoO,QAAQ,GAAGlK,CAAC,CAAC,KAAD,EAAQM,KAAR,CAAD,CAAgBxE,MAAjC,CAX6B;AAc7B;;AACA,QAAIsD,aAAa,GAAG,EAAhB,IAAsB8K,QAAQ,KAAK,CAAvC,EAA0C;AACxC5J,MAAAA,KAAK,CAAC0C,MAAN;AACA;AACD;;AAED,QAAMsG,OAAO,GAAGC,WAAW,CAACjJ,KAAD,CAA3B,CApB6B;AAuB7B;AACA;;AACA,QAAIwJ,MAAM,GAAG,EAAT,IAAeR,OAAO,GAAG,GAAzB,IAAgClK,aAAa,GAAG,EAApD,EAAwD;AACtDkB,MAAAA,KAAK,CAAC0C,MAAN;AACA;AACD,KA5B4B;AA+B7B;;;AACA,QAAI8G,MAAM,IAAI,EAAV,IAAgBR,OAAO,GAAG,GAA9B,EAAmC;AACjC;AACA;AACA;AACA,UAAM/F,OAAO,GAAGjD,KAAK,CAAClC,GAAN,CAAU,CAAV,EAAamF,OAAb,CAAqBxH,WAArB,EAAhB;AACA,UAAMoO,UAAU,GAAG5G,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,IAAnD;;AACA,UAAI4G,UAAJ,EAAgB;AAAA;;AACd,YAAMC,YAAY,GAAG9J,KAAK,CAAC+J,IAAN,EAArB;;AACA,YACED,YAAY,IACZ7M,sDAAAxD,eAAe,CAACqQ,YAAY,CAACpQ,IAAb,EAAD,CAAf,iBAA2C,CAAC,CAA5C,MAAmD,GAFrD,EAGE;AACA;AACD;AACF;;AAEDsG,MAAAA,KAAK,CAAC0C,MAAN;AACA;AACD;;AAED,QAAMsH,WAAW,GAAGtK,CAAC,CAAC,QAAD,EAAWM,KAAX,CAAD,CAAmBxE,MAAvC,CApD6B;;AAuD7B,QAAIwO,WAAW,GAAG,CAAd,IAAmBlL,aAAa,GAAG,GAAvC,EAA4C;AAC1CkB,MAAAA,KAAK,CAAC0C,MAAN;AACD;AACF;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASuH,SAAT,CAAmBjF,QAAnB,EAA6BtF,CAA7B,EAAgC;AAC7CA,EAAAA,CAAC,CAACwB,wBAAD,EAA2B8D,QAA3B,CAAD,CAAsCnF,IAAtC,CAA2C,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAC1D,QAAMC,KAAK,GAAGN,CAAC,CAACK,IAAD,CAAf,CAD0D;;AAG1D,QAAIC,KAAK,CAACyJ,QAAN,CAAenJ,UAAf,KAA8BrG,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,aAAUM,UAAV,EAAL,CAA6B9E,MAA7B,GAAsC,CAAxE,EACE;AAEF,QAAIgO,MAAM,GAAG5C,QAAQ,CAAC5G,KAAD,CAArB;;AACA,QAAI,CAACwJ,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG7B,cAAc,CAAC3H,KAAD,EAAQN,CAAR,CAAvB;AACA8H,MAAAA,QAAQ,CAACxH,KAAD,EAAQN,CAAR,EAAW8J,MAAX,CAAR;AACD,KAVyD;;;AAa1D,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACdxJ,MAAAA,KAAK,CAAC0C,MAAN;AACD,KAFD,MAEO;AACL;AACA6G,MAAAA,mBAAmB,CAACvJ,KAAD,EAAQN,CAAR,EAAW8J,MAAX,CAAnB;AACD;AACF,GAnBD;AAqBA,SAAO9J,CAAP;AACD;;AC5Gc,SAASwK,YAAT,CAAsBlF,QAAtB,EAAgCtF,CAAhC,EAA+C;AAAA,MAAZyK,KAAY,uEAAJ,EAAI;AAC5DzK,EAAAA,CAAC,CAAC0B,eAAD,EAAkB4D,QAAlB,CAAD,CAA6BnF,IAA7B,CAAkC,UAACxE,KAAD,EAAQ+O,MAAR,EAAmB;AACnD,QAAMC,OAAO,GAAG3K,CAAC,CAAC0K,MAAD,CAAjB,CADmD;AAGnD;AACA;AACA;;AACA,QAAI1K,CAAC,CAAC2K,OAAD,EAAUrF,QAAV,CAAD,CAAqBsF,OAArB,CAA6B,GAA7B,EAAkC9O,MAAlC,KAA6C,CAAjD,EAAoD;AAClD,aAAO6O,OAAO,CAAC3H,MAAR,EAAP;AACD,KARkD;;;AAWnD,QAAIjJ,eAAe,CAACiG,CAAC,CAAC0K,MAAD,CAAD,CAAU1Q,IAAV,EAAD,CAAf,KAAsCyQ,KAA1C,EAAiD;AAC/C,aAAOE,OAAO,CAAC3H,MAAR,EAAP;AACD,KAbkD;AAgBnD;;;AACA,QAAIgE,SAAS,CAAChH,CAAC,CAAC0K,MAAD,CAAF,CAAT,GAAuB,CAA3B,EAA8B;AAC5B,aAAOC,OAAO,CAAC3H,MAAR,EAAP;AACD;;AAED,WAAO2H,OAAP;AACD,GAtBD;AAwBA,SAAO3K,CAAP;AACD;;AC5BD;;AACe,SAAS6K,eAAT,CAAyBpF,OAAzB,EAAkCzF,CAAlC,EAAqC;AAClD;AACA;AACA;AACAA,EAAAA,CAAC,GAAGoE,aAAa,CAACpE,CAAC,CAAC,MAAD,CAAF,EAAYA,CAAZ,EAAe,KAAf,CAAjB;AACAA,EAAAA,CAAC,GAAGoE,aAAa,CAACpE,CAAC,CAAC,MAAD,CAAF,EAAYA,CAAZ,EAAe,KAAf,CAAjB;AAEA,SAAOA,CAAP;AACD;;ACRD,SAAS8K,UAAT,CAAoB9K,CAApB,EAAuB+K,OAAvB,EAAgCvK,IAAhC,EAAsC;AACpC,MAAMwK,OAAO,GAAGhL,CAAC,CAAC,MAAD,CAAD,CAAUQ,IAAV,CAAe,MAAf,CAAhB;AAEAR,EAAAA,CAAC,YAAKQ,IAAL,OAAD,CAAeL,IAAf,CAAoB,UAACC,CAAD,EAAIC,IAAJ,EAAa;AAC/B,QAAMqE,KAAK,GAAGC,QAAQ,CAACtE,IAAD,CAAtB;AACA,QAAMjG,GAAG,GAAGsK,KAAK,CAAClE,IAAD,CAAjB;AACA,QAAI,CAACpG,GAAL,EAAU;AACV,QAAM6Q,WAAW,GAAG9O,uBAAG,CAACmC,OAAJ,CAAY0M,OAAO,IAAID,OAAvB,EAAgC3Q,GAAhC,CAApB;AAEA8Q,IAAAA,OAAO,CAAC7K,IAAD,EAAOG,IAAP,EAAayK,WAAb,CAAP;AACD,GAPD;AAQD;;AAED,SAASE,aAAT,CAAuBnL,CAAvB,EAA0B+K,OAA1B,EAAmCK,QAAnC,EAA6C;AAC3CpL,EAAAA,CAAC,CAAC,UAAD,EAAaoL,QAAb,CAAD,CAAwBjL,IAAxB,CAA6B,UAACC,CAAD,EAAIC,IAAJ,EAAa;AACxC,QAAMqE,KAAK,GAAGC,QAAQ,CAACtE,IAAD,CAAtB;AACA,QAAMgL,MAAM,GAAG3G,KAAK,CAAC4G,MAArB;;AAEA,QAAID,MAAJ,EAAY;AACV;AACA;AACA;AACA,UAAME,UAAU,GAAGF,MAAM,CAACjQ,KAAP,CACjB,6CADiB,CAAnB;AAGA,UAAI,CAACmQ,UAAL,EAAiB;;AACjB,UAAMC,kBAAkB,GAAGvK,yCAAAsK,UAAU,MAAV,CAAAA,UAAU,EAAK,UAAAE,SAAS,EAAI;AACrD;AACA;AACA,YAAMC,KAAK,GAAGzR,0CAAAwR,SAAS,MAAT,CAAAA,SAAS,EAEpBvR,OAFW,CAEH,IAFG,EAEG,EAFH,EAGXsB,KAHW,CAGL,KAHK,CAAd;;AAIAkQ,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWvP,uBAAG,CAACmC,OAAJ,CAAYyM,OAAZ,EAAqBW,KAAK,CAAC,CAAD,CAA1B,CAAX;AACA,eAAOA,KAAK,CAACzO,IAAN,CAAW,GAAX,CAAP;AACD,OAToC,CAArC;;AAUA,UAAM0O,cAAc,GAAGC,uCAAI,6BAAQJ,kBAAR,CAAJ,EAAiCvO,IAAjC,CAAsC,IAAtC,CAAvB;;AACAiO,MAAAA,OAAO,CAAC7K,IAAD,EAAO,QAAP,EAAiBsL,cAAjB,CAAP;AACD;AACF,GAzBD;AA0BD;;AAEc,SAASE,iBAAT,CAA2BT,QAA3B,EAAqCpL,CAArC,EAAwC5F,GAAxC,EAA6C;AAAA;;AAC1D,2DAAC,MAAD,EAAS,KAAT,kBAAwB,UAAAoG,IAAI;AAAA,WAAIsK,UAAU,CAAC9K,CAAD,EAAI5F,GAAJ,EAASoG,IAAT,CAAd;AAAA,GAA5B;;AACA2K,EAAAA,aAAa,CAACnL,CAAD,EAAI5F,GAAJ,EAASgR,QAAT,CAAb;AAEA,SAAOA,QAAP;AACD;;ACnDM,SAAS7D,UAAT,CAAoBvN,IAApB,EAA0B;AAC/B,SAAOC,0CAAAD,IAAI,MAAJ,CAAAA,IAAI,EAAQE,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,EAAiC4B,MAAxC;AACD;AAGD;AACA;;AACO,SAASyN,WAAT,CAAqBjJ,KAArB,EAA4B;AACjC,MAAMwL,eAAe,GAAGvE,UAAU,CAACjH,KAAK,CAACtG,IAAN,EAAD,CAAlC;;AAEA,MAAM+R,QAAQ,GAAGxR,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,GAAN,CAAL,CAAgBtG,IAAhB,EAAjB;;AACA,MAAMgS,UAAU,GAAGzE,UAAU,CAACwE,QAAD,CAA7B;;AAEA,MAAID,eAAe,GAAG,CAAtB,EAAyB;AACvB,WAAOE,UAAU,GAAGF,eAApB;AACD;;AACD,MAAIA,eAAe,KAAK,CAApB,IAAyBE,UAAU,GAAG,CAA1C,EAA6C;AAC3C,WAAO,CAAP;AACD;;AAED,SAAO,CAAP;AACD;;;;;;;AClBD;;AACe,SAASC,eAAT,CACbjM,CADa,EAEbkM,SAFa,EAGbC,WAHa,EAKb;AAAA,MADA5B,SACA,uEADY,IACZ;;AACA,MAAM6B,UAAU,GAAGC,4CAAAH,SAAS,MAAT,CAAAA,SAAS,EAAQ,UAAAI,IAAI;AAAA,WAAIC,6CAAAJ,WAAW,MAAX,CAAAA,WAAW,EAASG,IAAT,CAAX,KAA8B,CAAC,CAAnC;AAAA,GAAZ,CAA5B,CADA;;;AAAA,6CAImBF,UAJnB;AAAA;;AAAA;AAAA;AAAA;;AAAA,UAIWE,IAJX;AAKE,UAAME,IAAI,GAAG,MAAb;AACA,UAAMjM,KAAK,GAAG,OAAd;AAEA,UAAMkM,KAAK,GAAGzM,CAAC,uEAASwM,IAAT,yBAAkBF,IAAlB,SAAf,CARF;AAWE;AACA;;AACA,UAAMI,MAAM,GAAGL,iGAAAI,KAAK,MAAL,CAAAA,KAAK,EACb,UAAC9Q,KAAD,EAAQ0E,IAAR;AAAA,eAAiBL,CAAC,CAACK,IAAD,CAAD,CAAQG,IAAR,CAAaD,KAAb,CAAjB;AAAA,OADa,CAAL,CAEZoM,OAFY,oBAGL,UAAA3S,IAAI;AAAA,eAAIA,IAAI,KAAK,EAAb;AAAA,OAHC,CAAf,CAbF;AAmBE;AACA;AACA;;;AACA,UAAI0S,MAAM,CAAC5Q,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAI8Q,SAAJ,CADuB;AAGvB;;AACA,YAAIrC,SAAJ,EAAe;AACbqC,UAAAA,SAAS,GAAGC,SAAS,CAACH,MAAM,CAAC,CAAD,CAAP,EAAY1M,CAAZ,CAArB;AACD,SAFD,MAEO;AAAA,2DACS0M,MADT;;AACJE,UAAAA,SADI;AAEN;;AAED;AAAA,aAAOA;AAAP;AACD;AAjCH;;AAIA,wDAA+B;AAAA;;AAAA;AA8B9B,KAlCD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCA,SAAO,IAAP;AACD;;;;;;;;AC7CD,SAASE,UAAT,CAAoBxM,KAApB,EAA2ByM,WAA3B,EAAwC;AACtC;AACA;AACA,MAAIzM,KAAK,CAAC6D,QAAN,GAAiBrI,MAAjB,GAA0BiR,WAA9B,EAA2C;AACzC,WAAO,KAAP;AACD,GALqC;;;AAOtC,MAAIC,aAAa,CAAC1M,KAAD,CAAjB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;AAGD;AACA;;;AACe,SAAS2M,oBAAT,CACbjN,CADa,EAEbkN,SAFa,EAKb;AAAA,MAFAH,WAEA,uEAFc,CAEd;AAAA,MADAI,QACA,uEADW,IACX;;AACA;AADA,+CAEuBD,SAFvB;AAAA;;AAAA;AAEA,wDAAkC;AAAA,UAAvBhM,QAAuB;AAChC,UAAMuL,KAAK,GAAGzM,CAAC,CAACkB,QAAD,CAAf,CADgC;AAIhC;;AACA,UAAIuL,KAAK,CAAC3Q,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAMwE,KAAK,GAAGN,CAAC,CAACyM,KAAK,CAAC,CAAD,CAAN,CAAf;;AAEA,YAAIK,UAAU,CAACxM,KAAD,EAAQyM,WAAR,CAAd,EAAoC;AAClC,cAAI1P,OAAO,SAAX;;AACA,cAAI8P,QAAJ,EAAc;AACZ9P,YAAAA,OAAO,GAAGiD,KAAK,CAACtG,IAAN,EAAV;AACD,WAFD,MAEO;AACLqD,YAAAA,OAAO,GAAGiD,KAAK,CAACwE,IAAN,EAAV;AACD;;AAED,cAAIzH,OAAJ,EAAa;AACX,mBAAOA,OAAP;AACD;AACF;AACF;AACF;AAvBD;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAO,IAAP;AACD;;AClDD;AACe,SAASwP,SAAT,CAAmB7S,IAAnB,EAAyBgG,CAAzB,EAA4B;AACzC;AACA;AACA,MAAMoN,SAAS,GAAGpN,CAAC,iBAAUhG,IAAV,aAAD,CAA0BA,IAA1B,EAAlB;AACA,SAAOoT,SAAS,KAAK,EAAd,GAAmBpT,IAAnB,GAA0BoT,SAAjC;AACD;;ACJc,SAASJ,aAAT,CAAuB1M,KAAvB,EAA8B;AAC3C,MAAMkE,OAAO,GAAGlE,KAAK,CAACkE,OAAN,GAAgBmI,OAAhB,EAAhB;;AACA,MAAMU,aAAa,GAAG9S,0CAAAiK,OAAO,MAAP,CAAAA,OAAO,EAAM,UAAA4B,MAAM,EAAI;AAAA;;AAC3C,QAAM1B,KAAK,GAAGC,QAAQ,CAACyB,MAAD,CAAtB;AAD2C,QAE5BkH,SAF4B,GAEV5I,KAFU;AAAA,QAEjB5B,EAFiB,GAEV4B,KAFU,CAEjB5B,EAFiB;;AAG3C,QAAMC,UAAU,oEAAMuK,SAAN,uBAAmBxK,EAAnB,CAAhB;;AACA,WAAOlG,8CAAAmG,UAAU,MAAV,CAAAA,UAAU,EAAU,SAAV,CAAjB;AACD,GAL4B,CAA7B;;AAOA,SAAOsK,aAAa,KAAKE,SAAzB;AACD;;ACZD;AACA;AACA;AAEe,SAASC,gBAAT,CAA0BlN,KAA1B,EAAiC;AAAA;;AAC9C,SAAOrG,qDAAAqG,KAAK,CAACtG,IAAN,mBAAoB8B,MAApB,IAA8B,GAArC;AACD;;ACJc,SAAS2R,WAAT,CAAqBzN,CAArB,EAAwB;AACrC,SAAOA,CAAC,CAACkC,cAAD,CAAD,CAAkBpG,MAAlB,GAA2B,CAAlC;AACD;;ACJc,SAAS6I,QAAT,CAAkBtE,IAAlB,EAAwB;AAAA,MAC7BqN,OAD6B,GACLrN,IADK,CAC7BqN,OAD6B;AAAA,MACpBC,UADoB,GACLtN,IADK,CACpBsN,UADoB;;AAGrC,MAAI,CAACD,OAAD,IAAYC,UAAhB,EAA4B;AAAA;;AAC1B,QAAMjJ,KAAK,GAAGjI,4FAAgBkR,UAAhB,kBAAmC,UAACjR,GAAD,EAAMf,KAAN,EAAgB;AAC/D,UAAM6E,IAAI,GAAGmN,UAAU,CAAChS,KAAD,CAAvB;AAEA,UAAI,CAAC6E,IAAI,CAAC8L,IAAN,IAAc,CAAC9L,IAAI,CAACD,KAAxB,EAA+B,OAAO7D,GAAP;AAE/BA,MAAAA,GAAG,CAAC8D,IAAI,CAAC8L,IAAN,CAAH,GAAiB9L,IAAI,CAACD,KAAtB;AACA,aAAO7D,GAAP;AACD,KAPa,EAOX,EAPW,CAAd;;AAQA,WAAOgI,KAAP;AACD;;AAED,SAAOgJ,OAAP;AACD;;AChBc,SAASxC,OAAT,CAAiB7K,IAAjB,EAAuBG,IAAvB,EAA6BoN,GAA7B,EAAkC;AAC/C,MAAIvN,IAAI,CAACqN,OAAT,EAAkB;AAChBrN,IAAAA,IAAI,CAACqN,OAAL,CAAalN,IAAb,IAAqBoN,GAArB;AACD,GAFD,MAEO,IAAIvN,IAAI,CAACsN,UAAT,EAAqB;AAC1BtN,IAAAA,IAAI,CAACwN,YAAL,CAAkBrN,IAAlB,EAAwBoN,GAAxB;AACD;;AAED,SAAOvN,IAAP;AACD;;ACRc,SAAS4F,QAAT,CAAkB5F,IAAlB,EAAwBqE,KAAxB,EAA+B;AAC5C,MAAIrE,IAAI,CAACqN,OAAT,EAAkB;AAChBrN,IAAAA,IAAI,CAACqN,OAAL,GAAehJ,KAAf;AACD,GAFD,MAEO,IAAIrE,IAAI,CAACsN,UAAT,EAAqB;AAAA;;AAC1B,WAAOtN,IAAI,CAACsN,UAAL,CAAgB7R,MAAhB,GAAyB,CAAhC,EAAmC;AACjCuE,MAAAA,IAAI,CAACyN,eAAL,CAAqBzN,IAAI,CAACsN,UAAL,CAAgB,CAAhB,EAAmBrB,IAAxC;AACD;;AAED,iGAAgB5H,KAAhB,kBAA+B,UAAAG,GAAG,EAAI;AACpCxE,MAAAA,IAAI,CAACwN,YAAL,CAAkBhJ,GAAlB,EAAuBH,KAAK,CAACG,GAAD,CAA5B;AACD,KAFD;AAGD;;AAED,SAAOxE,IAAP;AACD;;ACdM,IAAM0N,OAAO,GAAG,IAAInT,MAAJ,CAAW,WAAX,EAAwB,GAAxB,CAAhB;AACP,IAAMoT,QAAQ,GAAG,kBAAjB;AACO,IAAMC,QAAQ,GAAG,IAAIrT,MAAJ,WAAcoT,QAAd,GAA0B,GAA1B,CAAjB;AACA,IAAME,SAAS,GAAG,IAAItT,MAAJ,WACpBoT,QADoB,kCAEvB,GAFuB,CAAlB;AAKA,IAAMG,cAAc,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4BlR,IAA5B,CAAiC,GAAjC,CAAvB;;ACHP;AACA;AACA;AACA;;AACe,SAASmR,uBAAT,CAAiCpO,CAAjC,EAAoC;AACjDA,EAAAA,CAAC,CAAC,KAAD,CAAD,CAASG,IAAT,CAAc,UAACC,CAAD,EAAImF,GAAJ,EAAY;AAAA;;AACxB,QAAMb,KAAK,GAAGC,QAAQ,CAACY,GAAD,CAAtB;;AAEA,iGAAgBb,KAAhB,kBAA+B,UAAAlE,IAAI,EAAI;AACrC,UAAMD,KAAK,GAAGmE,KAAK,CAAClE,IAAD,CAAnB;;AAEA,UAAIA,IAAI,KAAK,QAAT,IAAqBuN,OAAO,CAACtT,IAAR,CAAa8F,KAAb,CAArB,IAA4C2N,SAAS,CAACzT,IAAV,CAAe8F,KAAf,CAAhD,EAAuE;AACrEP,QAAAA,CAAC,CAACuF,GAAD,CAAD,CAAO/E,IAAP,CAAY,QAAZ,EAAsBD,KAAtB;AACD,OAFD,MAEO,IACLC,IAAI,KAAK,KAAT,IACAA,IAAI,KAAK,QADT,IAEAuN,OAAO,CAACtT,IAAR,CAAa8F,KAAb,CAFA,IAGA0N,QAAQ,CAACxT,IAAT,CAAc8F,KAAd,CAJK,EAKL;AACAP,QAAAA,CAAC,CAACuF,GAAD,CAAD,CAAO/E,IAAP,CAAY,KAAZ,EAAmBD,KAAnB;AACD;AACF,KAbD;AAcD,GAjBD;AAmBA,SAAOP,CAAP;AACD;;AC5BD,SAASqO,SAAT,CAAmB1S,KAAnB,EAA0B0E,IAA1B,EAAgC;AAC9B,SAAOA,IAAI,CAACmM,IAAL,KAAc,SAArB;AACD;;AAED,SAAS8B,aAAT,CAAuBtO,CAAvB,EAA0B;AAAA;;AACxB,+GAAAA,CAAC,CAACuO,IAAF,oBACQ,GADR,EAEGxJ,QAFH,mBAGUsJ,SAHV,EAIGrL,MAJH;;AAMA,SAAOhD,CAAP;AACD;;AAEc,SAASwO,KAAT,CAAexO,CAAf,EAAkB;AAC/BA,EAAAA,CAAC,CAACmO,cAAD,CAAD,CAAkBnL,MAAlB;AAEAhD,EAAAA,CAAC,GAAGsO,aAAa,CAACtO,CAAD,CAAjB;AACA,SAAOA,CAAP;AACD;;ACdD,IAAMyO,QAAQ,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,EAAAA,MARS,kBAQFtU,GARE,EAQGuU,gBARH,EAQqBzS,SARrB,EAQ8C;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAdgD,cAAAA,OAAc,0EAAJ,EAAI;;AAAA,mBAGvDyP,gBAHuD;AAAA;AAAA;AAAA;;AAInDC,cAAAA,aAJmD,GAInC;AACpB9P,gBAAAA,aAAa,EAAE,IADK;AAEpBC,gBAAAA,UAAU,EAAE,GAFQ;AAGpBG,gBAAAA,OAAO,EAAE;AACP,kCAAgB,WADT;AAEP,oCAAkB;AAFX;AAHW,eAJmC;AAazD2P,cAAAA,MAAM,GAAG;AACPlQ,gBAAAA,IAAI,EAAEgQ,gBADC;AAEPjQ,gBAAAA,QAAQ,EAAEkQ,aAFH;AAGPE,gBAAAA,cAAc,EAAE;AAHT,eAAT;AAbyD;AAAA;;AAAA;AAAA;AAAA,qBAmB1CzP,aAAa,CAACjF,GAAD,EAAM8B,SAAN,EAAiBgD,OAAjB,CAnB6B;;AAAA;AAmBzD2P,cAAAA,MAnByD;;AAAA;AAAA,mBAsBvDA,MAAM,CAAC5P,KAtBgD;AAAA;AAAA;AAAA;;AAuBzD4P,cAAAA,MAAM,CAACE,MAAP,GAAgB,IAAhB;AAvByD,+CAwBlDF,MAxBkD;;AAAA;AAAA,+CA2BpD,KAAI,CAACG,WAAL,CAAiBH,MAAjB,CA3BoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B5D,GApCc;AAsCfG,EAAAA,WAtCe,6BAsCkD;AAAA,QAA7C3R,OAA6C,QAAnDsB,IAAmD;AAAA,QAApCD,QAAoC,QAApCA,QAAoC;AAAA,mCAA1BoQ,cAA0B;AAAA,QAA1BA,cAA0B,oCAAT,KAAS;AAAA,gCAClBpQ,QAAQ,CAACQ,OADS,CACvD,cADuD;AAAA,QACvCC,WADuC,sCACzB,EADyB;AAI/D;;AACA,QAAI,CAACvC,8CAAAuC,WAAW,MAAX,CAAAA,WAAW,EAAU,MAAV,CAAZ,IAAiC,CAACvC,8CAAAuC,WAAW,MAAX,CAAAA,WAAW,EAAU,MAAV,CAAjD,EAAoE;AAClE,YAAM,IAAIH,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAIgB,CAAC,GAAG,KAAKiP,SAAL,CAAe;AAAE5R,MAAAA,OAAO,EAAPA,OAAF;AAAW8B,MAAAA,WAAW,EAAXA,WAAX;AAAwB2P,MAAAA,cAAc,EAAdA;AAAxB,KAAf,CAAR;;AAEA,QAAI9O,CAAC,CAACuO,IAAF,GAASpK,QAAT,GAAoBrI,MAApB,KAA+B,CAAnC,EAAsC;AACpC,YAAM,IAAIkD,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAEDgB,IAAAA,CAAC,GAAGU,iBAAiB,CAACV,CAAD,CAArB;AACAA,IAAAA,CAAC,GAAGoO,uBAAuB,CAACpO,CAAD,CAA3B;AACAA,IAAAA,CAAC,GAAGwO,KAAK,CAACxO,CAAD,CAAT;AAEA,WAAOA,CAAP;AACD,GA1Dc;AA4DfiP,EAAAA,SA5De,4BA4D6C;AAAA,QAAhD5R,OAAgD,SAAhDA,OAAgD;AAAA,QAAvC8B,WAAuC,SAAvCA,WAAuC;AAAA,qCAA1B2P,cAA0B;AAAA,QAA1BA,cAA0B,qCAAT,KAAS;;AAC1D,QAAIA,cAAJ,EAAoB;AAClB,aAAOhR,2BAAO,CAACoR,IAAR,CAAa7R,OAAb,CAAP;AACD;;AAED,QAAMK,QAAQ,GAAGF,WAAW,CAAC2B,WAAD,CAA5B;AACA,QAAIgQ,cAAc,GAAGxR,yBAAK,CAACyR,MAAN,CAAa/R,OAAb,EAAsBK,QAAtB,CAArB;AACA,QAAIsC,CAAC,GAAGlC,2BAAO,CAACoR,IAAR,CAAaC,cAAb,CAAR,CAP0D;;AAS1D,QAAME,mBAAmB,GAAGvR,2BAAO,CAACC,OAAR,GACxB,+BADwB,GAExB,iCAFJ;AAGA,QAAMuR,eAAe,GACnBtP,CAAC,CAACqP,mBAAD,CAAD,CAAuB7O,IAAvB,CAA4B,SAA5B,KACAR,CAAC,CAAC,eAAD,CAAD,CAAmBQ,IAAnB,CAAwB,SAAxB,CAFF;AAGA,QAAM+O,cAAc,GAAG/R,WAAW,CAAC8R,eAAD,CAAlC,CAf0D;;AAkB1D,QAAIA,eAAe,IAAIC,cAAc,KAAK7R,QAA1C,EAAoD;AAClDyR,MAAAA,cAAc,GAAGxR,yBAAK,CAACyR,MAAN,CAAa/R,OAAb,EAAsBkS,cAAtB,CAAjB;AACAvP,MAAAA,CAAC,GAAGlC,2BAAO,CAACoR,IAAR,CAAaC,cAAb,CAAJ;AACD;;AAED,WAAOnP,CAAP;AACD;AApFc,CAAjB;;wECPyBwP;;AAAV,SAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBC,UAAAA,KAAhB,2DAAwB,CAAxB;AAA2BC,UAAAA,GAA3B,2DAAiC,CAAjC;;AAAA;AAAA,gBACND,KAAK,IAAIC,GADH;AAAA;AAAA;AAAA;;AAAA;AAEX,iBAAOD,KAAK,IAAI,CAAhB;;AAFW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;ACAf;AACe,SAASE,WAAT,OAAmC;AAAA,MAAZhK,QAAY,QAAZA,QAAY;AAChD;AACA,SAAO,CAAC,CAACA,QAAT;AACD;;ACJD,IAAMiK,KAAK,GAAG,SAARA,KAAQ,CAACC,SAAD,EAAYC,OAAZ;AAAA,SACZrT,4CAAAqT,OAAO,MAAP,CAAAA,OAAO,EAAQ,UAACpT,GAAD,EAAMqT,MAAN,EAAiB;AAC9BrT,IAAAA,GAAG,CAACqT,MAAD,CAAH,GAAcF,SAAd;AACA,WAAOnT,GAAP;AACD,GAHM,EAGJ,EAHI,CADK;AAAA,CAAd;;AAMe,SAASsT,qBAAT,CAA+BH,SAA/B,EAA0C;AAAA;;AACvD,SAAOA,SAAS,CAACI,gBAAV,GACHL,KAAK,CAACC,SAAD,0DAAaA,SAAS,CAACE,MAAvB,yDAAkCF,SAAS,CAACI,gBAA5C,GADF,GAEHL,KAAK,CAACC,SAAD,EAAY,CAACA,SAAS,CAACE,MAAX,CAAZ,CAFT;AAGD;;ACRM,IAAMG,aAAa,GAAG,EAAtB;AAEQ,SAASC,YAAT,CAAsBN,SAAtB,EAAiC;AAC9C,MAAI,CAACA,SAAD,IAAc,CAACA,SAAS,CAACE,MAA7B,EAAqC;AACnC,WAAO;AACL9Q,MAAAA,KAAK,EAAE,IADF;AAELa,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,qCAAcoQ,aAAd,EAA6BF,qBAAqB,CAACH,SAAD,CAAlD;;AAEA,SAAOK,aAAP;AACD;;ACfM,IAAME,gBAAgB,GAAG;AAC9BL,EAAAA,MAAM,EAAE,cADsB;AAE9B1S,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA6P,IAAAA,SAAS,EAAE,CAAC,wBAAD,CAJJ;AAMP;AACAsB,IAAAA,KAAK,EAAE,EAPA;AASP;AACA6B,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAVL,GAFqB;AAiB9BC,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADL,GAjBsB;AAqB9BzC,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GArBuB;AAyB9BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADG;AAzBc,CAAzB;;ACAA,IAAMuD,cAAc,GAAG;AAC5BV,EAAAA,MAAM,EAAE,WADoB;AAE5B1S,EAAAA,OAAO,EAAE;AACP;AACA6P,IAAAA,SAAS,EAAE,CAAC,qBAAD,EAAwB,cAAxB,EAAwC,iBAAxC,CAFJ;AAIP;AACAsB,IAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,uBAAR,CALA;AAOP;AACA;AACA;AACA;AACA;AACA;AACA6B,IAAAA,UAAU,EAAE;AACV;AACAK,MAAAA,EAAE,EAAE,IAFM;AAIV;AACAJ,MAAAA,QAAQ,EAAE,kBAAChQ,KAAD,EAAQN,CAAR,EAAc;AACtB,YAAM2Q,SAAS,GAAG3Q,CAAC,CAACjC,OAAF,GAAYiC,CAAC,CAACM,KAAK,CAACtG,IAAN,EAAD,CAAb,GAA8BsG,KAAK,CAAC6D,QAAN,EAAhD;;AACA,YACEwM,SAAS,CAAC7U,MAAV,KAAqB,CAArB,IACA6U,SAAS,CAACvS,GAAV,CAAc,CAAd,MAAqBmP,SADrB,IAEAoD,SAAS,CAACvS,GAAV,CAAc,CAAd,EAAiBmF,OAAjB,CAAyBxH,WAAzB,OAA2C,KAH7C,EAIE;AACA,iBAAO,QAAP;AACD;;AAED,eAAO,IAAP;AACD;AAhBS;AAbL,GAFmB;AAmC5B0O,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,uBAAD,EAA0B,qBAA1B,EAAiD,IAAjD;AADN,GAnCqB;AAuC5BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,aAAD,EAAgB,sBAAhB;AADL,GAvCoB;AA2C5B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADR,GA3CuB;AA+C5BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,kCAAD,EAAqC,UAArC,CADS,EAET,wBAFS;AADG;AA/CY,CAAvB;;ACAA,IAAM2D,kBAAkB,GAAG;AAChCd,EAAAA,MAAM,EAAE,eADwB;AAEhC1S,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKP;AACAT,IAAAA,UAAU,EAAE;AACV,sBAAgB,oBAAA/P,KAAK,EAAI;AACvB,YAAMkI,OAAO,GAAGlI,KAAK,CAACkE,OAAN,CAAc,UAAd,CAAhB,CADuB;;AAGvB,YAAIgE,OAAO,CAACrE,QAAR,CAAiB,KAAjB,EAAwBrI,MAAxB,KAAmC,CAAvC,EAA0C;AACxC0M,UAAAA,OAAO,CAACuI,OAAR,CAAgBzQ,KAAhB;AACD;AACF,OAPS;AAQV,0BAAoB,YARV;AASV,kBAAY;AATF,KANL;AAkBP;AACAkO,IAAAA,KAAK,EAAE,CACL,iBADK,EAEL,oCAFK,EAGL,MAHK,EAIL,SAJK;AAnBA,GAFuB;AA6BhC+B,EAAAA,MAAM,EAAE,wBA7BwB;AA+BhC9F,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD;AADN,GA/ByB;AAmChCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADG;AAnCgB,CAA3B;;ACAA,IAAM8D,gBAAgB,GAAG;AAC9BjB,EAAAA,MAAM,EAAE,aADsB;AAG9B1S,EAAAA,OAAO,EAAE;AACPgT,IAAAA,UAAU,EAAE;AACV;AACA;AACA;AACA;AACA,+BAAyB,2BAAC/P,KAAD,EAAQN,CAAR,EAAc;AACrC,YAAMiR,MAAM,GAAG1W,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,QAAN,CAApB;;AACA,YAAM4Q,eAAe,GAAGlR,CAAC,CAAC,iCAAD,CAAzB;AACAkR,QAAAA,eAAe,CAAC9H,MAAhB,CAAuB6H,MAAvB;AACA3Q,QAAAA,KAAK,CAACwD,WAAN,CAAkBoN,eAAlB;AACD,OAVS;AAYV;AACA;AACAC,MAAAA,CAAC,EAAE;AAdO,KADL;AAkBPjE,IAAAA,SAAS,EAAE,CAAC,uBAAD,CAlBJ;AAoBP4D,IAAAA,cAAc,EAAE,KApBT;AAsBPtC,IAAAA,KAAK,EAAE,CAAC,qBAAD,EAAwB,QAAxB,EAAkC,sBAAlC;AAtBA,GAHqB;AA4B9B+B,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kCAAD;AADL,GA5BsB;AAgC9BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4CAAD,EAA+C,cAA/C,CAAD;AADG;AAhCc,CAAzB;;ACAA,IAAMkE,gBAAgB,GAAG;AAC9BrB,EAAAA,MAAM,EAAE,iBADsB;AAG9BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,eADS,EAET,yBAFS,EAGT,aAHS,EAIT,sBAJS;AADN,GAHuB;AAY9BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,qBAAD,EAAwB,OAAxB,CADS,EAET,WAFS,EAGT,SAHS,EAIT,CAAC,kBAAD,EAAqB,OAArB,CAJS;AADL,GAZsB;AAqB9B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,cAAD,EAAiB,6BAAjB,EAAgD,eAAhD,CADJ;AAGPmD,IAAAA,UAAU,EAAE;AACV,oBAAc,kBAAA/P,KAAK,EAAI;AACrB,YAAI+Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAV;AACA,YAAM2E,KAAK,GAAG,GAAd;AAEAkM,QAAAA,GAAG,GAAGA,GAAG,CAACnX,OAAJ,CAAY,UAAZ,EAAwBiL,KAAxB,CAAN;AACA7E,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkB6Q,GAAlB;AACD;AAPS,KAHL;AAaP7C,IAAAA,KAAK,EAAE,CACL,KADK,EAEL,qBAFK,EAGL,2BAHK,EAIL,kBAJK,EAKL,mBALK,EAML,QANK,EAOL,kBAPK,EAQL,SARK,EASL,WATK,EAUL,eAVK,EAWL,YAXK,EAYL,qBAZK;AAbA,GArBqB;AAkD9BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD;AADG,GAlDc;AAsD9BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAtDc;AA0D9B0D,EAAAA,GAAG,EAAE,IA1DyB;AA4D9BW,EAAAA,aAAa,EAAE,IA5De;AA8D9BC,EAAAA,OAAO,EAAE;AA9DqB,CAAzB;;ACAP;AACA;AACO,IAAMC,oBAAoB,GAAG;AAClC1B,EAAAA,MAAM,EAAE,qBAD0B;AAElCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,wBAAP;AADN,GAF2B;AAMlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD,EAAmC,mBAAnC;AADL,GAN0B;AAUlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,eAAZ,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CACL,cADK,EAEL,UAFK,EAGL,0BAHK,EAIL,4BAJK,EAKL,sBALK,EAML,iBANK,EAOL,uBAPK,EAQL,gBARK;AAVA,GAVyB;AAgClCoC,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,0BAAD,EAA6B,OAA7B,CAAD;AADR,GAhC6B;AAoClCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,UAAnC,CAAD;AADG,GApCkB;AAwClCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,KAAxB,CAAD;AADG,GAxCkB;AA4ClCqE,EAAAA,aAAa,EAAE,IA5CmB;AA8ClCC,EAAAA,OAAO,EAAE;AA9CyB,CAA7B;;ACFP;AACA;AACA;AACO,IAAME,kBAAkB,GAAG;AAChC3B,EAAAA,MAAM,EAAE,mBADwB;AAEhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,6BADS,EAET,iCAFS,EAGT,CAAC,uBAAD,EAA0B,OAA1B,CAHS;AADN,GAFyB;AAUhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,qBAAD,EAAwB,OAAxB,CADS,EAET,mDAFS,EAGT,2DAHS;AADL,GAVwB;AAkBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,8BADS,EAET,gCAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE,EARL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,wCAAD;AAbA,GAlBuB;AAkChCgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,mCADS,EAET,CAAC,sBAAD,EAAyB,OAAzB,CAFS,CADG;AAKdyE,IAAAA,QAAQ,EAAE;AALI,GAlCgB;AA0ChCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA1CgB;AA8ChC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,yBAAD,EAA4B,iCAA5B;AADR,GA9C2B;AAkDhCqE,EAAAA,aAAa,EAAE,IAlDiB;AAoDhCC,EAAAA,OAAO,EAAE;AApDuB,CAA3B;;ACHP;AACA;AACA;AACO,IAAMI,cAAc,GAAG;AAC5B7B,EAAAA,MAAM,EAAE,eADoB;AAE5BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,wBADS,EAET,eAFS;AAAA;AADN,GAFqB;AAU5BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,qBAAD,EAAwB,OAAxB,CADS,EAET,iBAFS;AAAA;AADL,GAVoB;AAkB5B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,8BADS,EAET,iBAFS;AAAA,KADJ;AAOP;AACA;AACAmD,IAAAA,UAAU,EAAE,EATL;AAWP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,kBAAD,EAAqB,sBAArB;AAdA,GAlBmB;AAmC5BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,mCADS,EAET,CAAC,gCAAD,EAAmC,OAAnC,CAFS;AADG,GAnCY;AA0C5BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA1CY;AA8C5B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GA9CuB;AAkD5BqE,EAAAA,aAAa,EAAE,IAlDa;AAoD5BC,EAAAA,OAAO,EAAE;AApDmB,CAAvB;;ACHP;AACA;AACA;AACO,IAAMK,YAAY,GAAG;AAC1B9B,EAAAA,MAAM,EAAE,aADkB;AAE1BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,IADS;AAAA;AADN,GAFmB;AAS1BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,qBADS;AAAA;AADL,GATkB;AAgB1B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,cADS;AAAA,KADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE,EARL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,cAAD;AAbA,GAhBiB;AAgC1BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,WAAD;AADG,GAhCU;AAoC1BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE;AADG,GApCU;AAwC1B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GAxCqB;AA4C1BqE,EAAAA,aAAa,EAAE,IA5CW;AA8C1BC,EAAAA,OAAO,EAAE;AA9CiB,CAArB;;ACHP;AACA;AACA;AACO,IAAMM,cAAc,GAAG;AAC5B/B,EAAAA,MAAM,EAAE,eADoB;AAE5BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,sBADS;AAAA;AADN,GAFqB;AAS5BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,oBADS;AAAA;AADL,GAToB;AAgB5B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE;AAET,qBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE,EARL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAbA,GAhBmB;AAgC5BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,UAAxB,CAAD;AADG,GAhCY;AAoC5BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GApCY;AAwC5B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAxCuB;AA8C5BqE,EAAAA,aAAa,EAAE,IA9Ca;AAgD5BC,EAAAA,OAAO,EAAE;AAhDmB,CAAvB;;ACHP;AACA;AACA;AACO,IAAMO,iBAAiB,GAAG;AAC/BhC,EAAAA,MAAM,EAAE,kBADuB;AAE/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,qBADS;AAAA;AADN,GAFwB;AAS/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,gCADS,EAET,gBAFS;AAAA;AADL,GATuB;AAiB/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,+BAAD,EAAkC,gBAAlC,CADS,EAET,gBAFS,CADJ;AAMP4D,IAAAA,cAAc,EAAE,KANT;AAQP;AACA;AACAT,IAAAA,UAAU,EAAE;AACV2B,MAAAA,EAAE,EAAE,GADM;AAGV,0CAAoC,yCAAA1R,KAAK,EAAI;AAC3C,YAAIA,KAAK,CAAC2R,GAAN,CAAU,KAAV,KAAoB3R,KAAK,CAAC2R,GAAN,CAAU,+BAAV,CAAxB,EAAoE;AAClE,iBAAO,QAAP;AACD;;AAED,eAAO,IAAP;AACD,OATS;AAWV,2EACE;AAZQ,KAVL;AAyBP;AACA;AACA;AACAzD,IAAAA,KAAK,EAAE,CACL,oBADK,EAEL,uEAFK,EAGL,YAHK,EAIL,QAJK;AA5BA,GAjBsB;AAqD/BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADG,GArDe;AAyD/BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAzDe;AA6D/B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GA7D0B;AAiE/BqE,EAAAA,aAAa,EAAE,IAjEgB;AAmE/BC,EAAAA,OAAO,EAAE;AAnEsB,CAA1B;;ACHP;AACA;AACA;AACO,IAAMU,cAAc,GAAG;AAC5BnC,EAAAA,MAAM,EAAE,kBADoB;AAE5BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,gBADS;AAAA;AADN,GAFqB;AAS5BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,eADS,EAET,KAFS;AAAA;AADL,GAToB;AAiB5B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,eADS,EAET,gBAFS;AAAA,KADJ;AAOP;AACA;AACAmD,IAAAA,UAAU,EAAE,EATL;AAWP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAdA,GAjBmB;AAkC5BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAlCY;AAsC5BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAtCY;AA0C5B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GA1CuB;AA8C5BqE,EAAAA,aAAa,EAAE,IA9Ca;AAgD5BC,EAAAA,OAAO,EAAE;AAhDmB,CAAvB;;ACHP;AACA;AACA;AACO,IAAMW,qBAAqB,GAAG;AACnCpC,EAAAA,MAAM,EAAE,sBAD2B;AAEnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CACT,eADS;AAAA;AADN,GAF4B;AASnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,qBAAD,EAAwB,OAAxB,CADS;AAAA;AADL,GAT2B;AAgBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE;AAET,uBAFS,EAGT,kBAHS,CADJ;AAOP;AACA;AACAmD,IAAAA,UAAU,EAAE,EATL;AAWP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAdA,GAhB0B;AAiCnC8C,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjCmB;AAqCnCqE,EAAAA,aAAa,EAAE,IArCoB;AAuCnCC,EAAAA,OAAO,EAAE;AAvC0B,CAA9B;;ACHP;AACA;AACA;AACO,IAAMY,iBAAiB,GAAG;AAC/BrC,EAAAA,MAAM,EAAE,kBADuB;AAE/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE;AAET,KAAC,uBAAD,EAA0B,OAA1B,CAFS;AADN,GAFwB;AAS/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oCAAD;AADL,GATuB;AAa/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE;AAET,yBAFS,EAGT,gBAHS,EAIT,aAJS,EAKT,aALS,CADJ;AASP;AACA;AACAmD,IAAAA,UAAU,EAAE,EAXL;AAaP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,YAAD;AAhBA,GAbsB;AAgC/BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,+CAAD,EAAkD,UAAlD,CAAD;AADG,GAhCe;AAoC/BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE;AAET,KAAC,uBAAD,EAA0B,OAA1B,CAFS;AADG,GApCe;AA2C/B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GA3C0B;AA+C/BqE,EAAAA,aAAa,EAAE,IA/CgB;AAiD/BC,EAAAA,OAAO,EAAE;AAjDsB,CAA1B;;ACHA,IAAMa,iBAAiB,GAAG;AAC/BtC,EAAAA,MAAM,EAAE,cADuB;AAG/BE,EAAAA,gBAAgB,EAAE,CAChB,aADgB,EAEhB,gBAFgB,EAGhB,YAHgB,EAIhB,aAJgB,EAKhB,cALgB,EAMhB,WANgB,EAOhB,YAPgB,EAQhB,eARgB,EAShB,kBATgB,EAUhB,cAVgB,EAWhB,aAXgB,EAYhB,gBAZgB,EAahB,kBAbgB,CAHa;AAmB/BxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD;AADN,GAnBwB;AAuB/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAvBuB;AA2B/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,EAAkB,gBAAlB,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,0DAAoD,8CAAA/P,KAAK,EAAI;AAC3D,YAAMgS,SAAS,GAAGhS,KAAK,CAACE,IAAN,CAAW,IAAX,EAAiBhF,KAAjB,CAAuB,UAAvB,EAAmC,CAAnC,CAAlB;AACA8E,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,0CAAmD8R,SAAnD;AACD;AAJS,KALL;AAYP;AACA;AACA;AACA9D,IAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,WAAf;AAfA,GA3BsB;AA6C/BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,wBAAD,EAA2B,UAA3B,CAAD;AADG,GA7Ce;AAiD/BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjDe;AAqD/B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GArD0B;AA2D/BqE,EAAAA,aAAa,EAAE;AACbrE,IAAAA,SAAS,EAAE;AAAA;AADE,GA3DgB;AAiE/BsE,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE;AAAA;AADJ;AAjEsB,CAA1B;;ACAP;AACA;AACA;AACO,IAAMqF,sBAAsB,GAAG;AACpCxC,EAAAA,MAAM,EAAE,uBAD4B;AAEpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADN,GAF6B;AAMpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADL,GAN4B;AAUpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,2BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA,GAV2B;AAuBpCgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,8BAAD,EAAiC,OAAjC,CAAD;AADG,GAvBoB;AA2BpCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA3BoB;AA+BpC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GA/B+B;AAmCpCqE,EAAAA,aAAa,EAAE;AACbrE,IAAAA,SAAS,EAAE;AAAA;AADE,GAnCqB;AAyCpCsE,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE;AAAA;AADJ;AAzC2B,CAA/B;;ACHP;AACA;AACA;AACO,IAAMsF,yBAAyB,GAAG;AACvCzC,EAAAA,MAAM,EAAE,0BAD+B;AAEvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD;AADN,GAFgC;AAMvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADL,GAN+B;AAUvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,wDAAkD,+CAAC/P,KAAD,EAAQN,CAAR,EAAc;AAC9D,YAAMyS,IAAI,GAAGC,IAAI,CAACtW,KAAL,CAAWkE,KAAK,CAACE,IAAN,CAAW,YAAX,CAAX,CAAb;AAD8D,YAEtD6Q,GAFsD,GAE9CoB,IAAI,CAACE,OAAL,CAAa,CAAb,CAF8C,CAEtDtB,GAFsD;AAG9D,YAAMpM,IAAI,GAAGjF,CAAC,CAAC,SAAD,CAAD,CAAaQ,IAAb,CAAkB,KAAlB,EAAyB6Q,GAAzB,CAAb;AACA/Q,QAAAA,KAAK,CAACwD,WAAN,CAAkBmB,IAAlB;AACD;AANS,KALL;AAcP;AACA;AACA;AACAuJ,IAAAA,KAAK,EAAE;AAjBA,GAV8B;AA8BvCgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,kCAAD,EAAqC,UAArC,CAAD;AADG,GA9BuB;AAkCvCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAlCuB;AAsCvC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GAtCkC;AA0CvCqE,EAAAA,aAAa,EAAE;AACbrE,IAAAA,SAAS,EAAE;AAAA;AADE,GA1CwB;AAgDvCsE,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE;AAAA;AADJ;AAhD8B,CAAlC;;ACHA,IAAM0F,eAAe,GAAG;AAC7B7C,EAAAA,MAAM,EAAE,YADqB;AAG7BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,CAAC,uBAAD,EAA0B,OAA1B,CAAP;AADN,GAHsB;AAO7BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPqB;AAW7B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,SAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV;AACAwC,MAAAA,MAAM,EAAE,gBAAAvS,KAAK,EAAI;AACf,YAAMwS,IAAI,GAAG,kEAAb;AACA,YAAMC,KAAK,GAAGC,kBAAkB,CAAC1S,KAAK,CAACE,IAAN,CAAW,gBAAX,CAAD,CAAhC;AACA,YAAMgI,OAAO,GAAGlI,KAAK,CAACkE,OAAN,CAAc,QAAd,CAAhB;;AAEA,YAAIsO,IAAI,CAACrY,IAAL,CAAUsY,KAAV,CAAJ,EAAsB;AAAA,6BACGA,KAAK,CAAC3X,KAAN,CAAY0X,IAAZ,CADH;AAAA;AAAA,cACb1S,CADa;AAAA,cACVkS,SADU;;;AAEpBhS,UAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,0CAAmD8R,SAAnD;;AACA,cAAMW,QAAQ,GAAG1Y,0CAAAiO,OAAO,MAAP,CAAAA,OAAO,EAAM,YAAN,CAAxB;;AACAA,UAAAA,OAAO,CAAC0K,KAAR,GAAgB9J,MAAhB,CAAuB,CAAC9I,KAAD,EAAQ2S,QAAR,CAAvB;AACA;AACD,SAXc;;;AAcfzK,QAAAA,OAAO,CAACxF,MAAR;AACD,OAjBS;AAmBV;AACAmQ,MAAAA,MAAM,EAAE,gBAAA7S,KAAK,EAAI;AAAA;;AACf;AACA,YAAI/F,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,QAAN,CAAL,CAAqBxE,MAArB,GAA8B,CAAlC,EAAqC;;AAErC,YAAMmJ,IAAI,GAAG1H,gGAAA+C,KAAK,MAAL,CAAAA,KAAK,EAAM,KAAN,CAAL,iBAAwB,CAAC,CAAzB,EAA4B,CAA5B,CAAb;;AACA,YAAM2S,QAAQ,GAAG1Y,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,YAAN,CAAtB;;AAEAA,QAAAA,KAAK,CAAC4S,KAAN,GAAc9J,MAAd,CAAqB,CAACnE,IAAD,EAAOgO,QAAP,CAArB;AACD,OA5BS;AA8BV;AACA;AACA1N,MAAAA,GAAG,EAAE,aAAAjF,KAAK,EAAI;AACZ,YAAM6E,KAAK,GAAG7J,8BAASgF,KAAK,CAACE,IAAN,CAAW,OAAX,CAAT,EAA8B,EAA9B,CAAd;;AACA,YAAI2E,KAAK,GAAG,GAAZ,EAAiB7E,KAAK,CAAC0C,MAAN;AAClB;AAnCS,KALL;AA2CP;AACA;AACA;AACAwL,IAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,KAAT;AA9CA,GAXoB;AA4D7BgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GA5Da;AAgE7BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhEa;AAoE7B0D,EAAAA,GAAG,EAAE,IApEwB;AAsE7BW,EAAAA,aAAa,EAAE;AACbrE,IAAAA,SAAS,EAAE;AAAA;AADE,GAtEc;AA4E7BsE,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE;AAAA;AADJ;AA5EoB,CAAxB;;ACAA,IAAMkG,kBAAkB,GAAG;AAChCrD,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,wBAAD,EAA2B,IAA3B,EAAiC,WAAjC;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE,WAPwB;AAShCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,sBAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GATgB;AAehCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAf2B;AAqBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBgB;AAyBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,EAAqB,gBAArB,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,gBAAD;AAVA;AAzBuB,CAA3B;;ACAA,IAAM6E,6BAA6B,GAAG;AAC3CtD,EAAAA,MAAM,EAAE,wBADmC;AAG3CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,0BAAP;AADN,GAHoC;AAO3CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADL,GAPmC;AAW3CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6CAAD,EAAgD,SAAhD,CAAD;AADG,GAX2B;AAe3C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GAfsC;AAmB3CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnB2B;AAuB3C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,4BAAsB,0BAAA/P,KAAK,EAAI;AAC7B,YAAIA,KAAK,CAAC2R,GAAN,CAAU,kBAAV,EAA8BnW,MAA9B,GAAuC,CAA3C,EAA8C;AAC5C,iBAAO,QAAP;AACD;;AAEDwE,QAAAA,KAAK,CAAC0C,MAAN;AACA,eAAO,IAAP;AACD,OARS;AASV,qBAAe;AATL,KALL;AAiBP;AACA;AACA;AACAwL,IAAAA,KAAK,EAAE,CAAC,oBAAD,EAAuB,yBAAvB;AApBA;AAvBkC,CAAtC;;ACAA,IAAM8E,6BAA6B,GAAG;AAC3CvD,EAAAA,MAAM,EAAE,wBADmC;AAG3CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADN,GAHoC;AAO3CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iCAAD;AADL,GAPmC;AAW3CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,oCAAD,EAAuC,OAAvC,CADS,EAET,CAAC,qCAAD,EAAwC,OAAxC,CAFS;AADG,GAX2B;AAkB3C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADR,GAlBsC;AAsB3CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAtB2B;AA0B3C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKP;AACA;AACAT,IAAAA,UAAU,EAAE,EAPL;AASP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CACL,aADK,EAEL,YAFK,EAGL,cAHK,EAIL,cAJK,EAKL,oBALK,EAML,kBANK;AAZA;AA1BkC,CAAtC;;ACAA,IAAM+E,uBAAuB,GAAG;AACrCxD,EAAAA,MAAM,EAAE,iBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qBAAD,EAAwB,kCAAxB;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD,EAAoB,mCAApB;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXqB;AAiBrCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADR,GAjBgC;AAqBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBqB;AAyBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,gBAAD,EAAmB,kBAAnB,CADS,EAET,CAAC,eAAD,EAAkB,mCAAlB,CAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE,EARL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,OAAD;AAbA;AAzB4B,CAAhC;;ACAA,IAAMgF,oBAAoB,GAAG;AAClCzD,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,WAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,mBAAD,EAAsB,OAAtB,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXkB;AAiBlCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,eAAD;AADR,GAjB6B;AAqBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBkB;AAyBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAVA;AAzByB,CAA7B;;ACAA,IAAMiF,uBAAuB,GAAG;AACrC1D,EAAAA,MAAM,EAAE,kBAD6B;AAGrCE,EAAAA,gBAAgB,EAAE,CAAC,iBAAD,CAHmB;AAKrCxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAL8B;AASrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAT6B;AAarCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAbqB;AAiBrC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,UAAD;AADR,GAjBgC;AAqBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBqB;AAyBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE;AAET,KAAC,wBAAD,EAA2B,gBAA3B,EAA6C,kBAA7C,CAFS;AAIT,KAAC,gBAAD,EAAmB,kBAAnB,CAJS;AAMT,2BANS;AAQT,yBARS,CADJ;AAYP;AACAmD,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,kBAAAhQ,KAAK,EAAI;AACjB,YAAMqQ,SAAS,GAAGrQ,KAAK,CAAC6D,QAAN,EAAlB;;AACA,YAAIwM,SAAS,CAAC7U,MAAV,KAAqB,CAArB,IAA0B6U,SAAS,CAACvS,GAAV,CAAc,CAAd,EAAiBmF,OAAjB,KAA6B,KAA3D,EAAkE;AAChE,iBAAO,MAAP;AACD;;AAED,eAAO,IAAP;AACD;AARS,KAbL;AAwBP;AACA;AACA;AACAiL,IAAAA,KAAK,EAAE,CACL,QADK,EAEL,qBAFK;AAAA;AA3BA;AAzB4B,CAAhC;;ACAA,IAAMkF,kBAAkB,GAAG;AAChC3D,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,IAAnB;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,2BAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,sBAAD,EAAyB,OAAzB,CAAD;AADG,GAXgB;AAehCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfgB;AAmBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE;AAET,KAAC,0BAAD,EAA6B,eAA7B,CAFS;AAIT,mBAJS,EAKT,6BALS,CADJ;AASP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,gEAA0D,wDAAA/P,KAAK,EAAI;AACjE,YAAMqT,KAAK,GAAGrT,KAAK,CAACwE,IAAN,EAAd;;AACA,YAAI6O,KAAJ,EAAW;AACT,iBAAO,GAAP;AACD;;AAED,eAAO,IAAP;AACD,OARS;AAUV;AACA;AACA,6BAAuB,2BAAArT,KAAK,EAAI;AAC9B,YAAIA,KAAK,CAAC2R,GAAN,CAAU,GAAV,CAAJ,EAAoB;AAAA;;AAClB,cACEhY,qDAAAqG,KAAK,CAACtG,IAAN,uBACAC,gGAAAqG,KAAK,MAAL,CAAAA,KAAK,EACG,GADH,CAAL,CAEGtG,IAFH,mBAFF,EAME;AACAsG,YAAAA,KAAK,CAAC0C,MAAN;AACD;AACF;AACF,OAxBS;AA0BV,kCAA4B;AA1BlB,KAXL;AAwCP;AACA;AACA;AACAwL,IAAAA,KAAK,EAAE;AA3CA;AAnBuB,CAA3B;;ACAA,IAAMoF,kBAAkB,GAAG;AAChC7D,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qBAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,0BAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXgB;AAiBhCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAjB2B;AAuBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAvBgB;AA2BhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AA3BuB,CAA3B;;ACAA,IAAMqF,sBAAsB,GAAG;AACpC9D,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,cAAD,EAAiB,0BAAjB;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,eAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXoB;AAiBpCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAjB+B;AAuBpCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAvBoB;AA2BpC7P,EAAAA,OAAO,EAAE;AACPyT,IAAAA,cAAc,EAAE,KADT;AAGP5D,IAAAA,SAAS,EAAE,CAAC,CAAC,aAAD,EAAgB,kBAAhB,CAAD,CAHJ;AAKP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,qBAAe,mBAAC/P,KAAD,EAAQN,CAAR,EAAc;AAC3B,YAAM8T,OAAO,GAAG9T,CAAC,CAAC,0BAAD,CAAD,CAA8BQ,IAA9B,CAAmC,OAAnC,CAAhB;AACAF,QAAAA,KAAK,CAACwE,IAAN,mEAC+CgP,OAD/C;AAED;AALS,KAPL;AAeP;AACA;AACA;AACAtF,IAAAA,KAAK,EAAE;AAlBA;AA3B2B,CAA/B;;ACAA,IAAMuF,0BAA0B,GAAG;AACxChE,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,UAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXwB;AAexC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADR,GAfmC;AAmBxCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBwB;AAuBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,wBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD,EAAoB,cAApB;AAVA;AAvB+B,CAAnC;;ACAA,IAAMwF,uBAAuB,GAAG;AACrCjE,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXqB;AAerC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADR,GAfgC;AAmBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBqB;AAuBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,qBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAvB4B,CAAhC;;ACAA,IAAMyF,wBAAwB,GAAG;AACtClE,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE;AAET,oBAFS;AAKT,sBALS;AAQT,4BARS;AADN,GAH+B;AAgBtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,6BAAD,EAAgC,OAAhC,CADS,EAET,uBAFS;AAKT,YALS;AAQT,aARS;AADL,GAhB8B;AA6BtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,mBAAD,EAAsB,UAAtB,CADS,EAET,CAAC,gBAAD,EAAmB,UAAnB,CAFS,EAGT,CAAC,mBAAD,EAAsB,OAAtB,CAHS,EAIT,CAAC,+BAAD,EAAkC,OAAlC,CAJS;AADG,GA7BsB;AAsCtC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AADR,GAtCiC;AA0CtCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA1CsB;AA8CtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,wBADS;AAIT,KAAC,oBAAD,CAJS;AAOT,gBAPS,CADJ;AAWP;AACA;AACAmD,IAAAA,UAAU,EAAE,EAbL;AAeP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,oBAAD,EAAuB,UAAvB;AAlBA;AA9C6B,CAAjC;;ACAA,IAAM0F,qBAAqB,GAAG;AACnCnE,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6CAAD,EAAgD,UAAhD,CAAD;AADG,GAXmB;AAenCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfmB;AAmBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnB0B,CAA9B;;ACAA,IAAM2F,kBAAkB,GAAG;AAChCpE,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,aAAP;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oCAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,2BAAD,EAA8B,UAA9B,CADS,EAET,CAAC,mBAAD,EAAsB,OAAtB,CAFS;AADG,GAXgB;AAkBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CACT,CAAC,uBAAD,EAA0B,OAA1B,CADS,EAET,CAAC,gCAAD,EAAmC,OAAnC,CAFS;AADG,GAlBgB;AAyBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,2BAAqB,QADX;AAEV,2CAAqC;AAF3B,KALL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,qBAAD;AAbA;AAzBuB,CAA3B;;ACAA,IAAM4F,qBAAqB,GAAG;AACnCrE,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,sBAAD,EAAyB,kBAAzB,CADS,EAET,kBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE,EARL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAbA;AAvB0B,CAA9B;;ACAA,IAAM6F,cAAc,GAAG;AAC5BtE,EAAAA,MAAM,EAAE,QADoB;AAG5BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAHqB;AAO5BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPoB;AAW5BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gBAAD,EAAmB,UAAnB,CAAD;AADG,GAXY;AAe5BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CACT,CAAC,uBAAD,EAA0B,OAA1B,CADS,EAET,CAAC,2BAAD,EAA8B,SAA9B,CAFS,EAGT,CAAC,4BAAD,EAA+B,SAA/B,CAHS;AADG,GAfY;AAuB5B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAvBmB,CAAvB;;ACAA,IAAM8F,wBAAwB,GAAG;AACtCvE,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,6CAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE;AAET,kBAFS,CADG;AAMdyE,IAAAA,QAAQ,EAAE,iBANI;AAOd4C,IAAAA,MAAM,EAAE;AAPM,GAXsB;AAqBtC3D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADR,GArBiC;AAyBtCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,8BAAD,EAAiC,MAAjC,CAAD;AADG,GAzBsB;AA6BtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AA7B6B,CAAjC;;ACAA,IAAMgG,sBAAsB,GAAG;AACpCzE,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qBAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,wCAAD,EAA2C,OAA3C,CAAD;AADG,GAXoB;AAepCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfoB;AAmBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,2BAAqB;AADX,KALL;AASP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,yBAAD;AAZA;AAnB2B,CAA/B;;ACAA,IAAMiG,oBAAoB,GAAG;AAClC1E,EAAAA,MAAM,EAAE,cAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,wCAAD,EAA2C,OAA3C,CAAD;AADG,GAXkB;AAelCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfkB;AAmBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mCAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,uBAAiB;AADP,KALL;AASP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAZA;AAnByB,CAA7B;;ACAA,IAAMkG,6BAA6B,GAAG;AAC3C3E,EAAAA,MAAM,EAAE,wBADmC;AAG3CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAHoC;AAO3CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADL,GAPmC;AAW3CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD;AADG,GAX2B;AAe3CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAf2B;AAmB3C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnBkC,CAAtC;;ACAA,IAAMmG,kBAAkB,GAAG;AAChC5E,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXgB;AAehC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,QAAD;AADR,GAf2B;AAmBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBgB;AAuBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,sBAAD,EAAyB,kBAAzB,CADS,EAET,kBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,yCAAmC,qCAAA/P,KAAK,EAAI;AAAA;;AAC1C,YAAMsU,OAAO,GAAGtU,KAAK,CAACwE,IAAN,EAAhB;;AACA,6DAAAxE,KAAK,CACFkE,OADH,CACW,iBADX,kBAEQ,kBAFR,EAGGV,WAHH,CAGe8Q,OAHf;AAID,OAPS;AASV,+BAAyB;AATf,KARL;AAoBP;AACA;AACA;AACApG,IAAAA,KAAK,EAAE;AAvBA;AAvBuB,CAA3B;;ACAA,IAAMqG,kCAAkC,GAAG;AAChD9E,EAAAA,MAAM,EAAE,6BADwC;AAGhDtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,eAAP;AADN,GAHyC;AAOhDqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,wCAAD;AADL,GAPwC;AAWhDsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,6BAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXgC;AAiBhDf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADR,GAjB2C;AAqBhDoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBgC;AAyBhD7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,iBAApB,CAAD,EAAyC,UAAzC,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,yBAAmB,uBAAC/P,KAAD,EAAQN,CAAR,EAAc;AAAA;;AAC/B,YAAM8U,OAAO,GAAGva,+FAAA+F,KAAK,MAAL,CAAAA,KAAK,EACb,wBADa,CAAL,iBAER,cAFQ,EAGbqJ,KAHa,GAIb8I,IAJa,CAIR,cAJQ,CAAhB;;AAKA,YAAIqC,OAAJ,EAAa;AACXxU,UAAAA,KAAK,CAACyQ,OAAN,CAAc/Q,CAAC,+CAAqC8U,OAArC,UAAf;AACD;AACF;AAVS,KALL;AAkBP;AACA;AACA;AACAtG,IAAAA,KAAK,EAAE,CAAC,+BAAD;AArBA;AAzBuC,CAA3C;;ACAA,IAAMuG,iCAAiC,GAAG;AAC/ChF,EAAAA,MAAM,EAAE,4BADuC;AAG/CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,eAAP;AADN,GAHwC;AAO/CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,wCAAD;AADL,GAPuC;AAW/CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAX+B;AAe/C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADR,GAf0C;AAmB/CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnB+B;AAuB/C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,iBAApB,CAAD,EAAyC,UAAzC,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,yBAAmB,uBAAC/P,KAAD,EAAQN,CAAR,EAAc;AAC/B,YAAMgV,YAAY,GAAG1U,KAAK,CAAC6D,QAAN,GAAiBwF,KAAjB,EAArB;;AACA,YAAIqL,YAAY,CAACjL,QAAb,CAAsB,YAAtB,CAAJ,EAAyC;AACvC,cAAMkL,kBAAkB,GAAG1a,0CAAAya,YAAY,MAAZ,CAAAA,YAAY,EAC/B,2BAD+B,CAAZ,CAExB7Q,QAFwB,GAGxBwF,KAHwB,EAA3B;;AAIA,cAAMuL,QAAQ,GAAGD,kBAAkB,CAACxC,IAAnB,CAAwB,sBAAxB,CAAjB;AACA,cAAM0C,QAAQ,GAAGF,kBAAkB,CAACxC,IAAnB,CAAwB,sBAAxB,CAAjB;;AACA,cAAI0C,QAAQ,IAAID,QAAhB,EAA0B;AAAA;;AACxB5U,YAAAA,KAAK,CAACyQ,OAAN,CACE/Q,CAAC,6HACakV,QADb,uDAEaC,QAFb,gCADH;AAMD;AACF,SAfD,MAeO;AAAA;;AACL,cAAML,OAAO,GAAGva,gGAAA+F,KAAK,MAAL,CAAAA,KAAK,EACb,wBADa,CAAL,kBAER,cAFQ,EAGbqJ,KAHa,GAIb8I,IAJa,CAIR,cAJQ,CAAhB;;AAKA,cAAIqC,OAAJ,EAAa;AACXxU,YAAAA,KAAK,CAACyQ,OAAN,CAAc/Q,CAAC,+CAAqC8U,OAArC,UAAf;AACD;AACF;AACF;AA5BS,KALL;AAoCP;AACA;AACA;AACAtG,IAAAA,KAAK,EAAE,CAAC,+BAAD;AAvCA;AAvBsC,CAA1C;;ACAA,IAAM4G,sBAAsB,GAAG;AACpCrF,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,YAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD;AADG,GAXoB;AAepCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfoB;AAmBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,cAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,oBAAc,mBAAA/P,KAAK,EAAI;AACrB,YAAM+U,OAAO,GAAG9a,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,QAAN,CAArB;;AACAA,QAAAA,KAAK,CAACwD,WAAN,CAAkBuR,OAAlB;AACD;AAJS,KALL;AAYP;AACA;AACA;AACA7G,IAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,YAAf;AAfA;AAnB2B,CAA/B;;ACAA,IAAM8G,mBAAmB,GAAG;AACjCvF,EAAAA,MAAM,EAAE,aADyB;AAGjCE,EAAAA,gBAAgB,EAAE,CAAC,YAAD,CAHe;AAKjCxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,MAAD;AADN,GAL0B;AASjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GATyB;AAajCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAbiB;AAiBjC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,0BAAD,EAA6B,OAA7B,CAAD;AADR,GAjB4B;AAqBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBiB;AAyBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,yBAAD,EAA4B,gBAA5B,CADS,EAET,gBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,iCAA2B,QADjB;AAEV,0BAAoB;AAFV,KARL;AAaP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,gBAAD;AAhBA;AAzBwB,CAA5B;;ACAA,IAAM+G,+BAA+B,GAAG;AAC7CxF,EAAAA,MAAM,EAAE,yBADqC;AAG7CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAHsC;AAO7CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,6BAAD;AADL,GAPqC;AAW7CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAX6B;AAe7CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAf6B;AAmB7C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,CAAC,UAAD,CAAD;AAVA;AAnBoC,CAAxC;;ACAA,IAAMgH,wBAAwB,GAAG;AACtCzF,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,cAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,kCAAD,EAAqC,UAArC,CAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXsB;AAgBtCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADR,GAhBiC;AAoBtCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GApBsB;AAwBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAxB6B,CAAjC;;ACAA,IAAMiH,oBAAoB,GAAG;AAClC1F,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,kBAAP;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADG,GAXkB;AAelC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,0BAAD,EAA6B,OAA7B,CAAD;AADR,GAf6B;AAmBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBkB;AAuBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,yBAAmB,sBAAC/P,KAAD,EAAQN,CAAR,EAAc;AAAA,uEAI3ByV,oBAAoB,CAACnE,cAArB,CAAoCpE,SAApC,CAA8C,CAA9C,CAJ2B;AAAA,YAE7BhM,QAF6B;AAAA,YAG7BV,IAH6B;;AAK/B,YAAM6Q,GAAG,GAAGrR,CAAC,CAACkB,QAAD,CAAD,CAAYV,IAAZ,CAAiBA,IAAjB,CAAZ;;AACA,YAAI6Q,GAAJ,EAAS;AACP/Q,UAAAA,KAAK,CAACyQ,OAAN,sBAA2BM,GAA3B;AACD;AACF;AAVS,KALL;AAkBP;AACA;AACA;AACA7C,IAAAA,KAAK,EAAE;AArBA;AAvByB,CAA7B;;ACAA,IAAMkH,kCAAkC,GAAG;AAChD3F,EAAAA,MAAM,EAAE,6BADwC;AAGhDtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADN,GAHyC;AAOhDqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,8BAAD,EAAiC,OAAjC,CAAD;AADL,GAPwC;AAWhDsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXgC;AAgBhDf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAhB2C;AAsBhDoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CACT,CAAC,uBAAD,EAA0B,OAA1B,CADS;AAAA;AADG,GAtBgC;AA4BhD7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AA5BuC,CAA3C;;ACAA,IAAMmH,0BAA0B,GAAG;AACxC5F,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oCAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,sBAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXwB;AAgBxCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhBwB;AAoBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,2BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AApB+B,CAAnC;;ACAA,IAAMoH,qBAAqB,GAAG;AACnC7F,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,UAAD,CADL;AAENsB,IAAAA,KAAK,EAAE,CAAC,iBAAD,EAAoB,UAApB;AAFD,GAP2B;AAYnCgC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,YAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAZmB;AAiBnCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBmB;AAqBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AArB0B,CAA9B;;ACAA,IAAMqH,0BAA0B,GAAG;AACxC9F,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD;AADG,GAXwB;AAexCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfwB;AAmBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,aAAf,EAA8B,aAA9B,EAA6C,oBAA7C;AAVA;AAnB+B,CAAnC;;ACAA,IAAMsH,mBAAmB,GAAG;AACjC/F,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,2BAAb;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXiB;AAejCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfiB;AAmBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,0BADS,EAET,WAFS,EAGT,6BAHS,CADJ;AAOP;AACA;AACAmD,IAAAA,UAAU,EAAE,EATL;AAWP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAdA;AAnBwB,CAA5B;;ACAA,IAAMuH,uBAAuB,GAAG;AACrChG,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,eAAD,EAAkB,YAAlB;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXqB;AAerCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfqB;AAmBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,mBAAD,EAAsB,YAAtB,EAAoC,YAApC;AAVA;AAnB4B,CAAhC;;ACAA,IAAMwH,oBAAoB,GAAG;AAClCjG,EAAAA,MAAM,EAAE,cAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,QAAZ;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXkB;AAelC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,QAAD;AADR,GAf6B;AAmBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBkB;AAuBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAvByB,CAA7B;;ACAA,IAAMyH,kBAAkB,GAAG;AAChClG,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXgB;AAehCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfgB;AAmBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,yBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnBuB,CAA3B;;ACAA,IAAM0H,yBAAyB,GAAG;AACvCnG,EAAAA,MAAM,EAAE,oBAD+B;AAGvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,WAAD;AADN,GAHgC;AAOvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kCAAD;AADL,GAP+B;AAWvCsD,EAAAA,cAAc,EAAE;AACdmB,IAAAA,QAAQ,EAAE,kBADI;AAGdzE,IAAAA,SAAS,EAAE,CAAC,6BAAD;AAHG,GAXuB;AAiBvCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBuB;AAqBvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,wBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAVA;AArB8B,CAAlC;;ACAA,IAAM2H,2BAA2B,GAAG;AACzCpG,EAAAA,MAAM,EAAE,sBADiC;AAGzCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADN,GAHkC;AAOzCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kCAAD;AADL,GAPiC;AAWzCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,6BAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXyB;AAiBzCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADR,GAjBoC;AAqBzCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArByB;AAyBzC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,kBAApB,CAAD,EAA0C,kBAA1C,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAVA;AAzBgC,CAApC;;ACAA,IAAM4H,+BAA+B,GAAG;AAC7CrG,EAAAA,MAAM,EAAE,eADqC;AAG7CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD,EAAU,mBAAV;AADN,GAHsC;AAO7CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAPqC;AAW7CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,sBAAD,EAAyB,gBAAzB,CAAD;AADG,GAX6B;AAe7CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAf6B;AAmB7C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,sBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnBoC,CAAxC;;ACAA,IAAM6H,kBAAkB,GAAG;AAChCtG,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXgB;AAehCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfgB;AAmBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,mBAAa,QADH;AAEV,oCAA8B;AAFpB,KALL;AAUP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAbA;AAnBuB,CAA3B;;ACAA,IAAM8H,sBAAsB,GAAG;AACpCvG,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD;AADG,GAXoB;AAepCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfoB;AAmBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,8DAAD,CADS,CADJ;AAKP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,iCAA2B,QADjB;AAEV,iDAA2C;AAFjC,KAPL;AAYP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAfA;AAnB2B,CAA/B;;ACAA,IAAM+H,0BAA0B,GAAG;AACxCxG,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD;AADN,GAHiC;AAOxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAPwB;AAaxCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAbwB;AAiBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,wBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAjB+B,CAAnC;;ACAA,IAAMgI,yBAAyB,GAAG;AACvCzG,EAAAA,MAAM,EAAE,oBAD+B;AAGvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD;AADN,GAHgC;AAOvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,cAAD;AADL,GAP+B;AAWvCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXuB;AAiBvCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBuB;AAqBvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,oBAAD,EAAuB,kBAAvB,CADS,EAET,kBAFS,EAGT,OAHS,CADJ;AAOP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,8BAAwB,4BAAA/P,KAAK,EAAI;AAC/B,YAAMsU,OAAO,GAAGtU,KAAK,CAACwE,IAAN,EAAhB;AACAxE,QAAAA,KAAK,CAACkE,OAAN,CAAc,UAAd,EAA0BV,WAA1B,CAAsC8Q,OAAtC;AACD,OAJS;AAMV,wBAAkB,QANR;AAQV,yCAAmC,YARzB;AAUV,uBAAiB;AAVP,KATL;AAsBP;AACA;AACA;AACApG,IAAAA,KAAK,EAAE,CAAC,cAAD;AAzBA;AArB8B,CAAlC;;ACAA,IAAMiI,wBAAwB,GAAG;AACtC1G,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,UAAP;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,aAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADG;AAGd;AACAqH,IAAAA,MAAM,EAAE,6BAJM;AAMd5C,IAAAA,QAAQ,EAAE;AANI,GAXsB;AAoBtCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,0BAAD,EAA6B,OAA7B,CAAD;AADR,GApBiC;AAwBtCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAxBsB;AA4BtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AA5B6B,CAAjC;;ACAA,IAAMkI,6BAA6B,GAAG;AAC3C3G,EAAAA,MAAM,EAAE,wBADmC;AAG3CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,eAAP;AADN,GAHoC;AAO3CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,UAAD;AADL,GAPmC;AAW3CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAX2B;AAe3C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAfsC;AAmB3CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,cAAD,EAAiB,KAAjB,CAAD;AADG,GAnB2B;AAuB3C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,YAAX;AAVA;AAvBkC,CAAtC;;ACAA,IAAMmI,iBAAiB,GAAG;AAC/B5G,EAAAA,MAAM,EAAE,YADuB;AAG/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,aAAP;AADN,GAHwB;AAO/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPuB;AAW/BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,YAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXe;AAiB/Bf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,eAAD;AADR,GAjB0B;AAqB/BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBe;AAyB/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,GAAD,EAAM,mBAAN,EAA2B,kBAA3B,CAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,kBAAAhQ,KAAK,EAAI;AACjB,YAAMqQ,SAAS,GAAGrQ,KAAK,CAAC6D,QAAN,EAAlB;;AACA,YAAIwM,SAAS,CAAC7U,MAAV,KAAqB,CAArB,IAA0B6U,SAAS,CAACvS,GAAV,CAAc,CAAd,EAAiBmF,OAAjB,KAA6B,KAA3D,EAAkE;AAChE,iBAAO,QAAP;AACD;;AAED,eAAO,IAAP;AACD;AARS,KALL;AAgBP;AACA;AACA;AACAiL,IAAAA,KAAK,EAAE,CACL,CAAC,eAAD,EAAkB,kBAAlB,EAAsC,cAAtC,EAAsD,eAAtD,CADK;AAnBA;AAzBsB,CAA1B;;ACAA,IAAMoI,uBAAuB,GAAG;AACrC7G,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,8BAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,6BAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXqB;AAiBrCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBqB;AAqBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AArB4B,CAAhC;;ACAA,IAAMqI,mBAAmB,GAAG;AACjC9G,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,UAAD;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,MAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXiB;AAiBjCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,cAAD;AADR,GAjB4B;AAqBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBiB;AAyBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,oBAAD,EAAuB,oBAAvB,CADS,EAET,oBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,sBAAgB,qBAAA/P,KAAK,EAAI;AACvB,YAAM2E,IAAI,GAAG1K,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,KAAN,CAAlB;;AACA2E,QAAAA,IAAI,CAACzE,IAAL,CAAU,OAAV,EAAmB,MAAnB;AACAyE,QAAAA,IAAI,CAACzE,IAAL,CAAU,QAAV,EAAoB,MAApB;AACAyE,QAAAA,IAAI,CAACW,QAAL,CAAc,gBAAd;AACAtF,QAAAA,KAAK,CAAC0C,MAAN,CAAa,eAAb,EAA8B+N,OAA9B,CAAsC9L,IAAtC;AACD;AAPS,KARL;AAkBP;AACA;AACA;AACAuJ,IAAAA,KAAK,EAAE;AArBA;AAzBwB,CAA5B;;ACAA,IAAMsI,0BAA0B,GAAG;AACxC/G,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,cAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXwB;AAiBxCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBwB;AAqBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,uBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AArB+B,CAAnC;;ACAA,IAAMuI,oBAAoB,GAAG;AAClChH,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADG,GAXkB;AAelCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfkB;AAmBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,gBAAD;AAVA;AAnByB,CAA7B;;ACAA,IAAMwI,wBAAwB,GAAG;AACtCjH,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,yBAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXsB;AAgBtCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhBsB;AAoBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,aAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AApB6B,CAAjC;;ACAA,IAAMyI,iBAAiB,GAAG;AAC/BlH,EAAAA,MAAM,EAAE,YADuB;AAG/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD;AADN,GAHwB;AAO/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADL,GAPuB;AAW/BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oCAAD,EAAuC,OAAvC,CAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXe;AAgB/BL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhBe;AAoB/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AApBsB,CAA1B;;ACAA,IAAM0I,8BAA8B,GAAG;AAC5CnH,EAAAA,MAAM,EAAE,yBADoC;AAG5CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD;AADN,GAHqC;AAO5CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD;AADL,GAPoC;AAW5CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAX4B;AAe5CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAf4B;AAmB5C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,WAAD,EAAc,YAAd,CAAD,EAA8B,YAA9B,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnBmC,CAAvC;;ACAA,IAAM2I,gCAAgC,GAAG;AAC9CpH,EAAAA,MAAM,EAAE,2BADsC;AAG9CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD,EAAU,gBAAV;AADN,GAHuC;AAO9CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPsC;AAW9CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADG,GAX8B;AAe9C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,WAAD;AADR,GAfyC;AAmB9CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnB8B;AAuB9C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,+BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,kBAAD;AAVA;AAvBqC,CAAzC;;ACAA,IAAM4I,kBAAkB,GAAG;AAChCrH,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD,EAAgB,eAAhB,EAAiC,WAAjC;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,UAApB,CAAD;AADG,GAXgB;AAehC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAf2B;AAqBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBgB;AAyBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,sBAAD,EAAyB,kBAAzB,CADS,EAET,kBAFS,CADJ;AAMP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,gCAA0B;AADhB,KARL;AAYP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAfA;AAzBuB,CAA3B;;ACAA,IAAM6I,yBAAyB,GAAG;AACvCtH,EAAAA,MAAM,EAAE,oBAD+B;AAGvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,CAAC,oBAAD,EAAuB,OAAvB,CAAX;AADN,GAHgC;AAOvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAP+B;AAWvCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,2BAAD,EAA8B,OAA9B,CAAD;AADG,GAXuB;AAevC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAfkC;AAqBvCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBuB;AAyBvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,kBAAD,EAAqB,QAArB,EAA+B,OAA/B,CAAD,EAA0C,OAA1C,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,wBAAD,EAA2B,sBAA3B;AAVA;AAzB8B,CAAlC;;ACAA,IAAM8I,sBAAsB,GAAG;AACpCvH,EAAAA,MAAM,EAAE,gBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,cAAD,EAAiB,iBAAjB,EAAoC,kBAApC;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,eAAD,EAAkB,qBAAlB;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXoB;AAepC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAf+B;AAqBpCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,KAAnC,CAAD;AADG,GArBoB;AAyBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,4BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAzB2B,CAA/B;;ACAA,IAAM+I,wBAAwB,GAAG;AACtCxH,EAAAA,MAAM,EAAE,kBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,QAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,cAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXsB;AAetCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfsB;AAmBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAnB6B,CAAjC;;ACAA,IAAMgJ,0BAA0B,GAAG;AACxCzH,EAAAA,MAAM,EAAE,oBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,CAAC,uBAAD,EAA0B,OAA1B,CAAb;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,2GADS,EAET,gBAFS;AADL,GAPgC;AAcxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAdwB;AAkBxCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAlBwB;AAsBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,aAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,UAAD;AAVA;AAtB+B,CAAnC;;ACAA,IAAMiJ,iBAAiB,GAAG;AAC/B1H,EAAAA,MAAM,EAAE,YADuB;AAG/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD;AADN,GAHwB;AAO/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADL,GAPuB;AAW/BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oCAAD,EAAuC,OAAvC,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXe;AAiB/BL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBe;AAqB/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AArBsB,CAA1B;;ACAA,IAAMkJ,wBAAwB,GAAG;AACtC3H,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qCAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,2BAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD;AADG,GAXsB;AAetCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfsB;AAmBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,EAAkB,iBAAlB,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CACL,gBADK,EAEL,yBAFK,EAGL,yBAHK;AAVA;AAnB6B,CAAjC;;ACAA,IAAMmJ,sBAAsB,GAAG;AACpC5H,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,wDAAD,EAA2D,UAA3D,CADS,EAET,4BAFS,CADG;AAMdyE,IAAAA,QAAQ,EAAE;AANI,GAXoB;AAoBpCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GApBoB;AAwBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAxB2B,CAA/B;;ACAA,IAAMoJ,mBAAmB,GAAG;AACjC7H,EAAAA,MAAM,EAAE,aADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,WAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXiB;AAiBjCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBiB;AAqBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,SAAD,EAAY,aAAZ,CAAD,EAA6B,aAA7B,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AArBwB,CAA5B;;ACAA,IAAMqJ,uBAAuB,GAAG;AACrC9H,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,IAAnB;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,CAAC,6BAAD,EAAgC,OAAhC,CADS,EAET,4BAFS;AADL,GAP6B;AAcrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,UAAnC,CAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAdqB;AAoBrCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GApBgC;AA0BrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA1BqB;AA8BrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,eAAD,EAAkB,QAAlB,CAAD,EAA8B,QAA9B,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,eAAD;AAVA;AA9B4B,CAAhC;;ACAA,IAAMsJ,mCAAmC,GAAG;AACjD/H,EAAAA,MAAM,EAAE,8BADyC;AAGjDE,EAAAA,gBAAgB,EAAE,CAAC,gBAAD,CAH+B;AAKjDxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,kBAAP;AADN,GAL0C;AASjDqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,mBAAD,EAAsB,wBAAtB;AADL,GATyC;AAajDsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAbiC;AAiBjD0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,kCAAD;AADR,GAjB4C;AAqBjDoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBiC;AAyBjD7P,EAAAA,OAAO,EAAE;AACPyT,IAAAA,cAAc,EAAE,KADT;AAGP5D,IAAAA,SAAS,EAAE,CAAC,mBAAD,EAAsB,8BAAtB,CAHJ;AAKP;AACA;AACAmD,IAAAA,UAAU,EAAE,EAPL;AASP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,kBAAD,EAAqB,qBAArB;AAZA;AAzBwC,CAA5C;;ACAA,IAAMuJ,4BAA4B,GAAG;AAC1ChI,EAAAA,MAAM,EAAE,uBADkC;AAG1CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,UAAD;AADN,GAHmC;AAO1CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADL,GAPkC;AAW1CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,2BAAD,EAA8B,OAA9B,CAAD;AADG,GAX0B;AAe1C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAfqC;AAqB1CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArB0B;AAyB1C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,sBAAD;AAVA;AAzBiC,CAArC;;ACAA,IAAMwJ,gCAAgC,GAAG;AAC9CjI,EAAAA,MAAM,EAAE,4BADsC;AAG9CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD;AADN,GAHuC;AAO9CqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADL,GAPsC;AAW9CsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,YAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAX8B;AAiB9Cf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADR,GAjByC;AAqB9CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArB8B;AAyB9C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,uBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAzBqC,CAAzC;;ACAA,IAAMyJ,mBAAmB,GAAG;AACjClI,EAAAA,MAAM,EAAE,aADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,cAAD,EAAiB,CAAC,8BAAD,EAAiC,OAAjC,CAAjB;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,mBAAD,EAAsB,OAAtB,CAAD;AADG,GAXiB;AAejC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAf4B;AAqBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBiB;AAyBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,cAA1B,CAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,WAA5B;AAVA;AAzBwB,CAA5B;;ACAA,IAAM0J,qBAAqB,GAAG;AACnCnI,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,UAAP;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,OAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,kBAAD,EAAqB,iBAArB,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,UAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,wBAAD,EAA2B,KAA3B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,SAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,WAA1B;AAVA;AAvB0B,CAA9B;;ACAA,IAAM2J,qBAAqB,GAAG;AACnCpI,EAAAA,MAAM,EAAE,eAD2B;AAGnCE,EAAAA,gBAAgB,EAAE,CAChB,gBADgB,EAEhB,WAFgB,EAGhB,WAHgB,EAIhB,iBAJgB,EAKhB,WALgB,CAHiB;AAWnCxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,kBAAP;AADN,GAX4B;AAenCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAf2B;AAmBnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,gBAAT,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAnBmB;AAyBnCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,IAAD;AADR,GAzB8B;AA6BnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GA7BmB;AAiCnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,aAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,wBAAkB,QADR;AAEV,uBAAiB,YAFP;AAGV,wBAAkB,QAHR;AAIV,uBAAiB,YAJP;AAKV,yBAAmB,QALT;AAMV,wBAAkB;AANR,KALL;AAcP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CACL,gBADK,EAEL,gBAFK,EAGL,iBAHK,EAIL,cAJK;AAjBA;AAjC0B,CAA9B;;ACAA,IAAM4J,mBAAmB,GAAG;AACjCrI,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,6BAAD;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,mBAAD,EAAsB,OAAtB,CAAD;AADG,GAXiB;AAejC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,WAAD;AADR,GAf4B;AAmBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBiB;AAuBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,sBAAgB,oBAAA/P,KAAK,EAAI;AACvB,YAAM+Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAZ;AACAF,QAAAA,KAAK,CAAC8F,MAAN,GAAetC,WAAf,8BAAgDuN,GAAhD;AACD,OAJS;AAKV,kBAAY;AALF,KALL;AAaP;AACA;AACA;AACA7C,IAAAA,KAAK,EAAE,CAAC,QAAD;AAhBA;AAvBwB,CAA5B;;ACAA,IAAM6J,oBAAoB,GAAG;AAClCtI,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,IAAT;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,eAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,WAAD,CADG;AAGdyE,IAAAA,QAAQ,EAAE;AAHI,GAXkB;AAiBlCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,MAAD;AADR,GAjB6B;AAqBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBkB;AAyBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,OAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CACL,mBADK,EAEL,YAFK,EAGL,8BAHK,EAIL,cAJK;AAVA;AAzByB,CAA7B;;ACAA,IAAM8J,yBAAyB,GAAG;AACvCvI,EAAAA,MAAM,EAAE,qBAD+B;AAGvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAHgC;AAOvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,yBAAD,EAA4B,OAA5B,CAAD;AADL,GAP+B;AAWvCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,8BAAD,EAAiC,OAAjC,CAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,oBAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXuB;AAiBvCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,wBAAD;AADR,GAjBkC;AAqBvCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBuB;AAyBvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,qBAA1B,CAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAzB8B,CAAlC;;ACAA,IAAM+J,uBAAuB,GAAG;AACrCxI,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,wBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXqB;AAerCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfqB;AAmBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,+DADS,CADJ;AAKPmD,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,kBAAAhQ,KAAK,EAAI;AACjB,YAAMqQ,SAAS,GAAGrQ,KAAK,CAAC6D,QAAN,EAAlB;;AACA,YAAIwM,SAAS,CAAC7U,MAAV,KAAqB,CAArB,IAA0B6U,SAAS,CAACvS,GAAV,CAAc,CAAd,EAAiBmF,OAAjB,KAA6B,KAA3D,EAAkE;AAChE,iBAAO,QAAP;AACD;;AACD,eAAO,IAAP;AACD;AAPS;AALL;AAnB4B,CAAhC;;ACAA,IAAMiV,0BAA0B,GAAG;AACxCzI,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,WAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXwB;AAexC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,aAAD;AADR,GAfmC;AAmBxCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBwB;AAuBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADJ;AAvB+B,CAAnC;;ACAA,IAAMuL,yBAAyB,GAAG;AACvC1I,EAAAA,MAAM,EAAE,mBAD+B;AAGvCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD,EAAqC,gBAArC;AADN,GAHgC;AAOvCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADL,GAP+B;AAWvCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CAAC,qCAAD,EAAwC,OAAxC,CADS,EAET,CAAC,iBAAD,EAAoB,UAApB,CAFS,EAGT,CAAC,gCAAD,EAAmC,SAAnC,CAHS;AADG,GAXuB;AAmBvC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAnBkC;AAyBvCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CACT,CAAC,uBAAD,EAA0B,OAA1B,CADS,EAET,CAAC,2BAAD,EAA8B,SAA9B,CAFS,EAGT,CAAC,wBAAD,EAA2B,SAA3B,CAHS,EAIT,CAAC,4BAAD,EAA+B,SAA/B,CAJS,EAKT,CAAC,sBAAD,EAAyB,KAAzB,CALS;AADG,GAzBuB;AAmCvC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CACE,yBADF,EAEE,mGAFF,CADS,CADJ;AAQP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACVqI,MAAAA,UAAU,EAAE;AADF,KAVL;AAcP;AACA;AACA;AACAlK,IAAAA,KAAK,EAAE,CAAC,gBAAD;AAjBA;AAnC8B,CAAlC;;ACAA,IAAMmK,qBAAqB,GAAG;AACnC5I,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,gDAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV9K,MAAAA,GAAG,EAAE,aAAAjF,KAAK,EAAI;AACZ,YAAM+Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,eAAX,CAAZ;;AACA,YAAI6Q,GAAG,KAAK,EAAZ,EAAgB;AACd/Q,UAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkB6Q,GAAlB;AACD;AACF;AANS,KALL;AAcP;AACA;AACA;AACA7C,IAAAA,KAAK,EAAE;AAjBA;AAvB0B,CAA9B;;ACAA,IAAMoK,0BAA0B,GAAG;AACxC7I,EAAAA,MAAM,EAAE,oBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACd;AACAtD,IAAAA,SAAS,EAAE,CAAC,sDAAD;AAFG,GAXwB;AAgBxC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,cAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAVA;AAhB+B,CAAnC;;ACAA,IAAMqK,kBAAkB,GAAG;AAChC9I,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE;AAAA;AADL,GAPwB;AAahCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,6CAAD,EAAgD,UAAhD,CAAD;AADG,GAbgB;AAiBhC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,wBAAD;AADR,GAjB2B;AAqBhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBgB;AAyBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,CAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAzBuB,CAA3B;;ACAA,IAAMsK,qBAAqB,GAAG;AACnC/I,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qCAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,mDAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,+DADS;AADG,GAXmB;AAiBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBmB;AAqBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT,CAAC,oCAAD,CADS;AAET,KACE,sFADF;AAEE,iEAFF;AAAA,KAFS;AAMT,KAAC,6DAAD,CANS;AAOT,KACE,sFADF,CAPS;AAUT,sCAVS,CADJ;AAcP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,yBAAmB,oBAAA/P,KAAK,EAAI;AAC1B;AACA,YAAM2E,IAAI,GAAG1K,0CAAA+F,KAAK,MAAL,CAAAA,KAAK,EAAM,KAAN,CAAlB;;AACA,YAAMyY,KAAK,GAAGzY,KAAK,CAAC0Y,GAAN,CAAU,kBAAV,CAAd;;AACA,YAAI/T,IAAI,CAACnJ,MAAL,KAAgB,CAAhB,IAAqBid,KAAzB,EAAgC;AAC9B9T,UAAAA,IAAI,CAACzE,IAAL,CAAU,KAAV,EAAiBuY,KAAK,CAAC3d,KAAN,CAAY,WAAZ,EAAyB,CAAzB,EAA4BlB,OAA5B,CAAoC,QAApC,EAA8C,EAA9C,CAAjB;AACA,iBAAO+K,IAAP;AACD;;AACD,eAAO3E,KAAP;AACD;AAVS,KAhBL;AA6BP;AACA;AACA;AACAkO,IAAAA,KAAK,EAAE,CAAC,OAAD;AAhCA;AArB0B,CAA9B;;ACAA,IAAMyK,gBAAgB,GAAG;AAC9BlJ,EAAAA,MAAM,EAAE,UADsB;AAG9BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADN,GAHuB;AAO9BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADL,GAPsB;AAW9BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXc;AAe9B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAfyB;AAmB9BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBc;AAuB9B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CACL,oBADK,EAEL,8BAFK,EAGL,SAHK,EAIL,oBAJK;AAPA;AAvBqB,CAAzB;;ACAA,IAAM0K,qBAAqB,GAAG;AACnCnJ,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,6BAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE,IAP2B;AASnCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,QAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,mBAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GATmB;AAenCf,EAAAA,GAAG,EAAE,IAf8B;AAiBnCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBmB;AAqBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,2CAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AArB0B,CAA9B;;ACAA,IAAM2K,iBAAiB,GAAG;AAC/BpJ,EAAAA,MAAM,EAAE,WADuB;AAG/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAHwB;AAO/BqD,EAAAA,MAAM,EAAE,IAPuB;AAS/BC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,UAApB,CAAD;AADG,GATe;AAa/B0D,EAAAA,GAAG,EAAE,IAb0B;AAe/BU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfe;AAmB/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,cAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AAnBsB,CAA1B;;ACAA,IAAM4K,oBAAoB,GAAG;AAClCrJ,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,sBAAD,EAAyB,OAAzB,CAAD;AADG,GAXkB;AAelC0D,EAAAA,GAAG,EAAE,IAf6B;AAiBlCY,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADJ,GAjByB;AAqBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBkB;AAyBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,4BAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,WAAD,EAAc,qBAAd;AAPA;AAzByB,CAA7B;;ACAA,IAAM6K,qBAAqB,GAAG;AACnCtJ,EAAAA,MAAM,EAAE,iBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE,IAP2B;AASnCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,QAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,YAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GATmB;AAenCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,cAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB,EAA+B,iBAA/B;AAPA;AAvB0B,CAA9B;;ACAA,IAAM8K,sBAAsB,GAAG;AACpCvJ,EAAAA,MAAM,EAAE,kBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE,IAP4B;AASpCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,YAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAToB;AAepCf,EAAAA,GAAG,EAAE,IAf+B;AAiBpCU,EAAAA,cAAc,EAAE,IAjBoB;AAmBpCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE;AACVkJ,MAAAA,KAAK,EAAE,eAAAjZ,KAAK,EAAI;AACdA,QAAAA,KAAK,CAACE,IAAN,CAAW,OAAX,EAAoB,MAApB;AACD;AAHS,KALL;AAWPgO,IAAAA,KAAK,EAAE;AAXA;AAnB2B,CAA/B;;ACAA,IAAMgL,4BAA4B,GAAG;AAC1CzJ,EAAAA,MAAM,EAAE,wBADkC;AAG1CtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,4BAAD;AADN,GAHmC;AAO1CqD,EAAAA,MAAM,EAAE,IAPkC;AAS1CC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oCAAD,EAAuC,OAAvC,CAAD;AADG,GAT0B;AAa1C0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,mCAAD;AADR,GAbqC;AAiB1CoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjB0B;AAqB1C7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,0CAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,iBAAD;AAPA;AArBiC,CAArC;;ACAA,IAAMiL,mBAAmB,GAAG;AACjC1J,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE,IAPyB;AASjCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,4BAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,YAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GATiB;AAejCf,EAAAA,GAAG,EAAE,IAf4B;AAiBjCU,EAAAA,cAAc,EAAE,IAjBiB;AAmBjCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AAnBwB,CAA5B;;ACAA,IAAMkL,kBAAkB,GAAG;AAChC3J,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,MAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,CACE,0BADF,EAEE,OAFF,EAGE,UAAAyM,GAAG,EAAI;AACL,UAAMC,IAAI,GAAGlH,IAAI,CAACtW,KAAL,CAAWud,GAAX,CAAb;AACA,aAAOC,IAAI,CAACC,IAAL,CAAUC,YAAjB;AACD,KANH,CADS;AADG,GAXgB;AAwBhClJ,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE;AAAA;AADR,GAxB2B;AA8BhCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CACT,CACE,0BADF,EAEE,OAFF,EAGE,UAAAyM,GAAG,EAAI;AACL,UAAMC,IAAI,GAAGlH,IAAI,CAACtW,KAAL,CAAWud,GAAX,CAAb;AACA,aAAOC,IAAI,CAACC,IAAL,CAAUE,KAAV,CAAgBC,aAAvB;AACD,KANH,CADS;AADG,GA9BgB;AA2ChC3c,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,SAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AA3CuB,CAA3B;;ACAA,IAAMyL,mBAAmB,GAAG;AACjClK,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,aAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE,IAPyB;AASjCC,EAAAA,cAAc,EAAE,IATiB;AAWjCI,EAAAA,GAAG,EAAE,IAX4B;AAajCY,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADJ,GAbwB;AAiBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBiB;AAqBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE,CAAC,UAAD,EAAa,OAAb;AALA;AArBwB,CAA5B;;ACAA,IAAM0L,mBAAmB,GAAG;AACjCnK,EAAAA,MAAM,EAAE,aADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE,IAPyB;AASjCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,OAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,aAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GATiB;AAejCf,EAAAA,GAAG,EAAE,IAf4B;AAiBjCU,EAAAA,cAAc,EAAE,IAjBiB;AAmBjCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AAnBwB,CAA5B;;ACAA,IAAM2L,oBAAoB,GAAG;AAClCpK,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,YAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,6BAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,yBAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,aAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXkB;AAiBlCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAjB6B;AAqBlCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GArBkB;AAyBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AAzByB,CAA7B;;ACAA,IAAM4L,sBAAsB,GAAG;AACpCrK,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,YAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE,IAP4B;AASpCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,uCAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAToB;AAcpCf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,CAAC,6BAAD,EAAgC,OAAhC,CAAD;AADR,GAd+B;AAkBpCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAlBoB;AAsBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,OAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE,CAAC,kBAAD;AALA;AAtB2B,CAA/B;;ACAA,IAAM6L,uBAAuB,GAAG;AACrCtK,EAAAA,MAAM,EAAE,mBAD6B;AAGrCE,EAAAA,gBAAgB,EAAE,CAChB,oBADgB,EAEhB,0BAFgB,EAGhB,oBAHgB,CAHmB;AASrCxF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,cAAD;AADN,GAT8B;AAarCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAb6B;AAiBrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oCAAD,EAAuC,OAAvC,CAAD;AADG,GAjBqB;AAqBrC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADR,GArBgC;AAyBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAzBqB;AA6BrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,cAAD;AAPA;AA7B4B,CAAhC;;ACAA,IAAM8L,wBAAwB,GAAG;AACtCvK,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,aAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,aAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXsB;AAiBtCf,EAAAA,GAAG,EAAE,IAjBiC;AAmBtCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBsB;AAuBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA4B,eAA5B;AAPA;AAvB6B,CAAjC;;ACAA,IAAM+L,0BAA0B,GAAG;AACxCxK,EAAAA,MAAM,EAAE,qBADgC;AAGxCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAHiC;AAOxCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPgC;AAWxCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,kCAAD,EAAqC,OAArC,CAAD;AADG,GAXwB;AAexC0D,EAAAA,GAAG,EAAE,IAfmC;AAiBxCU,EAAAA,cAAc,EAAE,IAjBwB;AAmBxCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AAnB+B,CAAnC;;ACAA,IAAMgM,qBAAqB,GAAG;AACnCzK,EAAAA,MAAM,EAAE,eAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,aAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CACT,0EADS,CADG;AAIdyE,IAAAA,QAAQ,EAAE;AAJI,GAXmB;AAkBnCf,EAAAA,GAAG,EAAE,IAlB8B;AAoBnCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GApBmB;AAwBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,eAAD,EAAkB,sBAAlB,CAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CACL,yBADK,EAEL,8BAFK,EAGL,sCAHK,EAIL,gCAJK;AAPA;AAxB0B,CAA9B;;ACAA,IAAMiM,uBAAuB,GAAG;AACrC1K,EAAAA,MAAM,EAAE,mBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,kCAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE,IAP6B;AASrCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GATqB;AAarC0D,EAAAA,GAAG,EAAE,IAbgC;AAerCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAfqB;AAmBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,qBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AAnB4B,CAAhC;;ACAA,IAAMkM,qBAAqB,GAAG;AACnC3K,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,oBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,SAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,OAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,oBAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXmB;AAiBnCf,EAAAA,GAAG,EAAE,IAjB8B;AAmBnCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AAvB0B,CAA9B;;ACAA,IAAMmM,oBAAoB,GAAG;AAClC5K,EAAAA,MAAM,EAAE,cAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXkB;AAelC0D,EAAAA,GAAG,EAAE,IAf6B;AAiBlCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBkB;AAqBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,6DAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE;AACV,wBAAkB,sBAAA/P,KAAK,EAAI;AACzB,YAAMsa,SAAS,GAAGta,KAAK,CAACwE,IAAN,EAAlB;AACAxE,QAAAA,KAAK,CAACwD,WAAN,CAAkB8W,SAAlB;AACD;AAJS,KAHL;AAUPpM,IAAAA,KAAK,EAAE;AAVA;AArByB,CAA7B;;ACAA,IAAMqM,qBAAqB,GAAG;AACnC9K,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,wBAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,2BAAD,EAA8B,UAA9B,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE,IAf8B;AAiBnCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBmB;AAqBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE;AACV,mCAA6B,gCAAA/P,KAAK,EAAI;AACpC,YAAM+Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAZ;AACAF,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkB6Q,GAAG,CAACnX,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,EAA2BA,OAA3B,CAAmC,OAAnC,EAA4C,EAA5C,CAAlB;AACD;AAJS,KAHL;AAUPsU,IAAAA,KAAK,EAAE,CAAC,iBAAD,EAAoB,kBAApB;AAVA;AArB0B,CAA9B;;ACAA,IAAMsM,kBAAkB,GAAG;AAChC/K,EAAAA,MAAM,EAAE,YADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,YAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,WAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,EAAuB,UAAvB,CAAD;AADG,GAXgB;AAehC0D,EAAAA,GAAG,EAAE,IAf2B;AAiBhCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBgB;AAqBhC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AArBuB,CAA3B;;ACAA,IAAMuM,wBAAwB,GAAG;AACtChL,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,qBAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,+BAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,UAAnC,CAAD;AADG,GAXsB;AAetC0D,EAAAA,GAAG,EAAE,IAfiC;AAiBtCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBsB;AAqBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,yBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE;AACV,sBAAgB,qBAAA/P,KAAK,EAAI;AACvB,YAAM+Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAZ;AACAF,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkB6Q,GAAG,CAACnX,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,EAA2BA,OAA3B,CAAmC,OAAnC,EAA4C,EAA5C,CAAlB;AACD;AAJS,KAHL;AAUPsU,IAAAA,KAAK,EAAE,CAAC,+BAAD;AAVA;AArB6B,CAAjC;;ACAA,IAAMwM,oBAAoB,GAAG;AAClCjL,EAAAA,MAAM,EAAE,gBAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,aAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAXkB;AAiBlCf,EAAAA,GAAG,EAAE,IAjB6B;AAmBlCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBkB;AAuBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE,CAAC,cAAD;AALA;AAvByB,CAA7B;;ACAA,IAAMyM,uBAAuB,GAAG;AACrClL,EAAAA,MAAM,EAAE,mBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,gCAAD,EAAmC,OAAnC,CAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXqB;AAgBrCf,EAAAA,GAAG,EAAE,IAhBgC;AAkBrCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAlBqB;AAsBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,eAAD;AAPA;AAtB4B,CAAhC;;ACAA,IAAM0M,mBAAmB,GAAG;AACjCnL,EAAAA,MAAM,EAAE,eADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE,IAPyB;AASjCC,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,WAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GATiB;AAejCf,EAAAA,GAAG,EAAE,IAf4B;AAiBjCU,EAAAA,cAAc,EAAE,IAjBiB;AAmBjCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,YAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE,CAAC,mBAAD;AAPA;AAnBwB,CAA5B;;ACAA,IAAM2M,sBAAsB,GAAG;AACpCpL,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,yBAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,UAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD;AADG,GAXoB;AAepC0D,EAAAA,GAAG,EAAE,IAf+B;AAiBpCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBoB;AAqBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,aAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AArB2B,CAA/B;;ACAA,IAAM4M,uBAAuB,GAAG;AACrCrL,EAAAA,MAAM,EAAE,mBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,EAAoB,UAApB,CAAD;AADG,GAXqB;AAerC0D,EAAAA,GAAG,EAAE,IAfgC;AAiBrCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBqB;AAqBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP4D,IAAAA,cAAc,EAAE,KAHT;AAKPT,IAAAA,UAAU,EAAE,EALL;AAOP7B,IAAAA,KAAK,EAAE;AAPA;AArB4B,CAAhC;;ACEA,IAAM6M,gBAAgB,GAAG;AAC9BtL,EAAAA,MAAM,EAAE,UADsB;AAG9BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,eAAD;AADN,GAHuB;AAO9BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADL,GAPsB;AAW9BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,MAAD,EAAS,UAAT,CAAD;AADG,GAXc;AAe9B0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,aAAD;AADR,GAfyB;AAmB9BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBc;AAuB9B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,wBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE;AACV,4BAAsB,yBAAA/P,KAAK,EAAI;AAC7B,YAAMgb,YAAY,GAAGhb,KAAK,CAACE,IAAN,CAAW,eAAX,CAArB;AACA,YAAM6Q,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAZ;AACA,YAAMpG,GAAG,GAAG+B,uBAAG,CAACmC,OAAJ,CAAY+S,GAAZ,EAAiBiK,YAAjB,CAAZ;AACAhb,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkBpG,GAAlB;AACD;AANS,KAHL;AAYPoU,IAAAA,KAAK,EAAE,CAAC,gBAAD,EAAmB,MAAnB,EAA2B,eAA3B,EAA4C,qBAA5C;AAZA;AAvBqB,CAAzB;;ACFA,IAAM+M,sBAAsB,GAAG;AACpCxL,EAAAA,MAAM,EAAE,iBAD4B;AAGpCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH6B;AAOpCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,iCAAD,EAAoC,OAApC,CAAD;AADL,GAP4B;AAWpCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXoB;AAepC0D,EAAAA,GAAG,EAAE,IAf+B;AAiBpCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAjBoB;AAqBpC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,kBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AArB2B,CAA/B;;ACAA,IAAMgN,uBAAuB,GAAG;AACrCzL,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,qBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,aAAD,EAAgB,UAAhB,CAAD;AADG,GAXqB;AAerC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,eAAD;AADR,GAfgC;AAmBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBqB;AAuBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,eAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE,CAAC,YAAD;AALA;AAvB4B,CAAhC;;ACAA,IAAMiN,qBAAqB,GAAG;AACnC1L,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,mBAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,eAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,wCAAD,EAA2C,OAA3C,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGPmD,IAAAA,UAAU,EAAE,EAHL;AAKP7B,IAAAA,KAAK,EAAE;AALA;AAvB0B,CAA9B;;ACAA,IAAMkN,uBAAuB,GAAG;AACrC3L,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,gBAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,uBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,SAAD,CADG;AAEd;AACAqH,IAAAA,MAAM,EAAE,sBAHM;AAId5C,IAAAA,QAAQ,EAAE;AAJI,GAXqB;AAkBrCf,EAAAA,GAAG,EAAE,IAlBgC;AAoBrCU,EAAAA,cAAc,EAAE,IApBqB;AAsBrCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAtB4B,CAAhC;;ACAA,IAAMmN,qBAAqB,GAAG;AACnC5L,EAAAA,MAAM,EAAE,eAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,+BAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,WAAD,EAAc,UAAd,CAAD;AADG,GAXmB;AAenC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,0BAAD;AADR,GAf8B;AAmBnCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,kCAAD,EAAqC,KAArC,CAAD;AADG,GAnBmB;AAuBnC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,sBAAD;AADJ,GAvB0B;AA2BnC0O,EAAAA,MAAM,EAAE;AACN3U,IAAAA,KAAK,EAAE;AACLiG,MAAAA,SAAS,EAAE,CAAC,QAAD;AADN;AADD;AA3B2B,CAA9B;;ACAA,IAAM2O,mBAAmB,GAAG;AACjC9L,EAAAA,MAAM,EAAE,aADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,eAAD;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CACT,uEADS;AADL,GAPyB;AAajC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,gBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE,EALL;AAOP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAVA;AAbwB,CAA5B;;ACAA,IAAMsN,qBAAqB,GAAG;AACnC/L,EAAAA,MAAM,EAAE,gBAD2B;AAGnCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,SAAD;AADN,GAH4B;AAOnCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,kBAAD;AADL,GAP2B;AAWnCsD,EAAAA,cAAc,EAAE,IAXmB;AAanCgB,EAAAA,OAAO,EAAE;AACPtE,IAAAA,SAAS,EAAE,CAAC,UAAD;AADJ,GAb0B;AAiBnCoE,EAAAA,cAAc,EAAE,IAjBmB;AAmBnCjU,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,UAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV,iBAAW,IADD;AAEV,0BAAoB,GAFV;AAGV0L,MAAAA,MAAM,EAAE,GAHE;AAIVC,MAAAA,OAAO,EAAE;AAJC,KALL;AAYP;AACA;AACA;AACAxN,IAAAA,KAAK,EAAE,CAAC,eAAD,EAAkB,oBAAlB;AAfA;AAnB0B,CAA9B;;ACAA,IAAMyN,uBAAuB,GAAG;AACrClM,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADL,GAP6B;AAWrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,MAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXqB;AAgBrCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhBqB;AAoBrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,2BAAD,CADJ;AAEPsB,IAAAA,KAAK,EAAE,CACL,MADK,EAEL,QAFK,EAGL,sCAHK,EAIL,SAJK,EAKL,0BALK;AAFA;AApB4B,CAAhC;;ACAA,IAAM0N,kCAAkC,GAAG;AAChDnM,EAAAA,MAAM,EAAE,6BADwC;AAGhDtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAHyC;AAOhD0O,EAAAA,MAAM,EAAE;AACNO,IAAAA,QAAQ,EAAE;AACRjP,MAAAA,SAAS,EAAE,CAAC,YAAD,CADH;AAERmD,MAAAA,UAAU,EAAE;AAFJ;AADJ,GAPwC;AAchDG,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,SAAD,CADG;AAEdqH,IAAAA,MAAM,EAAE,sBAFM;AAGd5C,IAAAA,QAAQ,EAAE;AAHI,GAdgC;AAoBhDL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GApBgC;AAwBhD7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iCAAD,CADJ;AAEP4D,IAAAA,cAAc,EAAE,KAFT;AAIPtC,IAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,WAA7B;AAJA;AAxBuC,CAA3C;;ACAA,IAAM4N,kBAAkB,GAAG;AAChCrM,EAAAA,MAAM,EAAE,aADwB;AAGhCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,OAA/B,CAAD;AADN,GAHyB;AAOhCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,EAAwB,OAAxB,CAAD;AADL,GAPwB;AAWhCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,qCAAD,EAAwC,OAAxC,CAAD;AADG,GAXgB;AAehC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,CAAC,UAAD,CAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV2B,MAAAA,EAAE,EAAE,YAAA1R,KAAK,EAAI;AACX;AACA;AACAA,QAAAA,KAAK,CAACE,IAAN,CAAW,IAAX,EAAiB,IAAjB,EAHW;;AAMX,eAAO,IAAP;AACD,OARS;AASVkQ,MAAAA,EAAE,EAAE,YAAApQ,KAAK,EAAI;AACX;AACA;AACAA,QAAAA,KAAK,CAACE,IAAN,CAAW,IAAX,EAAiB,IAAjB,EAHW;AAMX;;AACAF,QAAAA,KAAK,CAAC+b,KAAN,CAAY,SAAZ;AACD,OAjBS;AAkBVC,MAAAA,EAAE,EAAE,YAAAhc,KAAK,EAAI;AACX;AACA;AACAA,QAAAA,KAAK,CAACE,IAAN,CAAW,OAAX,EAAoB,qBAApB;AACD;AAtBS;AALL;AAfuB,CAA3B;;ACAA,IAAM+b,oBAAoB,GAAG;AAClCxM,EAAAA,MAAM,EAAE,cAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,IAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,4BAAD;AADL,GAP0B;AAWlCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,+BAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXkB;AAgBlCL,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAhBkB;AAoBlC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACVmM,MAAAA,EAAE,EAAE,KADM;AAEVC,MAAAA,EAAE,EAAE;AAFM,KALL;AAUP;AACA;AACA;AACAjO,IAAAA,KAAK,EAAE;AAbA;AApByB,CAA7B;;ACAP;;AACA;AACO,IAAMkO,wBAAwB,GAAG;AACtC3M,EAAAA,MAAM,EAAE,mBAD8B;AAGtCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,8BAAD;AADN,GAH+B;AAOtCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,6BAAD;AADL,GAP8B;AAWtCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,EAA+B,UAA/B,CAAD;AADG,GAXsB;AAetC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,8BAAD;AADR,GAfiC;AAmBtCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBsB;AAuBtC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,mBAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACVzM,MAAAA,CAAC,EAAE,WAAAtD,KAAK,EAAI;AACV,YAAI,CAACA,KAAK,CAACyJ,QAAN,CAAe,YAAf,CAAL,EAAmC,OAAO,IAAP;AACnC,YAAI4S,CAAC,GAAG,EAAR;AACA,YAAIC,CAAC,GAAG,CAAR;;AACA,aAAK,IAAIC,CAAC,GAAGvc,KAAK,CAACtG,IAAN,EAAb,EAA2B4iB,CAAC,GAAGC,CAAC,CAAC/gB,MAAjC,EAAyC8gB,CAAC,IAAI,CAA9C,EAAiD;AAC/C,cAAME,CAAC,GAAGD,CAAC,CAACE,UAAF,CAAaH,CAAb,CAAV;AACAE,UAAAA,CAAC,KAAK,GAAN,GACKH,CAAC,IAAI,GADV,GAEIG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,EAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,EAAN,GACCH,CAAC,IAAI,IADN,GAEAG,CAAC,GAAG,EAAJ,KAAWH,CAAC,IAAIK,MAAM,CAACC,YAAP,CAAoBH,CAAC,GAAG,CAAxB,CAAhB,CAZJ;AAaD;;AAEDxc,QAAAA,KAAK,CAACwE,IAAN,CAAW6X,CAAX;AACArc,QAAAA,KAAK,CAAC4F,WAAN,CAAkB,YAAlB;AACA5F,QAAAA,KAAK,CAACsF,QAAN,CAAe,cAAf;AACA,eAAO,IAAP;AACD,OA1BS;AA2BV5B,MAAAA,GAAG,EAAE,aAAA1D,KAAK,EAAI;AACZ,YAAI,CAACA,KAAK,CAACyJ,QAAN,CAAe,YAAf,CAAL,EAAmC,OAAO,IAAP;AACnC,YAAI4S,CAAC,GAAG,EAAR;AACA,YAAIC,CAAC,GAAG,CAAR;;AACA,aAAK,IAAIC,CAAC,GAAGvc,KAAK,CAACtG,IAAN,EAAb,EAA2B4iB,CAAC,GAAGC,CAAC,CAAC/gB,MAAjC,EAAyC8gB,CAAC,IAAI,CAA9C,EAAiD;AAC/C,cAAME,CAAC,GAAGD,CAAC,CAACE,UAAF,CAAaH,CAAb,CAAV;AACAE,UAAAA,CAAC,KAAK,GAAN,GACKH,CAAC,IAAI,GADV,GAEIG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,GAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,EAAN,GACCH,CAAC,IAAI,GADN,GAEAG,CAAC,KAAK,EAAN,GACCH,CAAC,IAAI,IADN,GAEAG,CAAC,GAAG,EAAJ,KAAWH,CAAC,IAAIK,MAAM,CAACC,YAAP,CAAoBH,CAAC,GAAG,CAAxB,CAAhB,CAZJ;AAaD;;AAEDxc,QAAAA,KAAK,CAACwE,IAAN,CAAW6X,CAAX;AACArc,QAAAA,KAAK,CAAC4F,WAAN,CAAkB,YAAlB;AACA5F,QAAAA,KAAK,CAACsF,QAAN,CAAe,cAAf;AACA,eAAO,IAAP;AACD;AApDS,KALL;AA4DP;AACA;AACA;AACA4I,IAAAA,KAAK,EAAE;AA/DA;AAvB6B,CAAjC;;ACFA,IAAM0O,oBAAoB,GAAG;AAClCnN,EAAAA,MAAM,EAAE,eAD0B;AAGlCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,WAAD;AADN,GAH2B;AAOlCqD,EAAAA,MAAM,EAAE,IAP0B;AASlCC,EAAAA,cAAc,EAAE,IATkB;AAWlCI,EAAAA,GAAG,EAAE,IAX6B;AAalCU,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,2BAAD,EAA8B,SAA9B,CAAD;AADG,GAbkB;AAiBlC7P,EAAAA,OAAO,EAAE;AACP;AACA6P,IAAAA,SAAS,EAAE,CAAC,CAAC,gBAAD,EAAmB,YAAnB,EAAiC,WAAjC,EAA8C,YAA9C,CAAD,CAFJ;AAIP;AACA;AACAmD,IAAAA,UAAU,EAAE,EANL;AAQP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,UAAf;AAXA;AAjByB,CAA7B;;ACAA,IAAM2O,uBAAuB,GAAG;AACrCpN,EAAAA,MAAM,EAAE,kBAD6B;AAGrCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADN,GAH8B;AAOrCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,sCAAD;AADL,GAP6B;AAWrC;AACA;AACA;AACAsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE;AAAA;AADG,GAdqB;AAoBrC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,gCAAD;AADR,GApBgC;AAwBrC;AACA;AACA;AACAoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE;AAAA;AADG,GA3BqB;AAiCrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CACT;AAEE;AACA,oDAHF,EAIE,kBAJF,CADS,CADJ;AAUP;AACA;AACAmD,IAAAA,UAAU,EAAE,EAZL;AAcP;AACA;AACA;AACA7B,IAAAA,KAAK,EAAE;AAjBA;AAjC4B,CAAhC;;ACAA,IAAM4O,uBAAuB,GAAG;AACrCrN,EAAAA,MAAM,EAAE,iBAD6B;AAGrC;AACA;AACA;AACA;AACA;AAEAtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,OAAD;AADN,GAT8B;AAarCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,oCAAD;AADL,GAb6B;AAiBrCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,cAAD,EAAiB,UAAjB,CAAD;AADG,GAjBqB;AAqBrC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,4BAAD;AADR,GArBgC;AAyBrCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAzBqB;AA6BrC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,6BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV2B,MAAAA,EAAE,EAAE,YAAA1R,KAAK,EAAI;AACX;AACA;AACA;AACAA,QAAAA,KAAK,CAAC+c,MAAN,CAAa,SAAb;AACD;AANS,KALL;AAcP;AACA;AACA;AACA7O,IAAAA,KAAK,EAAE;AAEL,8BAFK,EAGL,iBAHK;AAML;AACA,kBAPK;AAUL,cAVK,EAYL,OAZK,EAaL,UAbK;AAjBA;AA7B4B,CAAhC;;ACAA,IAAM8O,mBAAmB,GAAG;AACjCvN,EAAAA,MAAM,EAAE,cADyB;AAGjCtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD,EAAqC,gBAArC;AADN,GAH0B;AAOjCqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,+CAAD;AADL,GAPyB;AAWjCsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,CAAC,+BAAD,EAAkC,SAAlC,CAAD;AADG,GAXiB;AAejC0D,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,IAAD;AADR,GAf4B;AAmBjCoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,EAA0B,OAA1B,CAAD;AADG,GAnBiB;AAuBjC7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,6BAAD,CADJ;AAGP;AACA;AACAmD,IAAAA,UAAU,EAAE;AACV;AACA;AACA;AACA,qBAAe,oBAAA/P,KAAK,EAAI;AACtB,YAAI,CAACA,KAAK,CAACkE,OAAN,CAAc,GAAd,EAAmB1I,MAAxB,EAAgC;AAC9B,cAAM6H,WAAW,GAAGrD,KAAK,CAACgD,IAAN,CAAW,GAAX,CAApB;;AACA,cAAIK,WAAJ,EAAiB;AACfrD,YAAAA,KAAK,CAAC0C,MAAN;AACAW,YAAAA,WAAW,CAACoN,OAAZ,CAAoBzQ,KAApB;AACD;AACF;AACF;AAZS,KALL;AAoBP;AACA;AACA;AACAkO,IAAAA,KAAK,EAAE,CACL,iBADK,EAEL,yBAFK,EAGL,OAHK,EAIL,uBAJK;AAvBA;AAvBwB,CAA5B;;ACAA,IAAM+O,iBAAiB,GAAG;AAC/BxN,EAAAA,MAAM,EAAE,iBADuB;AAG/BtF,EAAAA,KAAK,EAAE;AACLyC,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADN,GAHwB;AAO/BqD,EAAAA,MAAM,EAAE;AACNrD,IAAAA,SAAS,EAAE,CAAC,8BAAD;AADL,GAPuB;AAW/BsD,EAAAA,cAAc,EAAE;AACdtD,IAAAA,SAAS,EAAE,CAAC,sBAAD,CADG;AAEdyE,IAAAA,QAAQ,EAAE;AAFI,GAXe;AAgB/Bf,EAAAA,GAAG,EAAE;AACH1D,IAAAA,SAAS,EAAE,CAAC,iBAAD;AADR,GAhB0B;AAoB/BoE,EAAAA,cAAc,EAAE;AACdpE,IAAAA,SAAS,EAAE;AAET,KAAC,uBAAD,EAA0B,OAA1B,CAFS;AAIT;AACA,KAAC,2BAAD,EAA8B,SAA9B,CALS;AAOT;AACA,8BARS;AADG,GApBe;AAiC/B7P,EAAAA,OAAO,EAAE;AACP6P,IAAAA,SAAS,EAAE,CAAC,iBAAD,CADJ;AAEPsB,IAAAA,KAAK,EAAE,CACL,cADK,EAEL,iBAFK,EAGL,OAHK,EAIL,WAJK,EAKL,sBALK,EAML,kBANK,EAOL,YAPK,EAQL,cARK;AAFA;AAjCsB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGP,iBAAe/R,0FAAY+gB,gBAAZ,oBAAqC,UAAC9gB,GAAD,EAAMmI,GAAN,EAAc;AAChE,MAAMgL,SAAS,GAAG2N,gBAAgB,CAAC3Y,GAAD,CAAlC;AACA,6CACKnI,GADL,GAEKsT,qBAAqB,CAACH,SAAD,CAF1B;AAID,CANc,EAMZ,EANY,CAAf;;;;ACHA;AACO,IAAM4N,eAAe,GAAG,wCAAxB;;AAGA,IAAMC,YAAY,GAAG,IAAI9iB,MAAJ,CAAW,aAAX,EAA0B,GAA1B,CAArB;;AAoBA,IAAM+iB,cAAc,GAAG,WAAvB;AACA,IAAMC,eAAe,GAAG,WAAxB;AACA,IAAMC,oBAAoB,GAAG,4BAA7B;AACA,IAAMC,sBAAsB,GAAG,oBAA/B;AACA,IAAMC,qBAAqB,GAAG,QAA9B;AACA,IAAMC,eAAe,GAAG,6BAAxB;AACP,IAAMC,SAAS,GAAG,CAChB,UADgB,EAEhB,UAFgB,EAGhB,QAHgB,EAIhB,OAJgB,EAKhB,QALgB,EAMhB,SANgB,EAOhB,QAPgB,CAAlB;AASA,IAAMC,YAAY,GAAGD,SAAS,CAAChhB,IAAV,CAAe,GAAf,CAArB;AACO,IAAMkhB,eAAe,GAAG,IAAIvjB,MAAJ,sBACfsjB,YADe,eAE7B,GAF6B,CAAxB;AAIP,IAAME,MAAM,GAAG,CACb,KADa,EAEb,KAFa,EAGb,KAHa,EAIb,KAJa,EAKb,KALa,EAMb,KANa,EAOb,KAPa,EAQb,KARa,EASb,KATa,EAUb,KAVa,EAWb,KAXa,EAYb,KAZa,CAAf;AAcA,IAAMC,SAAS,GAAGD,MAAM,CAACnhB,IAAP,CAAY,GAAZ,CAAlB;AACA,IAAMqhB,UAAU,GAAG,qCAAnB;AACA,IAAMC,UAAU,GAAG,wCAAnB;AACA,IAAMC,UAAU,GAAG,cAAnB;AACO,IAAMC,iBAAiB,GAAG,IAAI7jB,MAAJ,qLAC3B0jB,UAD2B,0BACXC,UADW,0BACKC,UADL,wCACkCH,SADlC,QAE/B,IAF+B,CAA1B;AAMP;;AACO,IAAMK,mBAAmB,GAAG,WAA5B;AAGP;AACA;;AACO,IAAMC,kBAAkB,GAAG,gBAA3B;AAEA,IAAMC,iBAAiB,GAAG,IAAIhkB,MAAJ,CAAW,2BAAX,EAAwC,GAAxC,CAA1B;;ACxEP;;AACe,SAASikB,WAAT,CAAqBtO,MAArB,EAA6B;AAAA;;AAC1C,SAAOxW,eAAe,CAACE,qDAAAsW,MAAM,CAACrW,OAAP,CAAeujB,eAAf,EAAgC,IAAhC,iBAAD,CAAtB;AACD;;ACLc,SAASjP,OAAT,CAAesQ,YAAf,EAA6B;AAC1CA,EAAAA,YAAY,GAAG7kB,0CAAA6kB,YAAY,MAAZ,CAAAA,YAAY,CAA3B;;AACA,MAAIC,4BAAQ,CAACC,QAAT,CAAkBF,YAAlB,CAAJ,EAAqC;AACnC,WAAOA,YAAP;AACD;;AAED,SAAO,IAAP;AACD;;ACHD;;AACe,SAASG,QAAT,CAAkBrO,GAAlB,QAAuC;AAAA,MAAd5Q,CAAc,QAAdA,CAAc;AAAA,MAAXwR,OAAW,QAAXA,OAAW;AACpD;AACA,MAAIZ,GAAG,CAAC9U,MAAJ,GAAa,IAAb,IAAqB8U,GAAG,CAAC9U,MAAJ,GAAa,CAAtC,EAAyC,OAAO,IAAP,CAFW;;AAKpD,MAAI0V,OAAO,IAAIpU,cAAc,CAACoU,OAAD,EAAU,EAAV,CAAd,KAAgCpU,cAAc,CAACwT,GAAD,EAAM,EAAN,CAA7D,EACE,OAAO,IAAP;AAEF,MAAMsO,OAAO,GAAGrS,SAAS,CAAC+D,GAAD,EAAM5Q,CAAN,CAAzB,CARoD;AAWpD;;AACA,MAAI0d,YAAY,CAACjjB,IAAb,CAAkBykB,OAAlB,CAAJ,EAAgC,OAAO,IAAP;AAEhC,SAAOnlB,eAAe,CAACE,0CAAAilB,OAAO,MAAP,CAAAA,OAAO,CAAR,CAAtB;AACD;;ACJM,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;AAAA;;AAC1C,SAAOnlB,sDAACmlB,UAAU,CAAChkB,KAAX,CAAiBqjB,iBAAjB,KAAuC,EAAxC,EACJxhB,IADI,CACC,GADD,EAEJ/C,OAFI,CAEI6jB,qBAFJ,EAE2B,GAF3B,EAGJ7jB,OAHI,CAGI4jB,sBAHJ,EAG4B,UAH5B,EAIJ5jB,OAJI,CAII2jB,oBAJJ,EAI0B,IAJ1B,iBAAP;AAMD;AAEM,SAASwB,UAAT,CAAoBD,UAApB,EAAgCzN,QAAhC,EAA0C4C,MAA1C,EAAkD;AACvD,MAAImK,mBAAmB,CAACjkB,IAApB,CAAyB2kB,UAAzB,CAAJ,EAA0C;AACxC,WAAOE,0BAAM,CAAC,IAAIC,IAAJ,CAASH,UAAT,CAAD,CAAb;AACD;;AAED,MAAIjB,eAAe,CAAC1jB,IAAhB,CAAqB2kB,UAArB,CAAJ,EAAsC;AACpC,QAAMI,SAAS,GAAGrB,eAAe,CAACzjB,IAAhB,CAAqB0kB,UAArB,CAAlB;AACA,WAAOE,0BAAM,GAAGG,QAAT,CAAkBD,SAAS,CAAC,CAAD,CAA3B,EAAgCA,SAAS,CAAC,CAAD,CAAzC,CAAP;AACD;;AAED,MAAIxB,eAAe,CAACvjB,IAAhB,CAAqB2kB,UAArB,CAAJ,EAAsC;AACpC,WAAOE,0BAAM,EAAb;AACD;;AAED,SAAO3N,QAAQ,GACX2N,0BAAM,CAACI,EAAP,CAAUN,UAAV,EAAsB7K,MAAM,IAAIoL,+BAAW,CAACP,UAAD,CAA3C,EAAyDzN,QAAzD,CADW,GAEX2N,0BAAM,CAACF,UAAD,EAAa7K,MAAM,IAAIoL,+BAAW,CAACP,UAAD,CAAlC,CAFV;AAGD;AAGD;;AACe,SAASQ,kBAAT,CACbR,UADa,EAGb;AAAA,iFADuB,EACvB;AAAA,MADEzN,QACF,QADEA,QACF;AAAA,MADY4C,MACZ,QADYA,MACZ;;AACA;AACA,MAAIoJ,cAAc,CAACljB,IAAf,CAAoB2kB,UAApB,KAAmCxB,eAAe,CAACnjB,IAAhB,CAAqB2kB,UAArB,CAAvC,EAAyE;AACvE,WAAO,IAAIG,IAAJ,CAASjkB,8BAAS8jB,UAAT,EAAqB,EAArB,CAAT,EAAmCS,WAAnC,EAAP;AACD;;AAED,MAAIC,IAAI,GAAGT,UAAU,CAACD,UAAD,EAAazN,QAAb,EAAuB4C,MAAvB,CAArB;;AAEA,MAAI,CAACuL,IAAI,CAACC,OAAL,EAAL,EAAqB;AACnBX,IAAAA,UAAU,GAAGD,eAAe,CAACC,UAAD,CAA5B;AACAU,IAAAA,IAAI,GAAGT,UAAU,CAACD,UAAD,EAAazN,QAAb,EAAuB4C,MAAvB,CAAjB;AACD;;AAED,SAAOuL,IAAI,CAACC,OAAL,KAAiBD,IAAI,CAACD,WAAL,EAAjB,GAAsC,IAA7C;AACD;;ACnDc,SAASG,gBAAT,CACbva,OADa,QAGb;AAAA,MADEzF,CACF,QADEA,CACF;AAAA,mCADKigB,kBACL;AAAA,wBADgCxV,KAChC;AAAA,MADgCA,KAChC,2BADwC,EACxC;AAAA,sBAD4CrQ,GAC5C;AAAA,MAD4CA,GAC5C,yBADkD,EAClD;AAAA,iCADsD0W,cACtD;AAAA,MADsDA,cACtD,oCADuE,IACvE;AACA;AACA;AACAjG,EAAAA,eAAe,CAACpF,OAAD,EAAUzF,CAAV,CAAf,CAHA;AAMA;AACA;;AACA,MAAI8Q,cAAJ,EAAoBzL,WAAW,CAACI,OAAD,EAAUzF,CAAV,CAAX,CARpB;;AAWA6L,EAAAA,iBAAiB,CAACpG,OAAD,EAAUzF,CAAV,EAAa5F,GAAb,CAAjB,CAXA;AAcA;AACA;;AACAoL,EAAAA,UAAU,CAACC,OAAD,EAAUzF,CAAV,EAAa5F,GAAb,CAAV,CAhBA;AAmBA;;AACAyL,EAAAA,aAAa,CAACJ,OAAD,EAAUzF,CAAV,CAAb,CApBA;AAuBA;AACA;;AACA8F,EAAAA,UAAU,CAACL,OAAD,EAAUzF,CAAV,CAAV,CAzBA;;AA4BAwK,EAAAA,YAAY,CAAC/E,OAAD,EAAUzF,CAAV,EAAayK,KAAb,CAAZ,CA5BA;AA+BA;AACA;AACA;;AACA,MAAIqG,cAAJ,EAAoBvG,SAAS,CAAC9E,OAAD,EAAUzF,CAAV,CAAT,CAlCpB;;AAqCAqG,EAAAA,WAAW,CAACZ,OAAD,EAAUzF,CAAV,CAAX,CArCA;;AAwCAmG,EAAAA,eAAe,CAACV,OAAD,EAAUzF,CAAV,CAAf;AAEA,SAAOyF,OAAP;AACD;;ACtDc,SAASya,UAAT,CAAoBzV,KAApB,QAAuC;AAAA;;AAAA,MAAVrQ,GAAU,QAAVA,GAAU;AAAA,MAAL4F,CAAK,QAALA,CAAK;;AACpD;AACA;AACA,MAAI2e,kBAAkB,CAAClkB,IAAnB,CAAwBgQ,KAAxB,CAAJ,EAAoC;AAClCA,IAAAA,KAAK,GAAG0V,iBAAiB,CAAC1V,KAAD,EAAQrQ,GAAR,CAAzB;AACD,GALmD;AAQpD;;;AACA,MAAIqQ,KAAK,CAAC3O,MAAN,GAAe,GAAnB,EAAwB;AACtB;AACA,QAAM4U,EAAE,GAAG1Q,CAAC,CAAC,IAAD,CAAZ;;AACA,QAAI0Q,EAAE,CAAC5U,MAAH,KAAc,CAAlB,EAAqB;AACnB2O,MAAAA,KAAK,GAAGiG,EAAE,CAAC1W,IAAH,EAAR;AACD;AACF,GAfmD;;;AAkBpD,SAAOD,eAAe,CAACE,qDAAA4S,SAAS,CAACpC,KAAD,EAAQzK,CAAR,CAAT,gBAAD,CAAtB;AACD;;ACpBD,SAASogB,sBAAT,CAAgCC,UAAhC,EAA4CrmB,IAA5C,EAAkD;AAChD;AACA;AACA;AACA,MAAIqmB,UAAU,CAACvkB,MAAX,IAAqB,CAAzB,EAA4B;AAAA;;AAC1B;AACA;AACA;AACA,QAAMwkB,UAAU,GAAG7jB,4CAAA4jB,UAAU,MAAV,CAAAA,UAAU,EAAQ,UAAC3jB,GAAD,EAAM6jB,SAAN,EAAoB;AACvD7jB,MAAAA,GAAG,CAAC6jB,SAAD,CAAH,GAAiB7jB,GAAG,CAAC6jB,SAAD,CAAH,GAAiB7jB,GAAG,CAAC6jB,SAAD,CAAH,GAAiB,CAAlC,GAAsC,CAAvD;AACA,aAAO7jB,GAAP;AACD,KAH4B,EAG1B,EAH0B,CAA7B;;AAJ0B,gCASGD,4FAAgB6jB,UAAhB,kBAC3B,UAAC5jB,GAAD,EAAMmI,GAAN,EAAc;AACZ,UAAInI,GAAG,CAAC,CAAD,CAAH,GAAS4jB,UAAU,CAACzb,GAAD,CAAvB,EAA8B;AAC5B,eAAO,CAACA,GAAD,EAAMyb,UAAU,CAACzb,GAAD,CAAhB,CAAP;AACD;;AAED,aAAOnI,GAAP;AACD,KAP0B,EAQ3B,CAAC,CAAD,EAAI,CAAJ,CAR2B,CATH;AAAA;AAAA,QASnB8jB,OATmB;AAAA,QASVC,SATU;AAqB1B;AACA;AACA;;;AACA,QAAIA,SAAS,IAAI,CAAb,IAAkBD,OAAO,CAAC1kB,MAAR,IAAkB,CAAxC,EAA2C;AACzCukB,MAAAA,UAAU,GAAGrmB,IAAI,CAACwB,KAAL,CAAWglB,OAAX,CAAb;AACD;;AAED,QAAME,SAAS,GAAG,CAACL,UAAU,CAAC,CAAD,CAAX,EAAgB9iB,2CAAA8iB,UAAU,MAAV,CAAAA,UAAU,EAAO,CAAC,CAAR,CAA1B,CAAlB;;AACA,QAAMM,UAAU,GAAGlkB,4CAAAikB,SAAS,MAAT,CAAAA,SAAS,EAC1B,UAAChkB,GAAD,EAAMgT,GAAN;AAAA,aAAehT,GAAG,CAACZ,MAAJ,GAAa4T,GAAG,CAAC5T,MAAjB,GAA0BY,GAA1B,GAAgCgT,GAA/C;AAAA,KAD0B,EAE1B,EAF0B,CAA5B;;AAKA,QAAIiR,UAAU,CAAC7kB,MAAX,GAAoB,EAAxB,EAA4B;AAC1B,aAAO6kB,UAAP;AACD;;AAED,WAAO3mB,IAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAAS4mB,oBAAT,CAA8BP,UAA9B,EAA0CjmB,GAA1C,EAA+C;AAC7C;AACA;AACA;AACA;AACA;AACA;AAN6C,mBAO5B+B,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAP4B;AAAA,MAOrCkC,IAPqC,cAOrCA,IAPqC;;AAQ7C,MAAMukB,WAAW,GAAGvkB,IAAI,CAACpC,OAAL,CAAa0kB,iBAAb,EAAgC,EAAhC,CAApB;AAEA,MAAMkC,SAAS,GAAGT,UAAU,CAAC,CAAD,CAAV,CAActkB,WAAd,GAA4B7B,OAA5B,CAAoC,GAApC,EAAyC,EAAzC,CAAlB;AACA,MAAM6mB,cAAc,GAAGC,yBAAK,CAACC,WAAN,CAAkBH,SAAlB,EAA6BD,WAA7B,CAAvB;;AAEA,MAAIE,cAAc,GAAG,GAAjB,IAAwBD,SAAS,CAAChlB,MAAV,GAAmB,CAA/C,EAAkD;AAChD,WAAOyB,2CAAA8iB,UAAU,MAAV,CAAAA,UAAU,EAAO,CAAP,CAAV,CAAoBpjB,IAApB,CAAyB,EAAzB,CAAP;AACD;;AAED,MAAMikB,OAAO,GAAG3jB,2CAAA8iB,UAAU,MAAV,CAAAA,UAAU,EACjB,CAAC,CADgB,CAAV,CACH,CADG,EAEbtkB,WAFa,GAGb7B,OAHa,CAGL,GAHK,EAGA,EAHA,CAAhB;;AAIA,MAAMinB,YAAY,GAAGH,yBAAK,CAACC,WAAN,CAAkBC,OAAlB,EAA2BL,WAA3B,CAArB;;AAEA,MAAIM,YAAY,GAAG,GAAf,IAAsBD,OAAO,CAACplB,MAAR,IAAkB,CAA5C,EAA+C;AAC7C,WAAOyB,2CAAA8iB,UAAU,MAAV,CAAAA,UAAU,EAAO,CAAP,EAAU,CAAC,CAAX,CAAV,CAAwBpjB,IAAxB,CAA6B,EAA7B,CAAP;AACD;;AAED,SAAO,IAAP;AACD;AAGD;;;AACe,SAASkjB,iBAAT,CAA2B1V,KAA3B,EAA4C;AAAA,MAAVrQ,GAAU,uEAAJ,EAAI;AACzD;AACA;AACA,MAAMimB,UAAU,GAAG5V,KAAK,CAACjP,KAAN,CAAYmjB,kBAAZ,CAAnB;;AACA,MAAI0B,UAAU,CAACvkB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO2O,KAAP;AACD;;AAED,MAAI2W,QAAQ,GAAGhB,sBAAsB,CAACC,UAAD,EAAa5V,KAAb,CAArC;AACA,MAAI2W,QAAJ,EAAc,OAAOA,QAAP;AAEdA,EAAAA,QAAQ,GAAGR,oBAAoB,CAACP,UAAD,EAAajmB,GAAb,CAA/B;AACA,MAAIgnB,QAAJ,EAAc,OAAOA,QAAP,CAZ2C;AAezD;;AACA,SAAO3W,KAAP;AACD;;AC/FD,IAAM4W,QAAQ,GAAG;AACf9Q,EAAAA,MAAM,EAAEsO,WADO;AAEfvN,EAAAA,cAAc,EAAEgQ,OAFD;AAGf1Q,EAAAA,GAAG,EAAEqO,QAHU;AAIfzO,EAAAA,cAAc,EAAEoP,kBAJD;AAKfviB,EAAAA,OAAO,EAAEkkB,gBALM;AAMf9W,EAAAA,KAAK,EAAEyV;AANQ,CAAjB;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASsB,eAAT,CAAyBxhB,CAAzB,EAA4ByhB,IAA5B,EAAkC;AAC/C,MAAIA,IAAI,CAAC9e,uBAAT,EAAkC;AAChC3C,IAAAA,CAAC,GAAG2C,uBAAuB,CAAC3C,CAAD,CAA3B;AACD;;AAEDA,EAAAA,CAAC,GAAGyE,mBAAmB,CAACzE,CAAD,CAAvB;AACAA,EAAAA,CAAC,GAAG0I,YAAY,CAAC1I,CAAD,EAAIyhB,IAAI,CAACrZ,WAAT,CAAhB;AACA,MAAMsZ,aAAa,GAAG9X,gBAAgB,CAAC5J,CAAD,CAAtC;AAEA,SAAO0hB,aAAP;AACD;;;;;;;;;;;ACjBD,IAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,WAAW,EAAE;AACXjf,IAAAA,uBAAuB,EAAE,IADd;AAEXyF,IAAAA,WAAW,EAAE,IAFF;AAGX6X,IAAAA,kBAAkB,EAAE;AAHT,GADiB;AAO9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA4B,EAAAA,OA1B8B,yBA0BGJ,IA1BH,EA0BS;AAAA;;AAAA,QAA7BzhB,CAA6B,QAA7BA,CAA6B;AAAA,QAA1B8E,IAA0B,QAA1BA,IAA0B;AAAA,QAApB2F,KAAoB,QAApBA,KAAoB;AAAA,QAAbrQ,GAAa,QAAbA,GAAa;AACrCqnB,IAAAA,IAAI,uCAAQ,KAAKG,WAAb,GAA6BH,IAA7B,CAAJ;AAEAzhB,IAAAA,CAAC,GAAGA,CAAC,IAAIlC,2BAAO,CAACoR,IAAR,CAAapK,IAAb,CAAT,CAHqC;AAMrC;;AACA,QAAIzE,IAAI,GAAG,KAAKyhB,cAAL,CAAoB9hB,CAApB,EAAuByK,KAAvB,EAA8BrQ,GAA9B,EAAmCqnB,IAAnC,CAAX;;AAEA,QAAIjU,gBAAgB,CAACnN,IAAD,CAApB,EAA4B;AAC1B,aAAO,KAAK0hB,kBAAL,CAAwB1hB,IAAxB,EAA8BL,CAA9B,CAAP;AACD,KAXoC;AAcrC;AACA;;;AAfqC,iDAgBnBqM,4FAAgBoV,IAAhB,kBAA6B,UAAAO,CAAC;AAAA,aAAIP,IAAI,CAACO,CAAD,CAAJ,KAAY,IAAhB;AAAA,KAA9B,CAhBmB;AAAA;;AAAA;AAgBrC,0DAAuE;AAAA,YAA5Dnd,GAA4D;AACrE4c,QAAAA,IAAI,CAAC5c,GAAD,CAAJ,GAAY,KAAZ;AACA7E,QAAAA,CAAC,GAAGlC,2BAAO,CAACoR,IAAR,CAAapK,IAAb,CAAJ;AAEAzE,QAAAA,IAAI,GAAG,KAAKyhB,cAAL,CAAoB9hB,CAApB,EAAuByK,KAAvB,EAA8BrQ,GAA9B,EAAmCqnB,IAAnC,CAAP;;AAEA,YAAIjU,gBAAgB,CAACnN,IAAD,CAApB,EAA4B;AAC1B;AACD;AACF;AAzBoC;AAAA;AAAA;AAAA;AAAA;;AA2BrC,WAAO,KAAK0hB,kBAAL,CAAwB1hB,IAAxB,EAA8BL,CAA9B,CAAP;AACD,GAtD6B;AAwD9B;AACA8hB,EAAAA,cAzD8B,0BAyDf9hB,CAzDe,EAyDZyK,KAzDY,EAyDLrQ,GAzDK,EAyDAqnB,IAzDA,EAyDM;AAClC,WAAOF,gBAAY,CAACC,eAAe,CAACxhB,CAAD,EAAIyhB,IAAJ,CAAhB,EAA2B;AAC5CzhB,MAAAA,CAAC,EAADA,CAD4C;AAE5CigB,MAAAA,kBAAkB,EAAEwB,IAAI,CAACxB,kBAFmB;AAG5CxV,MAAAA,KAAK,EAALA,KAH4C;AAI5CrQ,MAAAA,GAAG,EAAHA;AAJ4C,KAA3B,CAAnB;AAMD,GAhE6B;AAkE9B;AACA;AACA;AACA2nB,EAAAA,kBArE8B,8BAqEX1hB,IArEW,EAqELL,CArEK,EAqEF;AAC1B,QAAI,CAACK,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,WAAOtG,eAAe,CAACiG,CAAC,CAAC8E,IAAF,CAAOzE,IAAP,CAAD,CAAtB;AACD;AA3E6B,CAAhC;;ACRA;AACA;AACA;AAEA;AACA;AACA;AACO,IAAM4hB,sBAAsB,GAAG,CACpC,iBADoC,EAEpC,UAFoC,EAGpC,SAHoC,EAIpC,UAJoC,EAKpC,OALoC,CAA/B;AASP;;AACO,IAAMC,oBAAoB,GAAG,CAAC,UAAD,CAA7B;AAGP;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,sBAAsB,GAAG,CACpC,sBADoC,EAEpC,kBAFoC,EAGpC,kBAHoC,EAIpC,YAJoC,EAKpC,mBALoC,EAMpC,cANoC,CAA/B;AASA,IAAMC,oBAAoB,GAAG,CAClC,YADkC,EAElC,cAFkC,EAGlC,cAHkC,EAIlC,aAJkC,EAKlC,aALkC,EAMlC,aANkC,EAOlC,aAPkC,EAQlC,eARkC,EASlC,eATkC,EAUlC,iBAVkC,EAWlC,UAXkC,EAYlC,YAZkC,EAalC,IAbkC,EAclC,iBAdkC,EAelC,OAfkC,CAA7B;;ACzBP,IAAMC,qBAAqB,GAAG;AAC5BR,EAAAA,OAD4B,yBACG;AAAA,QAArB7hB,CAAqB,QAArBA,CAAqB;AAAA,QAAlB5F,GAAkB,QAAlBA,GAAkB;AAAA,QAAbkoB,SAAa,QAAbA,SAAa;AAC7B;AACA;AACA,QAAI7X,KAAJ;AAEAA,IAAAA,KAAK,GAAGwB,eAAe,CAACjM,CAAD,EAAIiiB,sBAAJ,EAA4BK,SAA5B,CAAvB;AACA,QAAI7X,KAAJ,EAAW,OAAOyV,UAAU,CAACzV,KAAD,EAAQ;AAAErQ,MAAAA,GAAG,EAAHA,GAAF;AAAO4F,MAAAA,CAAC,EAADA;AAAP,KAAR,CAAjB,CANkB;AAS7B;;AACAyK,IAAAA,KAAK,GAAGwC,oBAAoB,CAACjN,CAAD,EAAImiB,sBAAJ,CAA5B;AACA,QAAI1X,KAAJ,EAAW,OAAOyV,UAAU,CAACzV,KAAD,EAAQ;AAAErQ,MAAAA,GAAG,EAAHA,GAAF;AAAO4F,MAAAA,CAAC,EAADA;AAAP,KAAR,CAAjB,CAXkB;;AAc7ByK,IAAAA,KAAK,GAAGwB,eAAe,CAACjM,CAAD,EAAIkiB,oBAAJ,EAA0BI,SAA1B,CAAvB;AACA,QAAI7X,KAAJ,EAAW,OAAOyV,UAAU,CAACzV,KAAD,EAAQ;AAAErQ,MAAAA,GAAG,EAAHA,GAAF;AAAO4F,MAAAA,CAAC,EAADA;AAAP,KAAR,CAAjB,CAfkB;;AAkB7ByK,IAAAA,KAAK,GAAGwC,oBAAoB,CAACjN,CAAD,EAAIoiB,oBAAJ,CAA5B;AACA,QAAI3X,KAAJ,EAAW,OAAOyV,UAAU,CAACzV,KAAD,EAAQ;AAAErQ,MAAAA,GAAG,EAAHA,GAAF;AAAO4F,MAAAA,CAAC,EAADA;AAAP,KAAR,CAAjB,CAnBkB;;AAsB7B,WAAO,EAAP;AACD;AAxB2B,CAA9B;;ACVA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMuiB,gBAAgB,GAAG,CAC9B,KAD8B,EAE9B,OAF8B,EAG9B,WAH8B,EAI9B,eAJ8B,EAK9B,YAL8B,EAM9B,WAN8B,EAO9B,SAP8B,CAAzB;AAUA,IAAMC,iBAAiB,GAAG,GAA1B;AAGP;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,gBAAgB,GAAG,CAC9B,sBAD8B,EAE9B,mBAF8B,EAG9B,oBAH8B,EAI9B,mBAJ8B,EAK9B,oBAL8B,EAM9B,qBAN8B,EAO9B,aAP8B,EAQ9B,iBAR8B,EAS9B,oBAT8B,EAU9B,qBAV8B,EAW9B,eAX8B,EAY9B,YAZ8B,EAa9B,YAb8B,EAc9B,cAd8B,EAe9B,cAf8B,EAgB9B,yBAhB8B,EAiB9B,qBAjB8B,EAkB9B,qBAlB8B,EAmB9B,SAnB8B,EAoB9B,SApB8B,EAqB9B,gBArB8B,EAsB9B,gBAtB8B,EAuB9B,SAvB8B,CAAzB;AA2BP;;AACA,IAAMC,QAAQ,GAAG,aAAjB;AACO,IAAMC,mBAAmB,GAAG,CACjC,CAAC,SAAD,EAAYD,QAAZ,CADiC,EAEjC,CAAC,SAAD,EAAYA,QAAZ,CAFiC,CAA5B;;;;;;;AC5CP,IAAME,sBAAsB,GAAG;AAC7Bf,EAAAA,OAD6B,yBACH;AAAA,QAAhB7hB,CAAgB,QAAhBA,CAAgB;AAAA,QAAbsiB,SAAa,QAAbA,SAAa;AACxB,QAAI/R,MAAJ,CADwB;AAIxB;;AACAA,IAAAA,MAAM,GAAGtE,eAAe,CAACjM,CAAD,EAAIuiB,gBAAJ,EAAsBD,SAAtB,CAAxB;;AACA,QAAI/R,MAAM,IAAIA,MAAM,CAACzU,MAAP,GAAgB0mB,iBAA9B,EAAiD;AAC/C,aAAO3D,WAAW,CAACtO,MAAD,CAAlB;AACD,KARuB;;;AAWxBA,IAAAA,MAAM,GAAGtD,oBAAoB,CAACjN,CAAD,EAAIyiB,gBAAJ,EAAsB,CAAtB,CAA7B;;AACA,QAAIlS,MAAM,IAAIA,MAAM,CAACzU,MAAP,GAAgB0mB,iBAA9B,EAAiD;AAC/C,aAAO3D,WAAW,CAACtO,MAAD,CAAlB;AACD,KAduB;AAiBxB;AACA;;;AAlBwB,iDAmBQoS,mBAnBR;AAAA;;AAAA;AAmBxB,0DAAqD;AAAA;AAAA,YAAzCzhB,QAAyC;AAAA,YAA/B2hB,KAA+B;;AACnD,YAAMxiB,IAAI,GAAGL,CAAC,CAACkB,QAAD,CAAd;;AACA,YAAIb,IAAI,CAACvE,MAAL,KAAgB,CAApB,EAAuB;AACrB,cAAM9B,IAAI,GAAGqG,IAAI,CAACrG,IAAL,EAAb;;AACA,cAAI6oB,KAAK,CAACpoB,IAAN,CAAWT,IAAX,CAAJ,EAAsB;AACpB,mBAAO6kB,WAAW,CAAC7kB,IAAD,CAAlB;AACD;AACF;AACF;AA3BuB;AAAA;AAAA;AAAA;AAAA;;AA6BxB,WAAO,IAAP;AACD;AA/B4B,CAA/B;;ACVA;AACA;AACA;AACA;AACO,IAAM8oB,wBAAwB,GAAG,CACtC,wBADsC,EAEtC,aAFsC,EAGtC,SAHsC,EAItC,gBAJsC,EAKtC,WALsC,EAMtC,cANsC,EAOtC,UAPsC,EAQtC,UARsC,EAStC,SATsC,EAUtC,eAVsC,EAWtC,UAXsC,EAYtC,cAZsC,EAatC,qBAbsC,EActC,cAdsC,EAetC,SAfsC,EAgBtC,MAhBsC,CAAjC;AAoBP;AACA;;AACO,IAAMC,wBAAwB,GAAG,CACtC,4BADsC,EAEtC,oBAFsC,EAGtC,0BAHsC,EAItC,kBAJsC,EAKtC,oBALsC,EAMtC,kBANsC,EAOtC,iBAPsC,EAQtC,aARsC,EAStC,eATsC,EAUtC,qBAVsC,EAWtC,mBAXsC,EAYtC,cAZsC,EAatC,aAbsC,EActC,YAdsC,EAetC,kBAfsC,EAgBtC,WAhBsC,EAiBtC,UAjBsC,CAAjC;AAqBP;AACA;;AACA,IAAMC,eAAe,GAAG,mDAAxB;AACO,IAAMC,sBAAsB,GAAG,CACpC,IAAIroB,MAAJ,CAAW,4BAAX,EAAyC,GAAzC,CADoC,EAEpC,IAAIA,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,CAFoC,EAGpC,IAAIA,MAAJ,sBAAyBooB,eAAzB,kBAAuD,GAAvD,CAHoC,CAA/B;;ACxCP,IAAME,6BAA6B,GAAG;AACpCrB,EAAAA,OADoC,yBACL;AAAA,QAArB7hB,CAAqB,QAArBA,CAAqB;AAAA,QAAlB5F,GAAkB,QAAlBA,GAAkB;AAAA,QAAbkoB,SAAa,QAAbA,SAAa;AAC7B,QAAIa,aAAJ,CAD6B;AAG7B;AACA;;AACAA,IAAAA,aAAa,GAAGlX,eAAe,CAC7BjM,CAD6B,EAE7B8iB,wBAF6B,EAG7BR,SAH6B,EAI7B,KAJ6B,CAA/B;AAMA,QAAIa,aAAJ,EAAmB,OAAOvD,kBAAkB,CAACuD,aAAD,CAAzB,CAXU;AAc7B;;AACAA,IAAAA,aAAa,GAAGlW,oBAAoB,CAACjN,CAAD,EAAI+iB,wBAAJ,CAApC;AACA,QAAII,aAAJ,EAAmB,OAAOvD,kBAAkB,CAACuD,aAAD,CAAzB,CAhBU;;AAmB7BA,IAAAA,aAAa,GAAGhpB,cAAc,CAACC,GAAD,EAAM6oB,sBAAN,CAA9B;AACA,QAAIE,aAAJ,EAAmB,OAAOvD,kBAAkB,CAACuD,aAAD,CAAzB;AAEnB,WAAO,IAAP;AACD;AAxBmC,CAAtC;;ACVA;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG;AAC1BvB,EAAAA,OAD0B,qBAChB;AACR,WAAO,IAAP;AACD;AAHyB,CAA5B;;ACJA;AACA;AACA;AACO,IAAMwB,wBAAwB,GAAG,CACtC,UADsC,EAEtC,eAFsC,EAGtC,WAHsC,CAAjC;AAMA,IAAMC,wBAAwB,GAAG,CAAC,qBAAD,CAAjC;AAEA,IAAMC,6BAA6B,GAAG,CAC3C,QAD2C,EAE3C,YAF2C,EAG3C,OAH2C,EAI3C,OAJ2C,EAK3C,UAL2C,CAAtC;AAOA,IAAMC,gCAAgC,GAAG,IAAI5oB,MAAJ,CAC9C2oB,6BAA6B,CAACtmB,IAA9B,CAAmC,GAAnC,CAD8C,EAE9C,GAF8C,CAAzC;AAKA,IAAMwmB,6BAA6B,GAAG,CAC3C,QAD2C,EAE3C,QAF2C,EAG3C,OAH2C,EAI3C,UAJ2C,EAK3C,UAL2C,EAM3C,MAN2C,EAO3C,IAP2C,EAQ3C,YAR2C,EAS3C,MAT2C,EAU3C,QAV2C,EAW3C,QAX2C,EAY3C,KAZ2C,EAa3C,QAb2C,EAc3C,SAd2C,EAe3C,QAf2C,EAgB3C,SAhB2C,EAiB3C,SAjB2C,EAkB3C,QAlB2C,EAmB3C,OAnB2C,EAoB3C,UApB2C,EAqB3C,SArB2C,EAsB3C,OAtB2C,EAuB3C,OAvB2C,EAwB3C,KAxB2C,EAyB3C,aAzB2C,CAAtC;AA2BA,IAAMC,gCAAgC,GAAG,IAAI9oB,MAAJ,CAC9C6oB,6BAA6B,CAACxmB,IAA9B,CAAmC,GAAnC,CAD8C,EAE9C,GAF8C,CAAzC;AAKA,IAAM0mB,MAAM,GAAG,gBAAf;AACA,IAAMC,MAAM,GAAG,kBAAf;;AC/CP,SAASC,MAAT,CAAgBvjB,KAAhB,EAAuB;AAAA;;AACrB,0EAAUA,KAAK,CAACE,IAAN,CAAW,OAAX,KAAuB,EAAjC,uBAAuCF,KAAK,CAACE,IAAN,CAAW,IAAX,KAAoB,EAA3D;AACD;;;AAGM,SAASsjB,aAAT,CAAuB1pB,GAAvB,EAA4B;AACjCA,EAAAA,GAAG,GAAGH,0CAAAG,GAAG,MAAH,CAAAA,GAAG,CAAT;AACA,MAAI6M,KAAK,GAAG,CAAZ;;AAEA,MAAIuc,gCAAgC,CAAC/oB,IAAjC,CAAsCL,GAAtC,CAAJ,EAAgD;AAC9C6M,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,MAAIyc,gCAAgC,CAACjpB,IAAjC,CAAsCL,GAAtC,CAAJ,EAAgD;AAC9C6M,IAAAA,KAAK,IAAI,EAAT;AACD,GAVgC;AAajC;;;AACA,MAAI0c,MAAM,CAAClpB,IAAP,CAAYL,GAAZ,CAAJ,EAAsB;AACpB6M,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,MAAI2c,MAAM,CAACnpB,IAAP,CAAYL,GAAZ,CAAJ,EAAsB;AACpB6M,IAAAA,KAAK,IAAI,EAAT;AACD,GApBgC;;;AAwBjC,SAAOA,KAAP;AACD;;AAGM,SAAS8c,SAAT,CAAmB9e,IAAnB,EAAyB;AAC9B,MAAIA,IAAI,CAACzE,IAAL,CAAU,KAAV,CAAJ,EAAsB;AACpB,WAAO,CAAP;AACD;;AAED,SAAO,CAAP;AACD;AAGD;;AACO,SAASwjB,cAAT,CAAwB/e,IAAxB,EAA8B;AAAA;;AACnC,MAAIgC,KAAK,GAAG,CAAZ;AACA,MAAMgd,UAAU,GAAGhf,IAAI,CAACT,OAAL,CAAa,QAAb,EAAuBmF,KAAvB,EAAnB;;AAEA,MAAIsa,UAAU,CAACnoB,MAAX,KAAsB,CAA1B,EAA6B;AAC3BmL,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,MAAMuB,OAAO,GAAGvD,IAAI,CAACmB,MAAL,EAAhB;AACA,MAAI8d,QAAJ;;AACA,MAAI1b,OAAO,CAAC1M,MAAR,KAAmB,CAAvB,EAA0B;AACxBooB,IAAAA,QAAQ,GAAG1b,OAAO,CAACpC,MAAR,EAAX;AACD;;AAED,4DAACoC,OAAD,EAAU0b,QAAV,mBAA4B,UAAA5jB,KAAK,EAAI;AACnC,QAAIqG,cAAc,CAAClM,IAAf,CAAoBopB,MAAM,CAACvjB,KAAD,CAA1B,CAAJ,EAAwC;AACtC2G,MAAAA,KAAK,IAAI,EAAT;AACD;AACF,GAJD;;AAMA,SAAOA,KAAP;AACD;AAGD;;AACO,SAASkd,cAAT,CAAwBlf,IAAxB,EAA8B;AACnC,MAAIgC,KAAK,GAAG,CAAZ;AACA,MAAMiC,QAAQ,GAAGjE,IAAI,CAAC3B,IAAL,EAAjB;AACA,MAAMI,OAAO,GAAGwF,QAAQ,CAAC9K,GAAT,CAAa,CAAb,CAAhB;;AAEA,MAAIsF,OAAO,IAAIA,OAAO,CAACH,OAAR,CAAgBxH,WAAhB,OAAkC,YAAjD,EAA+D;AAC7DkL,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,MAAIN,cAAc,CAAClM,IAAf,CAAoBopB,MAAM,CAAC3a,QAAD,CAA1B,CAAJ,EAA2C;AACzCjC,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,SAAOA,KAAP;AACD;AAEM,SAASmd,iBAAT,CAA2Bnf,IAA3B,EAAiC;AACtC,MAAIgC,KAAK,GAAG,CAAZ;;AAEA,MAAM9B,KAAK,GAAGgC,gCAAWlC,IAAI,CAACzE,IAAL,CAAU,OAAV,CAAX,CAAd;;AACA,MAAM0E,MAAM,GAAGiC,gCAAWlC,IAAI,CAACzE,IAAL,CAAU,QAAV,CAAX,CAAf;;AACA,MAAM6Q,GAAG,GAAGpM,IAAI,CAACzE,IAAL,CAAU,KAAV,CAAZ,CALsC;;AAQtC,MAAI2E,KAAK,IAAIA,KAAK,IAAI,EAAtB,EAA0B;AACxB8B,IAAAA,KAAK,IAAI,EAAT;AACD,GAVqC;;;AAatC,MAAI/B,MAAM,IAAIA,MAAM,IAAI,EAAxB,EAA4B;AAC1B+B,IAAAA,KAAK,IAAI,EAAT;AACD;;AAED,MAAI9B,KAAK,IAAID,MAAT,IAAmB,CAACtI,8CAAAyU,GAAG,MAAH,CAAAA,GAAG,EAAU,QAAV,CAA3B,EAAgD;AAC9C,QAAMgT,IAAI,GAAGlf,KAAK,GAAGD,MAArB;;AACA,QAAImf,IAAI,GAAG,IAAX,EAAiB;AACf;AACApd,MAAAA,KAAK,IAAI,GAAT;AACD,KAHD,MAGO;AACLA,MAAAA,KAAK,IAAIS,IAAI,CAAC4c,KAAL,CAAWD,IAAI,GAAG,IAAlB,CAAT;AACD;AACF;;AAED,SAAOpd,KAAP;AACD;AAEM,SAASsd,eAAT,CAAyBC,KAAzB,EAAgC7oB,KAAhC,EAAuC;AAC5C,SAAO6oB,KAAK,CAAC1oB,MAAN,GAAe,CAAf,GAAmBH,KAA1B;AACD;;;;;;;AC3GD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAM8oB,4BAA4B,GAAG;AACnC5C,EAAAA,OADmC,yBACM;AAAA;;AAAA,QAA/B7hB,CAA+B,QAA/BA,CAA+B;AAAA,QAA5B3C,OAA4B,QAA5BA,OAA4B;AAAA,QAAnBilB,SAAmB,QAAnBA,SAAmB;AAAA,QAARxd,IAAQ,QAARA,IAAQ;AACvC,QAAI4f,QAAJ;;AACA,QAAI,CAAC1kB,CAAC,CAACjC,OAAH,IAAciC,CAAC,CAAC,MAAD,CAAD,CAAUlE,MAAV,KAAqB,CAAvC,EAA0C;AACxCkE,MAAAA,CAAC,CAAC,GAAD,CAAD,CACG2J,KADH,GAEGoH,OAFH,CAEWjM,IAFX;AAGD,KANsC;AASvC;AACA;AACA;;;AACA,QAAM6f,QAAQ,GAAG1Y,eAAe,CAC9BjM,CAD8B,EAE9BqjB,wBAF8B,EAG9Bf,SAH8B,EAI9B,KAJ8B,CAAhC;;AAOA,QAAIqC,QAAJ,EAAc;AACZD,MAAAA,QAAQ,GAAGpD,OAAU,CAACqD,QAAD,CAArB;AAEA,UAAID,QAAJ,EAAc,OAAOA,QAAP;AACf,KAvBsC;AA0BvC;AACA;;;AACA,QAAMtZ,QAAQ,GAAGpL,CAAC,CAAC3C,OAAD,CAAlB;AACA,QAAMunB,IAAI,GAAG5kB,CAAC,CAAC,KAAD,EAAQoL,QAAR,CAAD,CAAmBuB,OAAnB,EAAb;AACA,QAAMkY,SAAS,GAAG,EAAlB;;AAEA,iDAAAD,IAAI,MAAJ,CAAAA,IAAI,EAAS,UAACrf,GAAD,EAAM5J,KAAN,EAAgB;AAC3B,UAAMsJ,IAAI,GAAGjF,CAAC,CAACuF,GAAD,CAAd;AACA,UAAM8L,GAAG,GAAGpM,IAAI,CAACzE,IAAL,CAAU,KAAV,CAAZ;AAEA,UAAI,CAAC6Q,GAAL,EAAU;AAEV,UAAIpK,KAAK,GAAG6c,aAAa,CAACzS,GAAD,CAAzB;AACApK,MAAAA,KAAK,IAAI8c,SAAS,CAAC9e,IAAD,CAAlB;AACAgC,MAAAA,KAAK,IAAI+c,cAAc,CAAC/e,IAAD,CAAvB;AACAgC,MAAAA,KAAK,IAAIkd,cAAc,CAAClf,IAAD,CAAvB;AACAgC,MAAAA,KAAK,IAAImd,iBAAiB,CAACnf,IAAD,CAA1B;AACAgC,MAAAA,KAAK,IAAIsd,eAAe,CAACK,IAAD,EAAOjpB,KAAP,CAAxB;AAEAkpB,MAAAA,SAAS,CAACxT,GAAD,CAAT,GAAiBpK,KAAjB;AACD,KAdG,CAAJ;;AAhCuC,gCAgDZxK,4FAAgBooB,SAAhB,kBACzB,UAACnoB,GAAD,EAAMmI,GAAN;AAAA,aAAeggB,SAAS,CAAChgB,GAAD,CAAT,GAAiBnI,GAAG,CAAC,CAAD,CAApB,GAA0B,CAACmI,GAAD,EAAMggB,SAAS,CAAChgB,GAAD,CAAf,CAA1B,GAAkDnI,GAAjE;AAAA,KADyB,EAEzB,CAAC,IAAD,EAAO,CAAP,CAFyB,CAhDY;AAAA;AAAA,QAgDhCooB,MAhDgC;AAAA,QAgDxB/b,QAhDwB;;AAqDvC,QAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB2b,MAAAA,QAAQ,GAAGpD,OAAU,CAACwD,MAAD,CAArB;AAEA,UAAIJ,QAAJ,EAAc,OAAOA,QAAP;AACf,KAzDsC;AA4DvC;AACA;;;AA7DuC,iDA8DhBpB,wBA9DgB;AAAA;;AAAA;AA8DvC,0DAAiD;AAAA,YAAtCpiB,QAAsC;AAC/C,YAAMZ,KAAK,GAAGN,CAAC,CAACkB,QAAD,CAAD,CAAYyI,KAAZ,EAAd;AACA,YAAM0H,GAAG,GAAG/Q,KAAK,CAACE,IAAN,CAAW,KAAX,CAAZ;;AACA,YAAI6Q,GAAJ,EAAS;AACPqT,UAAAA,QAAQ,GAAGpD,OAAU,CAACjQ,GAAD,CAArB;AACA,cAAIqT,QAAJ,EAAc,OAAOA,QAAP;AACf;;AAED,YAAMnlB,IAAI,GAAGe,KAAK,CAACE,IAAN,CAAW,MAAX,CAAb;;AACA,YAAIjB,IAAJ,EAAU;AACRmlB,UAAAA,QAAQ,GAAGpD,OAAU,CAAC/hB,IAAD,CAArB;AACA,cAAImlB,QAAJ,EAAc,OAAOA,QAAP;AACf;;AAED,YAAMnkB,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAW,OAAX,CAAd;;AACA,YAAID,KAAJ,EAAW;AACTmkB,UAAAA,QAAQ,GAAGpD,OAAU,CAAC/gB,KAAD,CAArB;AACA,cAAImkB,QAAJ,EAAc,OAAOA,QAAP;AACf;AACF;AAjFsC;AAAA;AAAA;AAAA;AAAA;;AAmFvC,WAAO,IAAP;AACD;AArFkC,CAArC;;ACvBe,SAASK,eAAT,CAAyB9d,KAAzB,EAAgC+d,UAAhC,EAA4CzlB,IAA5C,EAAkD;AAC/D;AACA;AACA;AACA;AACA;AACA,MAAI0H,KAAK,GAAG,CAAZ,EAAe;AACb,QAAMge,UAAU,GAAG,IAAIC,2BAAO,CAACC,eAAZ,CACjB,IADiB,EAEjBH,UAFiB,EAGjBzlB,IAHiB,EAIjB6lB,KAJiB,EAAnB,CADa;AAOb;AACA;AACA;AACA;AACA;;AACA,QAAMC,WAAW,GAAG,MAAMJ,UAA1B;AACA,QAAMK,YAAY,GAAG,EAAE,OAAOD,WAAW,GAAG,GAArB,CAAF,CAArB;AACA,WAAOpe,KAAK,GAAGqe,YAAf;AACD;;AAED,SAAO,CAAP;AACD;;ACxBc,SAASC,aAAT,CAAuBxZ,QAAvB,EAAiC1Q,OAAjC,EAA0C;AACvD;AACA;AACA;AACA;AACA,MAAI4L,KAAK,GAAG,CAAZ;;AAEA,MAAIlM,WAAW,CAACN,IAAZ,CAAiBR,0CAAA8R,QAAQ,MAAR,CAAAA,QAAQ,CAAzB,CAAJ,EAAuC;AACrC,QAAMyZ,aAAa,GAAGlqB,8BAASyQ,QAAT,EAAmB,EAAnB,CAAtB,CADqC;AAGrC;AACA;;;AACA,QAAIyZ,aAAa,GAAG,CAApB,EAAuB;AACrBve,MAAAA,KAAK,GAAG,CAAC,EAAT;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,GAAGS,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY,KAAK4d,aAAjB,CAAR;AACD,KAToC;AAYrC;AACA;;;AACA,QAAInqB,OAAO,IAAIA,OAAO,IAAImqB,aAA1B,EAAyC;AACvCve,MAAAA,KAAK,IAAI,EAAT;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;AC7Bc,SAASwe,eAAT,CAAyBpqB,OAAzB,EAAkCqqB,IAAlC,EAAwC;AACrD;AACA;AACA;AACA,MAAIrqB,OAAO,IAAI,CAACqqB,IAAhB,EAAsB;AACpB,WAAO,EAAP;AACD;;AAED,SAAO,CAAP;AACD;;ACTM,IAAMC,QAAQ,GAAG,IAAjB;AAGP;;AACO,IAAMC,qBAAqB,GAAG,CACnC,OADmC,EAEnC,SAFmC,EAGnC,SAHmC,EAInC,SAJmC,EAKnC,QALmC,EAMnC,OANmC,EAOnC,OAPmC,EAQnC,OARmC,EASnC,KATmC,EAUnC,OAVmC,EAWnC,MAXmC,EAYnC,QAZmC,EAanC,KAbmC,EAcnC,iBAdmC,CAA9B;AAgBA,IAAMC,wBAAwB,GAAG,IAAIjrB,MAAJ,CACtCgrB,qBAAqB,CAAC3oB,IAAtB,CAA2B,GAA3B,CADsC,EAEtC,GAFsC,CAAjC;AAMP;AACA;;AACO,IAAM6oB,iBAAiB,GAAG,IAAIlrB,MAAJ,CAC/B,4CAD+B,EAE/B,GAF+B,CAA1B;AAMP;;AACO,IAAMmrB,gBAAgB,GAAG,IAAInrB,MAAJ,CAAW,kBAAX,EAA+B,GAA/B,CAAzB;AAGP;;AACO,IAAMorB,iBAAiB,GAAG,IAAIprB,MAAJ,CAAW,yBAAX,EAAsC,GAAtC,CAA1B;;ACrCQ,SAASqrB,oBAAT,CAA8B1mB,IAA9B,EAAoC;AACjD;AACA,MAAIsmB,wBAAwB,CAACprB,IAAzB,CAA8B8E,IAA9B,CAAJ,EAAyC;AACvC,WAAO,CAAC,EAAR;AACD;;AAED,SAAO,CAAP;AACD;;ACDD,SAAS2mB,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtB,0EAAUA,KAAK,CAAC3lB,IAAN,CAAW,OAAX,KAAuB,EAAjC,uBAAuC2lB,KAAK,CAAC3lB,IAAN,CAAW,IAAX,KAAoB,EAA3D;AACD;;AAEc,SAASwjB,gBAAT,CAAwBmC,KAAxB,EAA+B;AAAA;;AAC5C;AACA;AACA;AACA,MAAI3d,OAAO,GAAG2d,KAAK,CAAC/f,MAAN,EAAd;AACA,MAAIggB,aAAa,GAAG,KAApB;AACA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIpf,KAAK,GAAG,CAAZ;;AAEA,2FAAWuI,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAhB,mBAAgC,YAAM;AACpC,QAAIhH,OAAO,CAAC1M,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,QAAMwqB,UAAU,GAAGJ,OAAO,CAAC1d,OAAD,CAA1B,CALoC;AAQpC;;AACA,QAAI,CAAC4d,aAAD,IAAkBjkB,OAAO,CAAC1H,IAAR,CAAa6rB,UAAb,CAAtB,EAAgD;AAC9CF,MAAAA,aAAa,GAAG,IAAhB;AACAnf,MAAAA,KAAK,IAAI,EAAT;AACD,KAZmC;AAepC;AACA;;;AACA,QACE,CAACof,aAAD,IACApkB,iBAAiB,CAACxH,IAAlB,CAAuB6rB,UAAvB,CADA,IAEAT,wBAAwB,CAACprB,IAAzB,CAA8B6rB,UAA9B,CAHF,EAIE;AACA,UAAI,CAACvkB,iBAAiB,CAACtH,IAAlB,CAAuB6rB,UAAvB,CAAL,EAAyC;AACvCD,QAAAA,aAAa,GAAG,IAAhB;AACApf,QAAAA,KAAK,IAAI,EAAT;AACD;AACF;;AAEDuB,IAAAA,OAAO,GAAGA,OAAO,CAACpC,MAAR,EAAV;AACD,GA7BD;;AA+BA,SAAOa,KAAP;AACD;;ACnDc,SAASsf,aAAT,CAAuBC,QAAvB,EAAiC;AAC9C;AACA;AACA,MAAIR,iBAAiB,CAACvrB,IAAlB,CAAuB+rB,QAAvB,CAAJ,EAAsC;AACpC,WAAO,CAAC,GAAR;AACD;;AAED,SAAO,CAAP;AACD;;ACNc,SAASC,WAAT,CACblnB,IADa,EAEbylB,UAFa,EAGbha,OAHa,EAIb9O,SAJa,EAKb6P,QALa,EAMb2a,YANa,EAOb;AACA;AACA,MAAInsB,0CAAAmsB,YAAY,MAAZ,CAAAA,YAAY,EAAM,UAAAtsB,GAAG;AAAA,WAAImF,IAAI,KAAKnF,GAAb;AAAA,GAAT,CAAZ,KAA2CmT,SAA/C,EAA0D;AACxD,WAAO,KAAP;AACD,GAJD;AAOA;;;AACA,MAAI,CAAChO,IAAD,IAASA,IAAI,KAAKylB,UAAlB,IAAgCzlB,IAAI,KAAKyL,OAA7C,EAAsD;AACpD,WAAO,KAAP;AACD;;AAVD,MAYQrF,QAZR,GAYqBzJ,SAZrB,CAYQyJ,QAZR;;AAAA,mBAa+BxJ,uBAAG,CAACC,KAAJ,CAAUmD,IAAV,CAb/B;AAAA,MAakBonB,QAblB,cAaQhhB,QAbR;;;AAgBA,MAAIghB,QAAQ,KAAKhhB,QAAjB,EAA2B;AACzB,WAAO,KAAP;AACD,GAlBD;AAqBA;;;AACA,MAAMihB,QAAQ,GAAGrnB,IAAI,CAACrF,OAAL,CAAa8Q,OAAb,EAAsB,EAAtB,CAAjB;;AACA,MAAI,CAAC2a,QAAQ,CAAClrB,IAAT,CAAcmsB,QAAd,CAAL,EAA8B;AAC5B,WAAO,KAAP;AACD,GAzBD;AA4BA;;;AACA,MAAIf,wBAAwB,CAACprB,IAAzB,CAA8BsR,QAA9B,CAAJ,EAA6C;AAC3C,WAAO,KAAP;AACD,GA/BD;;;AAkCA,MAAIA,QAAQ,CAACjQ,MAAT,GAAkB,EAAtB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AClDc,SAAS+qB,YAAT,CAAsBtnB,IAAtB,EAA4BunB,SAA5B,EAAuC;AACpD;AACA;AACA;AACA;AACA,MAAI,CAACA,SAAS,CAACrsB,IAAV,CAAe8E,IAAf,CAAL,EAA2B;AACzB,WAAO,CAAC,EAAR;AACD;;AAED,SAAO,CAAP;AACD;;ACRc,SAASwnB,iBAAT,CAA2BP,QAA3B,EAAqC;AAClD;AACA,MAAIV,iBAAiB,CAACrrB,IAAlB,CAAuB+rB,QAAvB,CAAJ,EAAsC;AACpC,WAAO,EAAP;AACD;;AAED,SAAO,CAAP;AACD;;ACPc,SAASQ,aAAT,CAAuBR,QAAvB,EAAiC;AAC9C;AACA,MAAIT,gBAAgB,CAACtrB,IAAjB,CAAsB+rB,QAAtB,CAAJ,EAAqC;AACnC;AACA;AACA;AACA;AACA,QAAIV,iBAAiB,CAACrrB,IAAlB,CAAuB+rB,QAAvB,CAAJ,EAAsC;AACpC,aAAO,CAAC,EAAR;AACD;AACF;;AAED,SAAO,CAAP;AACD;;ACGM,SAASS,aAAT,CAAuBjc,OAAvB,EAAgC;AACrC,SAAO,IAAIpQ,MAAJ,YAAeoQ,OAAf,GAA0B,GAA1B,CAAP;AACD;;AAED,SAASkb,SAAT,CAAiBC,KAAjB,EAAwBpa,QAAxB,EAAkC;AAAA;;AAChC,kIAAUA,QAAQ,IAAIoa,KAAK,CAACnsB,IAAN,EAAtB,wBAAsCmsB,KAAK,CAAC3lB,IAAN,CAAW,OAAX,KAAuB,EAA7D,uBAAmE2lB,KAAK,CAAC3lB,IAAN,CACjE,IADiE,KAE9D,EAFL;AAGD;;AAEc,SAAS0mB,UAAT,OAOZ;AAAA,MANDC,KAMC,QANDA,KAMC;AAAA,MALDnC,UAKC,QALDA,UAKC;AAAA,MAJDha,OAIC,QAJDA,OAIC;AAAA,MAHD9O,SAGC,QAHDA,SAGC;AAAA,MAFD8D,CAEC,QAFDA,CAEC;AAAA,+BADD0mB,YACC;AAAA,MADDA,YACC,kCADc,EACd;AACDxqB,EAAAA,SAAS,GAAGA,SAAS,IAAIC,uBAAG,CAACC,KAAJ,CAAU4oB,UAAV,CAAzB;AACA,MAAM8B,SAAS,GAAGG,aAAa,CAACjc,OAAD,CAA/B;AACA,MAAM0a,IAAI,GAAGjY,WAAW,CAACzN,CAAD,CAAxB,CAHC;AAMD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMonB,WAAW,GAAG3qB,4CAAA0qB,KAAK,MAAL,CAAAA,KAAK,EAAQ,UAACE,aAAD,EAAgBC,IAAhB,EAAyB;AACxD;AACA;AACA;AACA,QAAM5iB,KAAK,GAAGC,QAAQ,CAAC2iB,IAAD,CAAtB,CAJwD;;AAOxD,QAAI,CAAC5iB,KAAK,CAACnF,IAAX,EAAiB,OAAO8nB,aAAP;AAEjB,QAAM9nB,IAAI,GAAGhE,YAAY,CAACmJ,KAAK,CAACnF,IAAP,CAAzB;AACA,QAAM4mB,KAAK,GAAGnmB,CAAC,CAACsnB,IAAD,CAAf;AACA,QAAMvb,QAAQ,GAAGoa,KAAK,CAACnsB,IAAN,EAAjB;;AAEA,QACE,CAACysB,WAAW,CAAClnB,IAAD,EAAOylB,UAAP,EAAmBha,OAAnB,EAA4B9O,SAA5B,EAAuC6P,QAAvC,EAAiD2a,YAAjD,CADd,EAEE;AACA,aAAOW,aAAP;AACD,KAjBuD;;;AAoBxD,QAAI,CAACA,aAAa,CAAC9nB,IAAD,CAAlB,EAA0B;AACxB8nB,MAAAA,aAAa,CAAC9nB,IAAD,CAAb,GAAsB;AACpB0H,QAAAA,KAAK,EAAE,CADa;AAEpB8E,QAAAA,QAAQ,EAARA,QAFoB;AAGpBxM,QAAAA,IAAI,EAAJA;AAHoB,OAAtB;AAKD,KAND,MAMO;AAAA;;AACL8nB,MAAAA,aAAa,CAAC9nB,IAAD,CAAb,CAAoBwM,QAApB,qEACEsb,aAAa,CAAC9nB,IAAD,CAAb,CAAoBwM,QADtB,wBAEIA,QAFJ;AAGD;;AAED,QAAMwb,YAAY,GAAGF,aAAa,CAAC9nB,IAAD,CAAlC;AACA,QAAMinB,QAAQ,GAAGN,SAAO,CAACC,KAAD,EAAQpa,QAAR,CAAxB;AACA,QAAM1Q,OAAO,GAAGH,cAAc,CAACqE,IAAD,CAA9B;AAEA,QAAI0H,KAAK,GAAG4f,YAAY,CAACtnB,IAAD,EAAOunB,SAAP,CAAxB;AACA7f,IAAAA,KAAK,IAAI8f,iBAAiB,CAACP,QAAD,CAA1B;AACAvf,IAAAA,KAAK,IAAI+f,aAAa,CAACR,QAAD,CAAtB;AACAvf,IAAAA,KAAK,IAAIsf,aAAa,CAACC,QAAD,CAAtB;AACAvf,IAAAA,KAAK,IAAI+c,gBAAc,CAACmC,KAAD,CAAvB;AACAlf,IAAAA,KAAK,IAAIgf,oBAAoB,CAAC1mB,IAAD,CAA7B;AACA0H,IAAAA,KAAK,IAAIwe,eAAe,CAACpqB,OAAD,EAAUqqB,IAAV,CAAxB;AACAze,IAAAA,KAAK,IAAIse,aAAa,CAACxZ,QAAD,EAAW1Q,OAAX,CAAtB;AACA4L,IAAAA,KAAK,IAAI8d,eAAe,CAAC9d,KAAD,EAAQ+d,UAAR,EAAoBzlB,IAApB,CAAxB;AAEAgoB,IAAAA,YAAY,CAACtgB,KAAb,GAAqBA,KAArB;AAEA,WAAOogB,aAAP;AACD,GAjDwB,EAiDtB,EAjDsB,CAAzB;;AAmDA,SAAOG,qCAAgBJ,WAAhB,EAA6BtrB,MAA7B,KAAwC,CAAxC,GAA4C,IAA5C,GAAmDsrB,WAA1D;AACD;;AC7FD;;AACA,IAAMK,2BAA2B,GAAG;AAClC5F,EAAAA,OADkC,yBACgB;AAAA;;AAAA,QAAxC7hB,CAAwC,QAAxCA,CAAwC;AAAA,QAArC5F,GAAqC,QAArCA,GAAqC;AAAA,QAAhC8B,SAAgC,QAAhCA,SAAgC;AAAA,iCAArBwqB,YAAqB;AAAA,QAArBA,YAAqB,kCAAN,EAAM;AAChDxqB,IAAAA,SAAS,GAAGA,SAAS,IAAIC,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAAzB;AAEA,QAAM4qB,UAAU,GAAGzpB,YAAY,CAACnB,GAAD,CAA/B;AACA,QAAM4Q,OAAO,GAAGhP,cAAc,CAAC5B,GAAD,EAAM8B,SAAN,CAA9B;AAEA,QAAMirB,KAAK,GAAGnnB,CAAC,CAAC,SAAD,CAAD,CAAa2M,OAAb,EAAd;AAEA,QAAM+a,WAAW,GAAGR,UAAU,CAAC;AAC7BC,MAAAA,KAAK,EAALA,KAD6B;AAE7BnC,MAAAA,UAAU,EAAVA,UAF6B;AAG7Bha,MAAAA,OAAO,EAAPA,OAH6B;AAI7B9O,MAAAA,SAAS,EAATA,SAJ6B;AAK7B8D,MAAAA,CAAC,EAADA,CAL6B;AAM7B0mB,MAAAA,YAAY,EAAZA;AAN6B,KAAD,CAA9B,CARgD;;AAkBhD,QAAI,CAACgB,WAAL,EAAkB,OAAO,IAAP,CAlB8B;AAqBhD;;AACA,QAAMC,OAAO,GAAGlrB,4FAAgBirB,WAAhB,kBACd,UAAChrB,GAAD,EAAM4qB,IAAN,EAAe;AACb,UAAMM,UAAU,GAAGF,WAAW,CAACJ,IAAD,CAA9B;AACA,aAAOM,UAAU,CAAC3gB,KAAX,GAAmBvK,GAAG,CAACuK,KAAvB,GAA+B2gB,UAA/B,GAA4ClrB,GAAnD;AACD,KAJa,EAKd;AAAEuK,MAAAA,KAAK,EAAE,CAAC;AAAV,KALc,CAAhB,CAtBgD;AA+BhD;;;AACA,QAAI0gB,OAAO,CAAC1gB,KAAR,IAAiB,EAArB,EAAyB;AACvB,aAAO0gB,OAAO,CAACpoB,IAAf;AACD;;AAED,WAAO,IAAP;AACD;AAtCiC,CAApC;;ACPO,IAAMsoB,wBAAwB,GAAG,CAAC,QAAD,CAAjC;;ACKP,SAASC,WAAT,CAAqB1tB,GAArB,EAA0B;AACxB,MAAM8B,SAAS,GAAGC,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAAlB;AADwB,MAEhBuL,QAFgB,GAEHzJ,SAFG,CAEhByJ,QAFgB;AAGxB,SAAOA,QAAP;AACD;;AAED,SAASkJ,MAAT,CAAgBzU,GAAhB,EAAqB;AACnB,SAAO;AACLA,IAAAA,GAAG,EAAHA,GADK;AAEL2V,IAAAA,MAAM,EAAE+X,WAAW,CAAC1tB,GAAD;AAFd,GAAP;AAID;;AAED,IAAM2tB,mBAAmB,GAAG;AAC1BlG,EAAAA,OAD0B,yBACK;AAAA,QAArB7hB,CAAqB,QAArBA,CAAqB;AAAA,QAAlB5F,GAAkB,QAAlBA,GAAkB;AAAA,QAAbkoB,SAAa,QAAbA,SAAa;AAC7B,QAAM0F,UAAU,GAAGhoB,CAAC,CAAC,qBAAD,CAApB;;AACA,QAAIgoB,UAAU,CAAClsB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,UAAMyD,IAAI,GAAGyoB,UAAU,CAACxnB,IAAX,CAAgB,MAAhB,CAAb;;AACA,UAAIjB,IAAJ,EAAU;AACR,eAAOsP,MAAM,CAACtP,IAAD,CAAb;AACD;AACF;;AAED,QAAM0oB,OAAO,GAAGhc,eAAe,CAACjM,CAAD,EAAI6nB,wBAAJ,EAA8BvF,SAA9B,CAA/B;;AACA,QAAI2F,OAAJ,EAAa;AACX,aAAOpZ,MAAM,CAACoZ,OAAD,CAAb;AACD;;AAED,WAAOpZ,MAAM,CAACzU,GAAD,CAAb;AACD;AAhByB,CAA5B;;AClBO,IAAM8tB,sBAAsB,GAAG,CAAC,gBAAD,EAAmB,qBAAnB,CAA/B;;ACMA,SAAS1Z,OAAT,CAAenR,OAAf,EAAwB2C,CAAxB,EAA4C;AAAA;;AAAA,MAAjBmoB,SAAiB,uEAAL,GAAK;AACjD9qB,EAAAA,OAAO,GAAGpD,qDAAAoD,OAAO,CAACnD,OAAR,CAAgB,UAAhB,EAA4B,GAA5B,iBAAV;AACA,SAAOkuB,6BAAS,CAAC/qB,OAAD,EAAU8qB,SAAV,EAAqB;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAhB;AACD;AAED,IAAMC,uBAAuB,GAAG;AAC9BzG,EAAAA,OAD8B,yBACK;AAAA,QAAzB7hB,CAAyB,QAAzBA,CAAyB;AAAA,QAAtB3C,OAAsB,QAAtBA,OAAsB;AAAA,QAAbilB,SAAa,QAAbA,SAAa;AACjC,QAAM9Q,OAAO,GAAGvF,eAAe,CAACjM,CAAD,EAAIkoB,sBAAJ,EAA4B5F,SAA5B,CAA/B;;AACA,QAAI9Q,OAAJ,EAAa;AACX,aAAOhD,OAAK,CAAC3B,SAAS,CAAC2E,OAAD,EAAUxR,CAAV,CAAV,CAAZ;AACD,KAJgC;;;AAMjC,QAAMmoB,SAAS,GAAG,GAAlB;;AACA,QAAMI,YAAY,GAAGhrB,2CAAAF,OAAO,MAAP,CAAAA,OAAO,EAAO,CAAP,EAAU8qB,SAAS,GAAG,CAAtB,CAA5B;;AACA,WAAO3Z,OAAK,CAACxO,CAAC,CAACuoB,YAAD,CAAD,CAAgBvuB,IAAhB,EAAD,EAAyBgG,CAAzB,EAA4BmoB,SAA5B,CAAZ;AACD;AAV6B,CAAhC;;ACPA,IAAMK,yBAAyB,GAAG;AAChC3G,EAAAA,OADgC,yBACX;AAAA,QAAXxkB,OAAW,QAAXA,OAAW;AACnB,QAAM2C,CAAC,GAAGlC,2BAAO,CAACoR,IAAR,CAAa7R,OAAb,CAAV;AACA,QAAM+N,QAAQ,GAAGpL,CAAC,CAAC,KAAD,CAAD,CAAS2J,KAAT,EAAjB;AAEA,QAAM3P,IAAI,GAAGD,eAAe,CAACqR,QAAQ,CAACpR,IAAT,EAAD,CAA5B;AACA,WAAOA,IAAI,CAACwB,KAAL,CAAW,IAAX,EAAiBM,MAAxB;AACD;AAP+B,CAAlC;;;;;;;ACUA,IAAM2sB,gBAAgB,GAAG;AACvB;AACA1Y,EAAAA,MAAM,EAAE,GAFe;AAGvBtF,EAAAA,KAAK,EAAE4X,qBAAqB,CAACR,OAHN;AAIvBrR,EAAAA,cAAc,EAAE0S,6BAA6B,CAACrB,OAJvB;AAKvBtR,EAAAA,MAAM,EAAEqS,sBAAsB,CAACf,OALR;AAMvBxkB,EAAAA,OAAO,EAAEqrB,uDAAA/G,uBAAuB,CAACE,OAAxB,mBAAqCF,uBAArC,CANc;AAOvBrQ,EAAAA,cAAc,EAAEmT,4BAA4B,CAAC5C,OAPtB;AAQvBjR,EAAAA,GAAG,EAAEwS,mBAAmB,CAACvB,OARF;AASvBtQ,EAAAA,aAAa,EAAEkW,2BAA2B,CAAC5F,OATpB;AAUvB8G,EAAAA,cAAc,EAAEZ,mBAAmB,CAAClG,OAVb;AAWvBrQ,EAAAA,OAAO,EAAE8W,uBAAuB,CAACzG,OAXV;AAYvB+G,EAAAA,UAAU,EAAEJ,yBAAyB,CAAC3G,OAZf;AAavBgH,EAAAA,SAAS,EAAE;AAAA,QAAGpe,KAAH,QAAGA,KAAH;AAAA,WAAeqe,mCAAe,CAACC,YAAhB,CAA6Bte,KAA7B,CAAf;AAAA,GAbY;AAevBoX,EAAAA,OAfuB,mBAefxjB,OAfe,EAeN;AAAA,QACPyG,IADO,GACKzG,OADL,CACPyG,IADO;AAAA,QACD9E,CADC,GACK3B,OADL,CACD2B,CADC;;AAGf,QAAI8E,IAAI,IAAI,CAAC9E,CAAb,EAAgB;AACd,UAAMgpB,MAAM,GAAGlrB,2BAAO,CAACoR,IAAR,CAAapK,IAAb,CAAf;AACAzG,MAAAA,OAAO,CAAC2B,CAAR,GAAYgpB,MAAZ;AACD;;AAED,QAAMve,KAAK,GAAG,KAAKA,KAAL,CAAWpM,OAAX,CAAd;AACA,QAAMmS,cAAc,GAAG,KAAKA,cAAL,CAAoBnS,OAApB,CAAvB;AACA,QAAMkS,MAAM,GAAG,KAAKA,MAAL,CAAYlS,OAAZ,CAAf;AACA,QAAMhB,OAAO,GAAG,KAAKA,OAAL,qCAAkBgB,OAAlB;AAA2BoM,MAAAA,KAAK,EAALA;AAA3B,OAAhB;AACA,QAAM6G,cAAc,GAAG,KAAKA,cAAL,qCAAyBjT,OAAzB;AAAkChB,MAAAA,OAAO,EAAPA;AAAlC,OAAvB;AACA,QAAMuT,GAAG,GAAG,KAAKA,GAAL,qCAAcvS,OAAd;AAAuBhB,MAAAA,OAAO,EAAPA;AAAvB,OAAZ;AACA,QAAMkU,aAAa,GAAG,KAAKA,aAAL,CAAmBlT,OAAnB,CAAtB;AACA,QAAMmT,OAAO,GAAG,KAAKA,OAAL,qCAAkBnT,OAAlB;AAA2BhB,MAAAA,OAAO,EAAPA;AAA3B,OAAhB;AACA,QAAMurB,UAAU,GAAG,KAAKA,UAAL,qCAAqBvqB,OAArB;AAA8BhB,MAAAA,OAAO,EAAPA;AAA9B,OAAnB;AACA,QAAMwrB,SAAS,GAAG,KAAKA,SAAL,CAAe;AAAEpe,MAAAA,KAAK,EAALA;AAAF,KAAf,CAAlB;;AAjBe,+BAkBS,KAAKke,cAAL,CAAoBtqB,OAApB,CAlBT;AAAA,QAkBPjE,GAlBO,wBAkBPA,GAlBO;AAAA,QAkBF2V,MAlBE,wBAkBFA,MAlBE;;AAoBf,WAAO;AACLtF,MAAAA,KAAK,EAALA,KADK;AAEL8F,MAAAA,MAAM,EAANA,MAFK;AAGLC,MAAAA,cAAc,EAAEA,cAAc,IAAI,IAH7B;AAILI,MAAAA,GAAG,EAAHA,GAJK;AAKLU,MAAAA,cAAc,EAAdA,cALK;AAMLjU,MAAAA,OAAO,EAAPA,OANK;AAOLkU,MAAAA,aAAa,EAAbA,aAPK;AAQLnX,MAAAA,GAAG,EAAHA,GARK;AASL2V,MAAAA,MAAM,EAANA,MATK;AAULyB,MAAAA,OAAO,EAAPA,OAVK;AAWLoX,MAAAA,UAAU,EAAVA,UAXK;AAYLC,MAAAA,SAAS,EAATA;AAZK,KAAP;AAcD;AAjDsB,CAAzB;;ACZA,IAAMI,SAAS,GAAG;AAChB,kDAAgDrW,eADhC;AAEhB,6CAA2CxC;AAF3B,CAAlB;AAKe,SAAS8Y,YAAT,CAAsBlpB,CAAtB,EAAyB;AAAA;;AACtC,MAAMkB,QAAQ,GAAG3G,0FAAgB0uB,SAAhB,kBAAgC,UAAA9X,CAAC;AAAA,WAAInR,CAAC,CAACmR,CAAD,CAAD,CAAKrV,MAAL,GAAc,CAAlB;AAAA,GAAjC,CAAjB;;AAEA,SAAOmtB,SAAS,CAAC/nB,QAAD,CAAhB;AACD;;ACJc,SAASioB,YAAT,CAAsB/uB,GAAtB,EAA2B8B,SAA3B,EAAsC8D,CAAtC,EAAyC;AAAA;;AACtD9D,EAAAA,SAAS,GAAGA,SAAS,IAAIC,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAAzB;AADsD,mBAEjC8B,SAFiC;AAAA,MAE9CyJ,QAF8C,cAE9CA,QAF8C;;AAGtD,MAAMyjB,UAAU,GAAG7rB,sDAAAoI,QAAQ,CACxBnK,KADgB,CACV,GADU,kBAEV,CAAC,CAFS,EAGhByB,IAHgB,CAGX,GAHW,CAAnB;;AAKA,SACEiT,aAAa,CAACvK,QAAD,CAAb,IACAuK,aAAa,CAACkZ,UAAD,CADb,IAEAC,UAAU,CAAC1jB,QAAD,CAFV,IAGA0jB,UAAU,CAACD,UAAD,CAHV,IAIAF,YAAY,CAAClpB,CAAD,CAJZ,IAKAyoB,gBANF;AAQD;;;;;;AClBM,SAASa,gBAAT,CAA0Ble,QAA1B,EAAoCpL,CAApC,QAAkD;AAAA,MAATwO,KAAS,QAATA,KAAS;AACvD,MAAI,CAACA,KAAL,EAAY,OAAOpD,QAAP;AAEZpL,EAAAA,CAAC,CAACwO,KAAK,CAACvR,IAAN,CAAW,GAAX,CAAD,EAAkBmO,QAAlB,CAAD,CAA6BpI,MAA7B;AAEA,SAAOoI,QAAP;AACD;;AAGM,SAASme,iBAAT,CAA2Bne,QAA3B,EAAqCpL,CAArC,SAAwD;AAAA;;AAAA,MAAdqQ,UAAc,SAAdA,UAAc;AAC7D,MAAI,CAACA,UAAL,EAAiB,OAAOjF,QAAP;;AAEjB,+FAAgBiF,UAAhB,kBAAoC,UAAAxL,GAAG,EAAI;AACzC,QAAM2kB,QAAQ,GAAGxpB,CAAC,CAAC6E,GAAD,EAAMuG,QAAN,CAAlB;AACA,QAAM7K,KAAK,GAAG8P,UAAU,CAACxL,GAAD,CAAxB,CAFyC;;AAKzC,QAAI,OAAOtE,KAAP,KAAiB,QAArB,EAA+B;AAC7BipB,MAAAA,QAAQ,CAACrpB,IAAT,CAAc,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAC7B+D,QAAAA,aAAa,CAACpE,CAAC,CAACK,IAAD,CAAF,EAAUL,CAAV,EAAaqQ,UAAU,CAACxL,GAAD,CAAvB,CAAb;AACD,OAFD;AAGD,KAJD,MAIO,IAAI,OAAOtE,KAAP,KAAiB,UAArB,EAAiC;AACtC;AACAipB,MAAAA,QAAQ,CAACrpB,IAAT,CAAc,UAACxE,KAAD,EAAQ0E,IAAR,EAAiB;AAC7B,YAAMwO,MAAM,GAAGtO,KAAK,CAACP,CAAC,CAACK,IAAD,CAAF,EAAUL,CAAV,CAApB,CAD6B;;AAG7B,YAAI,OAAO6O,MAAP,KAAkB,QAAtB,EAAgC;AAC9BzK,UAAAA,aAAa,CAACpE,CAAC,CAACK,IAAD,CAAF,EAAUL,CAAV,EAAa6O,MAAb,CAAb;AACD;AACF,OAND;AAOD;AACF,GAnBD;;AAqBA,SAAOzD,QAAP;AACD;;AAED,SAASqe,oBAAT,CAA8BzpB,CAA9B,EAAiCkN,SAAjC,EAA4Cwc,WAA5C,EAAyDC,aAAzD,EAAwE;AACtE,SAAOpvB,0CAAA2S,SAAS,MAAT,CAAAA,SAAS,EAAM,UAAAhM,QAAQ,EAAI;AAAA;;AAChC,QAAI0oB,mCAAc1oB,QAAd,CAAJ,EAA6B;AAAA;;AAC3B,UAAIwoB,WAAJ,EAAiB;AACf,eAAOjtB,4CAAAyE,QAAQ,MAAR,CAAAA,QAAQ,EAAQ,UAACxE,GAAD,EAAMyU,CAAN;AAAA,iBAAYzU,GAAG,IAAIsD,CAAC,CAACmR,CAAD,CAAD,CAAKrV,MAAL,GAAc,CAAjC;AAAA,SAAR,EAA4C,IAA5C,CAAf;AACD;;AAH0B,yDAKToF,QALS;AAAA,UAKpBiQ,CALoB;AAAA,UAKjB3Q,IALiB;;AAM3B,aACE,CAACmpB,aAAa,IAAK,CAACA,aAAD,IAAkB3pB,CAAC,CAACmR,CAAD,CAAD,CAAKrV,MAAL,KAAgB,CAArD,KACAkE,CAAC,CAACmR,CAAD,CAAD,CAAK3Q,IAAL,CAAUA,IAAV,CADA,IAEAvG,sDAAA+F,CAAC,CAACmR,CAAD,CAAD,CACG3Q,IADH,CACQA,IADR,uBAEc,EALhB;AAOD;;AAED,WACE,CAACmpB,aAAa,IAAK,CAACA,aAAD,IAAkB3pB,CAAC,CAACkB,QAAD,CAAD,CAAYpF,MAAZ,KAAuB,CAA5D,KACA7B,sDAAA+F,CAAC,CAACkB,QAAD,CAAD,CACGlH,IADH,wBAEc,EAJhB;AAMD,GAtBe,CAAhB;AAuBD;;AAEM,SAAS6vB,MAAT,CAAgBpI,IAAhB,EAAsB;AAAA,MACnBzhB,CADmB,GAC8ByhB,IAD9B,CACnBzhB,CADmB;AAAA,MAChBwM,IADgB,GAC8BiV,IAD9B,CAChBjV,IADgB;AAAA,MACVsd,cADU,GAC8BrI,IAD9B,CACVqI,cADU;AAAA,0BAC8BrI,IAD9B,CACMiI,WADN;AAAA,MACMA,WADN,kCACoB,KADpB;;AAG3B,MAAI,CAACI,cAAL,EAAqB,OAAO,IAAP,CAHM;AAM3B;;AACA,MAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC,OAAOA,cAAP;AAPb,MASnB5c,SATmB,GASiC4c,cATjC,CASnB5c,SATmB;AAAA,8BASiC4c,cATjC,CASRhZ,cATQ;AAAA,MASRA,cATQ,sCASS,IATT;AAAA,MASe6Y,aATf,GASiCG,cATjC,CASeH,aATf;AAW3B,MAAMI,gBAAgB,GAAGN,oBAAoB,CAC3CzpB,CAD2C,EAE3CkN,SAF2C,EAG3Cwc,WAH2C,EAI3CC,aAJ2C,CAA7C;AAOA,MAAI,CAACI,gBAAL,EAAuB,OAAO,IAAP;;AAEvB,WAASC,iBAAT,CAA2B1pB,KAA3B,EAAkC;AAChCuL,IAAAA,iBAAiB,CAACvL,KAAD,EAAQN,CAAR,EAAWyhB,IAAI,CAACrnB,GAAL,IAAY,EAAvB,CAAjB;AACAkvB,IAAAA,gBAAgB,CAAChpB,KAAD,EAAQN,CAAR,EAAW8pB,cAAX,CAAhB;AACAP,IAAAA,iBAAiB,CAACjpB,KAAD,EAAQN,CAAR,EAAW8pB,cAAX,CAAjB;AACA,WAAOxpB,KAAP;AACD;;AAED,WAAS2pB,UAAT,GAAsB;AACpB;AACA;AACA,QAAI7e,QAAJ,CAHoB;AAMpB;AACA;AACA;;AACA,QAAIwe,mCAAcG,gBAAd,CAAJ,EAAqC;AACnC3e,MAAAA,QAAQ,GAAGpL,CAAC,CAAC+pB,gBAAgB,CAAC9sB,IAAjB,CAAsB,GAAtB,CAAD,CAAZ;AACA,UAAMitB,QAAQ,GAAGlqB,CAAC,CAAC,aAAD,CAAlB;AACAoL,MAAAA,QAAQ,CAACjL,IAAT,CAAc,UAACC,CAAD,EAAI+C,OAAJ,EAAgB;AAC5B+mB,QAAAA,QAAQ,CAAC9gB,MAAT,CAAgBjG,OAAhB;AACD,OAFD;AAIAiI,MAAAA,QAAQ,GAAG8e,QAAX;AACD,KARD,MAQO;AACL9e,MAAAA,QAAQ,GAAGpL,CAAC,CAAC+pB,gBAAD,CAAZ;AACD,KAnBmB;;;AAsBpB3e,IAAAA,QAAQ,CAAC+e,IAAT,CAAcnqB,CAAC,CAAC,aAAD,CAAf;AACAoL,IAAAA,QAAQ,GAAGA,QAAQ,CAAChF,MAAT,EAAX;AACAgF,IAAAA,QAAQ,GAAG4e,iBAAiB,CAAC5e,QAAD,CAA5B;;AACA,QAAIiW,QAAQ,CAAC7U,IAAD,CAAZ,EAAoB;AAClB6U,MAAAA,QAAQ,CAAC7U,IAAD,CAAR,CAAepB,QAAf,sCAA8BqW,IAA9B;AAAoC3Q,QAAAA,cAAc,EAAdA;AAApC;AACD;;AAED,QAAI6Y,aAAJ,EAAmB;AAAA;;AACjB,aAAO1oB,qDAAAmK,QAAQ,CACZjH,QADI,GAEJwI,OAFI,oBAGA,UAAAyd,EAAE;AAAA,eAAIpqB,CAAC,CAAC8E,IAAF,CAAO9E,CAAC,CAACoqB,EAAD,CAAR,CAAJ;AAAA,OAHF,CAAP;AAID;;AAED,WAAOpqB,CAAC,CAAC8E,IAAF,CAAOsG,QAAP,CAAP;AACD;;AAED,MAAIse,WAAJ,EAAiB;AACf,WAAOO,UAAU,CAAA,CAAjB;AACD;;AAED,MAAII,MAAJ;AACA,MAAIxb,MAAJ,CAvE2B;AAyE3B;;AACA,MAAI+a,mCAAcG,gBAAd,CAAJ,EAAqC;AAAA,+DACCA,gBADD;AAAA,QAC5B7oB,QAD4B;AAAA,QAClBV,IADkB;AAAA,QACZ8pB,SADY;;AAEnCD,IAAAA,MAAM,GAAGrqB,CAAC,CAACkB,QAAD,CAAV;AACAmpB,IAAAA,MAAM,GAAGL,iBAAiB,CAACK,MAAD,CAA1B;AACAxb,IAAAA,MAAM,GAAG5N,yCAAAopB,MAAM,MAAN,CAAAA,MAAM,EAAK,UAACjqB,CAAD,EAAIgqB,EAAJ,EAAW;AAAA;;AAC7B,UAAMG,IAAI,GAAGtwB,sDAAA+F,CAAC,CAACoqB,EAAD,CAAD,CACV5pB,IADU,CACLA,IADK,kBAAb;;AAGA,aAAO8pB,SAAS,GAAGA,SAAS,CAACC,IAAD,CAAZ,GAAqBA,IAArC;AACD,KALc,CAAf;AAMD,GAVD,MAUO;AACLF,IAAAA,MAAM,GAAGrqB,CAAC,CAAC+pB,gBAAD,CAAV;AACAM,IAAAA,MAAM,GAAGL,iBAAiB,CAACK,MAAD,CAA1B;AACAxb,IAAAA,MAAM,GAAG5N,yCAAAopB,MAAM,MAAN,CAAAA,MAAM,EAAK,UAACjqB,CAAD,EAAIgqB,EAAJ;AAAA;;AAAA,aAClBnwB,sDAAA+F,CAAC,CAACoqB,EAAD,CAAD,CACGpwB,IADH,mBADkB;AAAA,KAAL,CAAf;AAKD;;AAED6U,EAAAA,MAAM,GACJ+a,mCAAc/a,MAAM,CAAClC,OAAP,EAAd,KAAmCgd,aAAnC,GACI9a,MAAM,CAAClC,OAAP,EADJ,GAEIkC,MAAM,CAAC,CAAD,CAHZ,CA9F2B;AAmG3B;;AACA,MAAIiC,cAAc,IAAIuQ,QAAQ,CAAC7U,IAAD,CAA9B,EAAsC;AACpC,WAAO6U,QAAQ,CAAC7U,IAAD,CAAR,CAAeqC,MAAf,sCAA4B4S,IAA5B,GAAqCqI,cAArC,EAAP;AACD;;AAED,SAAOjb,MAAP;AACD;AAEM,SAAS2b,mBAAT,CAA6B5O,MAA7B,EAAqC6F,IAArC,EAA2C;AAAA;;AAChD,MAAMgJ,OAAO,GAAG,EAAhB;;AACA,gGAAgB7O,MAAhB,mBAAgC,UAAA8O,CAAC,EAAI;AACnC,QAAI,CAACD,OAAO,CAACC,CAAD,CAAZ,EAAiB;AACfD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAab,MAAM,qCAAMpI,IAAN;AAAYjV,QAAAA,IAAI,EAAEke,CAAlB;AAAqBZ,QAAAA,cAAc,EAAElO,MAAM,CAAC8O,CAAD;AAA3C,SAAnB;AACD;AACF,GAJD;;AAKA,SAAOD,OAAP;AACD;;AAED,SAASE,aAAT,CAAuBlJ,IAAvB,EAA6B;AAAA,MACnBjV,IADmB,GACkBiV,IADlB,CACnBjV,IADmB;AAAA,MACbqD,SADa,GACkB4R,IADlB,CACb5R,SADa;AAAA,uBACkB4R,IADlB,CACFmJ,QADE;AAAA,MACFA,QADE,+BACS,IADT;AAG3B,MAAM/b,MAAM,GAAGgb,MAAM,qCAAMpI,IAAN;AAAYqI,IAAAA,cAAc,EAAEja,SAAS,CAACrD,IAAD;AAArC,KAArB,CAH2B;;AAM3B,MAAIqC,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD,GAR0B;AAW3B;;;AACA,MAAI+b,QAAJ,EAAc,OAAOnC,gBAAgB,CAACjc,IAAD,CAAhB,CAAuBiV,IAAvB,CAAP;AAEd,SAAO,IAAP;AACD;;AAED,IAAMoJ,aAAa,GAAG;AACpBhJ,EAAAA,OADoB,qBACwB;AAAA,QAApChS,SAAoC,uEAAxB4Y,gBAAwB;AAAA,QAANhH,IAAM;AAAA,gBACFA,IADE;AAAA,QAClCqJ,WADkC,SAClCA,WADkC;AAAA,QACrBC,cADqB,SACrBA,cADqB;;AAG1C,QAAIlb,SAAS,CAACE,MAAV,KAAqB,GAAzB,EAA8B,OAAOF,SAAS,CAACgS,OAAV,CAAkBJ,IAAlB,CAAP;AAE9BA,IAAAA,IAAI,uCACCA,IADD;AAEF5R,MAAAA,SAAS,EAATA;AAFE,MAAJ;;AAKA,QAAIib,WAAJ,EAAiB;AACf,UAAMztB,QAAO,GAAGstB,aAAa,qCACxBlJ,IADwB;AAE3BjV,QAAAA,IAAI,EAAE,SAFqB;AAG3Bkd,QAAAA,WAAW,EAAE,IAHc;AAI3Bjf,QAAAA,KAAK,EAAEsgB;AAJoB,SAA7B;;AAMA,aAAO;AACL1tB,QAAAA,OAAO,EAAPA;AADK,OAAP;AAGD;;AACD,QAAMoN,KAAK,GAAGkgB,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE;AAAlB,OAA3B;AACA,QAAMgE,cAAc,GAAGma,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE;AAAlB,OAApC;AACA,QAAM+D,MAAM,GAAGoa,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE;AAAlB,OAA5B;AACA,QAAM+E,aAAa,GAAGoZ,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE;AAAlB,OAAnC;AACA,QAAMnP,OAAO,GAAGstB,aAAa,qCACxBlJ,IADwB;AAE3BjV,MAAAA,IAAI,EAAE,SAFqB;AAG3Bkd,MAAAA,WAAW,EAAE,IAHc;AAI3Bjf,MAAAA,KAAK,EAALA;AAJ2B,OAA7B;AAMA,QAAM6G,cAAc,GAAGqZ,aAAa,qCAC/BlJ,IAD+B;AAElCjV,MAAAA,IAAI,EAAE,gBAF4B;AAGlCnP,MAAAA,OAAO,EAAPA;AAHkC,OAApC;AAKA,QAAMmU,OAAO,GAAGmZ,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE,SAAlB;AAA6BnP,MAAAA,OAAO,EAAPA;AAA7B,OAA7B;AACA,QAAMuT,GAAG,GAAG+Z,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE,KAAlB;AAAyBnP,MAAAA,OAAO,EAAPA,OAAzB;AAAkCmU,MAAAA,OAAO,EAAPA;AAAlC,OAAzB;AACA,QAAMoX,UAAU,GAAG+B,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE,YAAlB;AAAgCnP,MAAAA,OAAO,EAAPA;AAAhC,OAAhC;AACA,QAAMwrB,SAAS,GAAG8B,aAAa,qCAAMlJ,IAAN;AAAYjV,MAAAA,IAAI,EAAE,WAAlB;AAA+B/B,MAAAA,KAAK,EAALA;AAA/B,OAA/B;;AAvC0C,gBAwClBkgB,aAAa,qCAChClJ,IADgC;AAEnCjV,MAAAA,IAAI,EAAE;AAF6B,OAAb,IAGlB;AAAEpS,MAAAA,GAAG,EAAE,IAAP;AAAa2V,MAAAA,MAAM,EAAE;AAArB,KA3CoC;AAAA,QAwClC3V,GAxCkC,SAwClCA,GAxCkC;AAAA,QAwC7B2V,MAxC6B,SAwC7BA,MAxC6B;;AA6C1C,QAAIib,eAAe,GAAG,EAAtB;;AACA,QAAInb,SAAS,CAAC+L,MAAd,EAAsB;AACpBoP,MAAAA,eAAe,GAAGR,mBAAmB,CAAC3a,SAAS,CAAC+L,MAAX,EAAmB6F,IAAnB,CAArC;AACD;;AAED;AACEhX,MAAAA,KAAK,EAALA,KADF;AAEEpN,MAAAA,OAAO,EAAPA,OAFF;AAGEkT,MAAAA,MAAM,EAANA,MAHF;AAIEC,MAAAA,cAAc,EAAdA,cAJF;AAKEc,MAAAA,cAAc,EAAdA,cALF;AAMEV,MAAAA,GAAG,EAAHA,GANF;AAOEW,MAAAA,aAAa,EAAbA,aAPF;AAQEnX,MAAAA,GAAG,EAAHA,GARF;AASE2V,MAAAA,MAAM,EAANA,MATF;AAUEyB,MAAAA,OAAO,EAAPA,OAVF;AAWEoX,MAAAA,UAAU,EAAVA,UAXF;AAYEC,MAAAA,SAAS,EAATA;AAZF,OAaKmC,eAbL;AAeD;AAlEmB,CAAtB;;;;;SCpM8BC,eAA9B;AAAA;AAAA;;;sHAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb1Z,YAAAA,aADa,QACbA,aADa,EAEbzM,IAFa,QAEbA,IAFa,EAGb9E,CAHa,QAGbA,CAHa,EAIbsiB,SAJa,QAIbA,SAJa,EAKbzT,MALa,QAKbA,MALa,EAMbqc,SANa,QAMbA,SANa,EAObzgB,KAPa,QAObA,KAPa,EAQbrQ,GARa,QAQbA,GARa;AAUb;AACI+wB,YAAAA,KAXS,GAWD,CAXC;AAYPzE,YAAAA,YAZO,GAYQ,CAACnrB,YAAY,CAACnB,GAAD,CAAb,CAZR;AAeb;;AAfa;AAAA,kBAgBNmX,aAAa,IAAI4Z,KAAK,GAAG,EAhBnB;AAAA;AAAA;AAAA;;AAiBXA,YAAAA,KAAK,IAAI,CAAT,CAjBW;;AAAA;AAAA,mBAmBD1c,QAAQ,CAACC,MAAT,CAAgB6C,aAAhB,CAnBC;;AAAA;AAmBXvR,YAAAA,CAnBW;AAoBX8E,YAAAA,IAAI,GAAG9E,CAAC,CAAC8E,IAAF,EAAP;AAEMsmB,YAAAA,aAtBK,GAsBW;AACpBhxB,cAAAA,GAAG,EAAEmX,aADe;AAEpBzM,cAAAA,IAAI,EAAJA,IAFoB;AAGpB9E,cAAAA,CAAC,EAADA,CAHoB;AAIpBsiB,cAAAA,SAAS,EAATA,SAJoB;AAKpByI,cAAAA,cAAc,EAAEtgB,KALI;AAMpBic,cAAAA,YAAY,EAAZA;AANoB,aAtBX;AA+BL2E,YAAAA,cA/BK,GA+BYR,aAAa,CAAChJ,OAAd,CAAsBqJ,SAAtB,EAAiCE,aAAjC,CA/BZ;AAiCX1E,YAAAA,YAAY,CAAC3pB,IAAb,CAAkBwU,aAAlB;AACA1C,YAAAA,MAAM,uCACDA,MADC;AAEJxR,cAAAA,OAAO,2HAAKwR,MAAM,CAACxR,OAAZ,oCAAmC8tB,KAAnC,2BACLE,cAAc,CAAChuB,OADV;AAFH,cAAN,CAlCW;;AA0CXkU,YAAAA,aAAa,GAAG8Z,cAAc,CAAC9Z,aAA/B;AA1CW;AAAA;;AAAA;AA6CPqX,YAAAA,UA7CO,GA6CMH,gBAAgB,CAACG,UAAjB,CAA4B;AAC7CvrB,cAAAA,OAAO,iBAAUwR,MAAM,CAACxR,OAAjB;AADsC,aAA5B,CA7CN;AAAA,kFAiDRwR,MAjDQ;AAkDXyc,cAAAA,WAAW,EAAEH,KAlDF;AAmDXI,cAAAA,cAAc,EAAEJ,KAnDL;AAoDXvC,cAAAA,UAAU,EAAVA;AApDW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;ICMT4C,OAAO,GAAG;AACRpvB,EAAAA,KADQ,iBACFhC,GADE,EAC2B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4FAAJ,EAAI,EAAtB0K,IAAsB,QAAtBA,IAAsB,EAAb2c,IAAa;AAAA,oCAQnCA,IARmC,CAErCgK,aAFqC,EAErCA,aAFqC,oCAErB,IAFqB,yCAQnChK,IARmC,CAGrCmJ,QAHqC,EAGrCA,QAHqC,+BAG1B,IAH0B,uCAQnCnJ,IARmC,CAIrCtiB,WAJqC,EAIrCA,WAJqC,kCAIvB,MAJuB,sCAQnCsiB,IARmC,CAKrCviB,OALqC,EAKrCA,OALqC,8BAK3B,EAL2B,kBAMrC0c,MANqC,GAQnC6F,IARmC,CAMrC7F,MANqC,EAOrC8P,eAPqC,GAQnCjK,IARmC,CAOrCiK,eAPqC;AAWvC;AACA;;AACA,kBAAI,CAACtxB,GAAD,IAAQ0D,2BAAO,CAACC,OAApB,EAA6B;AAC3B3D,gBAAAA,GAAG,GAAGwF,MAAM,CAAC+rB,QAAP,CAAgBpsB,IAAtB,CAD2B;;AAE3BuF,gBAAAA,IAAI,GAAGA,IAAI,IAAIhH,2BAAO,CAACgH,IAAR,EAAf;AACD;;AAEK5I,cAAAA,SAlBiC,GAkBrBC,uBAAG,CAACC,KAAJ,CAAUhC,GAAV,CAlBqB;;AAAA,kBAoBlCuV,WAAW,CAACzT,SAAD,CApBuB;AAAA;AAAA;AAAA;;AAAA,gDAqB9B;AACL+C,gBAAAA,KAAK,EAAE,IADF;AAELa,gBAAAA,OAAO,EACL;AAHG,eArB8B;;AAAA;AAAA;AAAA,qBA4BvB2O,QAAQ,CAACC,MAAT,CAAgBtU,GAAhB,EAAqB0K,IAArB,EAA2B5I,SAA3B,EAAsCgD,OAAtC,CA5BuB;;AAAA;AA4BjCc,cAAAA,CA5BiC;;AAAA,mBA+BnCA,CAAC,CAAC+O,MA/BiC;AAAA;AAAA;AAAA;;AAAA,gDAgC9B/O,CAhC8B;;AAAA;AAmCvC;AACA,kBAAI0rB,eAAJ,EAAqB;AACnBE,gBAAAA,YAAkB,CAACF,eAAD,CAAlB;AACD;;AAEKR,cAAAA,SAxCiC,GAwCrB/B,YAAY,CAAC/uB,GAAD,EAAM8B,SAAN,EAAiB8D,CAAjB,CAxCS;AA2CvC;AACA;;AACA,kBAAI,CAAC8E,IAAL,EAAW;AACTA,gBAAAA,IAAI,GAAG9E,CAAC,CAAC8E,IAAF,EAAP;AACD,eA/CsC;AAkDvC;;;AACMwd,cAAAA,SAnDiC,GAmDrBrhB,oDAAAjB,CAAC,CAAC,MAAD,CAAD,iBACX,UAACI,CAAD,EAAIC,IAAJ;AAAA,uBAAaL,CAAC,CAACK,IAAD,CAAD,CAAQG,IAAR,CAAa,MAAb,CAAb;AAAA,eADW,EAEfmM,OAFe,EAnDqB;AAuDnCkf,cAAAA,aAvDmC,GAuDnB,EAvDmB;;AAwDvC,kBAAIjQ,MAAJ,EAAY;AACViQ,gBAAAA,aAAa,GAAGrB,mBAAmB,CAAC5O,MAAD,EAAS;AAAE5b,kBAAAA,CAAC,EAADA,CAAF;AAAK5F,kBAAAA,GAAG,EAAHA,GAAL;AAAU0K,kBAAAA,IAAI,EAAJA;AAAV,iBAAT,CAAnC;AACD;;AAEG+J,cAAAA,MA5DmC,GA4D1Bgc,aAAa,CAAChJ,OAAd,CAAsBqJ,SAAtB,EAAiC;AAC5C9wB,gBAAAA,GAAG,EAAHA,GAD4C;AAE5C0K,gBAAAA,IAAI,EAAJA,IAF4C;AAG5C9E,gBAAAA,CAAC,EAADA,CAH4C;AAI5CsiB,gBAAAA,SAAS,EAATA,SAJ4C;AAK5CpmB,gBAAAA,SAAS,EAATA,SAL4C;AAM5C0uB,gBAAAA,QAAQ,EAARA,QAN4C;AAO5CzrB,gBAAAA,WAAW,EAAXA;AAP4C,eAAjC,CA5D0B;AAAA,wBAsEN0P,MAtEM,EAsE/BpE,KAtE+B,WAsE/BA,KAtE+B,EAsExB8G,aAtEwB,WAsExBA,aAtEwB;;AAAA,oBAyEnCka,aAAa,IAAIla,aAzEkB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA0EtB0Z,eAAe,CAAC;AAC7BC,gBAAAA,SAAS,EAATA,SAD6B;AAE7B3Z,gBAAAA,aAAa,EAAbA,aAF6B;AAG7BzM,gBAAAA,IAAI,EAAJA,IAH6B;AAI7B9E,gBAAAA,CAAC,EAADA,CAJ6B;AAK7BsiB,gBAAAA,SAAS,EAATA,SAL6B;AAM7BzT,gBAAAA,MAAM,EAANA,MAN6B;AAO7BpE,gBAAAA,KAAK,EAALA,KAP6B;AAQ7BrQ,gBAAAA,GAAG,EAAHA;AAR6B,eAAD,CA1EO;;AAAA;AA0ErCyU,cAAAA,MA1EqC;AAAA;AAAA;;AAAA;AAqFrCA,cAAAA,MAAM,uCACDA,MADC;AAEJyc,gBAAAA,WAAW,EAAE,CAFT;AAGJQ,gBAAAA,cAAc,EAAE;AAHZ,gBAAN;;AArFqC;AA4FvC,kBAAI3sB,WAAW,KAAK,UAApB,EAAgC;AACxB4sB,gBAAAA,eADwB,GACN,IAAIC,mCAAJ,EADM;AAE9Bnd,gBAAAA,MAAM,CAACxR,OAAP,GAAiB0uB,eAAe,CAACE,QAAhB,CAAyBpd,MAAM,CAACxR,OAAhC,CAAjB;AACD,eAHD,MAGO,IAAI8B,WAAW,KAAK,MAApB,EAA4B;AACjC0P,gBAAAA,MAAM,CAACxR,OAAP,GAAiB2C,CAAC,CAAChG,IAAF,CAAOgG,CAAC,CAAC6O,MAAM,CAACxR,OAAR,CAAR,CAAjB;AACD;;AAjGsC,oFAmG3BwR,MAnG2B,GAmGhBgd,aAnGgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoGxC,GArGa;AAuGd9tB,EAAAA,OAAO,EAAE,CAAC,CAACD,2BAAO,CAACC,OAvGL;AAyGd;AACA;AACAsB,EAAAA,aA3Gc,yBA2GAjF,GA3GA,EA2GK;AACjB,WAAOqU,QAAQ,CAACC,MAAT,CAAgBtU,GAAhB,CAAP;AACD,GA7Ga;AA+Gd+V,EAAAA,YA/Gc,0BA+GDN,SA/GC,EA+GU;AACtB,WAAO+b,YAAkB,CAAC/b,SAAD,CAAzB;AACD;AAjHa;;;;"}